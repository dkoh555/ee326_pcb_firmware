
ee326_firmware_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b90  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00402b90  00402b90  00012b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000043c  20000000  00402b98  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000004d4  2000043c  00402fd4  0002043c  2**2
                  ALLOC
  4 .stack        00003000  20000910  004034a8  0002043c  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020466  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001137c  00000000  00000000  000204bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000022ae  00000000  00000000  0003183b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000062dc  00000000  00000000  00033ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ab8  00000000  00000000  00039dc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000009c8  00000000  00000000  0003a87d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00005389  00000000  00000000  0003b245  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000c4e2  00000000  00000000  000405ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00051a07  00000000  00000000  0004cab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000030c8  00000000  00000000  0009e4b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	10 39 00 20 35 1c 40 00 fd 1c 40 00 fd 1c 40 00     .9. 5.@...@...@.
  400010:	fd 1c 40 00 fd 1c 40 00 fd 1c 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	fd 1c 40 00 fd 1c 40 00 00 00 00 00 fd 1c 40 00     ..@...@.......@.
  40003c:	fd 1c 40 00 fd 1c 40 00 fd 1c 40 00 fd 1c 40 00     ..@...@...@...@.
  40004c:	fd 1c 40 00 fd 1c 40 00 fd 1c 40 00 fd 1c 40 00     ..@...@...@...@.
  40005c:	00 00 00 00 fd 1c 40 00 fd 1c 40 00 00 00 00 00     ......@...@.....
  40006c:	c9 12 40 00 e1 12 40 00 00 00 00 00 3d 08 40 00     ..@...@.....=.@.
  40007c:	fd 1c 40 00 00 00 00 00 00 00 00 00 fd 1c 40 00     ..@...........@.
  40008c:	fd 1c 40 00 fd 1c 40 00 fd 1c 40 00 fd 1c 40 00     ..@...@...@...@.
  40009c:	3d 15 40 00 fd 1c 40 00 fd 1c 40 00 00 00 00 00     =.@...@...@.....
	...
  4000b4:	fd 1c 40 00 fd 1c 40 00 fd 1c 40 00 fd 1c 40 00     ..@...@...@...@.
  4000c4:	fd 1c 40 00 fd 1c 40 00                             ..@...@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	2000043c 	.word	0x2000043c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00402b98 	.word	0x00402b98

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00402b98 	.word	0x00402b98
  40012c:	20000440 	.word	0x20000440
  400130:	00402b98 	.word	0x00402b98
  400134:	00000000 	.word	0x00000000

00400138 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400138:	b580      	push	{r7, lr}
  40013a:	b082      	sub	sp, #8
  40013c:	af00      	add	r7, sp, #0
  40013e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400140:	6878      	ldr	r0, [r7, #4]
  400142:	4b03      	ldr	r3, [pc, #12]	; (400150 <sysclk_enable_peripheral_clock+0x18>)
  400144:	4798      	blx	r3
}
  400146:	bf00      	nop
  400148:	3708      	adds	r7, #8
  40014a:	46bd      	mov	sp, r7
  40014c:	bd80      	pop	{r7, pc}
  40014e:	bf00      	nop
  400150:	00401ba9 	.word	0x00401ba9

00400154 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400154:	b580      	push	{r7, lr}
  400156:	b082      	sub	sp, #8
  400158:	af00      	add	r7, sp, #0
  40015a:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
  40015c:	2015      	movs	r0, #21
  40015e:	4b03      	ldr	r3, [pc, #12]	; (40016c <spi_enable_clock+0x18>)
  400160:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  400162:	bf00      	nop
  400164:	3708      	adds	r7, #8
  400166:	46bd      	mov	sp, r7
  400168:	bd80      	pop	{r7, pc}
  40016a:	bf00      	nop
  40016c:	00400139 	.word	0x00400139

00400170 <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
  400170:	b480      	push	{r7}
  400172:	b083      	sub	sp, #12
  400174:	af00      	add	r7, sp, #0
  400176:	6078      	str	r0, [r7, #4]
  400178:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  40017a:	687b      	ldr	r3, [r7, #4]
  40017c:	685b      	ldr	r3, [r3, #4]
  40017e:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
  400182:	687b      	ldr	r3, [r7, #4]
  400184:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400186:	687b      	ldr	r3, [r7, #4]
  400188:	685a      	ldr	r2, [r3, #4]
  40018a:	683b      	ldr	r3, [r7, #0]
  40018c:	041b      	lsls	r3, r3, #16
  40018e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  400192:	431a      	orrs	r2, r3
  400194:	687b      	ldr	r3, [r7, #4]
  400196:	605a      	str	r2, [r3, #4]
}
  400198:	bf00      	nop
  40019a:	370c      	adds	r7, #12
  40019c:	46bd      	mov	sp, r7
  40019e:	bc80      	pop	{r7}
  4001a0:	4770      	bx	lr

004001a2 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
  4001a2:	b480      	push	{r7}
  4001a4:	b085      	sub	sp, #20
  4001a6:	af00      	add	r7, sp, #0
  4001a8:	60f8      	str	r0, [r7, #12]
  4001aa:	60b9      	str	r1, [r7, #8]
  4001ac:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
  4001ae:	687b      	ldr	r3, [r7, #4]
  4001b0:	2b00      	cmp	r3, #0
  4001b2:	d00c      	beq.n	4001ce <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4001b4:	68fb      	ldr	r3, [r7, #12]
  4001b6:	68ba      	ldr	r2, [r7, #8]
  4001b8:	320c      	adds	r2, #12
  4001ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4001be:	f043 0101 	orr.w	r1, r3, #1
  4001c2:	68fb      	ldr	r3, [r7, #12]
  4001c4:	68ba      	ldr	r2, [r7, #8]
  4001c6:	320c      	adds	r2, #12
  4001c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
	}
}
  4001cc:	e00b      	b.n	4001e6 <spi_set_clock_polarity+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4001ce:	68fb      	ldr	r3, [r7, #12]
  4001d0:	68ba      	ldr	r2, [r7, #8]
  4001d2:	320c      	adds	r2, #12
  4001d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4001d8:	f023 0101 	bic.w	r1, r3, #1
  4001dc:	68fb      	ldr	r3, [r7, #12]
  4001de:	68ba      	ldr	r2, [r7, #8]
  4001e0:	320c      	adds	r2, #12
  4001e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  4001e6:	bf00      	nop
  4001e8:	3714      	adds	r7, #20
  4001ea:	46bd      	mov	sp, r7
  4001ec:	bc80      	pop	{r7}
  4001ee:	4770      	bx	lr

004001f0 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
  4001f0:	b480      	push	{r7}
  4001f2:	b085      	sub	sp, #20
  4001f4:	af00      	add	r7, sp, #0
  4001f6:	60f8      	str	r0, [r7, #12]
  4001f8:	60b9      	str	r1, [r7, #8]
  4001fa:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
  4001fc:	687b      	ldr	r3, [r7, #4]
  4001fe:	2b00      	cmp	r3, #0
  400200:	d00c      	beq.n	40021c <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400202:	68fb      	ldr	r3, [r7, #12]
  400204:	68ba      	ldr	r2, [r7, #8]
  400206:	320c      	adds	r2, #12
  400208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40020c:	f043 0102 	orr.w	r1, r3, #2
  400210:	68fb      	ldr	r3, [r7, #12]
  400212:	68ba      	ldr	r2, [r7, #8]
  400214:	320c      	adds	r2, #12
  400216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
	}
}
  40021a:	e00b      	b.n	400234 <spi_set_clock_phase+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  40021c:	68fb      	ldr	r3, [r7, #12]
  40021e:	68ba      	ldr	r2, [r7, #8]
  400220:	320c      	adds	r2, #12
  400222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400226:	f023 0102 	bic.w	r1, r3, #2
  40022a:	68fb      	ldr	r3, [r7, #12]
  40022c:	68ba      	ldr	r2, [r7, #8]
  40022e:	320c      	adds	r2, #12
  400230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  400234:	bf00      	nop
  400236:	3714      	adds	r7, #20
  400238:	46bd      	mov	sp, r7
  40023a:	bc80      	pop	{r7}
  40023c:	4770      	bx	lr

0040023e <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  40023e:	b480      	push	{r7}
  400240:	b085      	sub	sp, #20
  400242:	af00      	add	r7, sp, #0
  400244:	60f8      	str	r0, [r7, #12]
  400246:	60b9      	str	r1, [r7, #8]
  400248:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  40024a:	68fb      	ldr	r3, [r7, #12]
  40024c:	68ba      	ldr	r2, [r7, #8]
  40024e:	320c      	adds	r2, #12
  400250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400254:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
  400258:	68fb      	ldr	r3, [r7, #12]
  40025a:	68ba      	ldr	r2, [r7, #8]
  40025c:	320c      	adds	r2, #12
  40025e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  400262:	68fb      	ldr	r3, [r7, #12]
  400264:	68ba      	ldr	r2, [r7, #8]
  400266:	320c      	adds	r2, #12
  400268:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  40026c:	687b      	ldr	r3, [r7, #4]
  40026e:	ea42 0103 	orr.w	r1, r2, r3
  400272:	68fb      	ldr	r3, [r7, #12]
  400274:	68ba      	ldr	r2, [r7, #8]
  400276:	320c      	adds	r2, #12
  400278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  40027c:	bf00      	nop
  40027e:	3714      	adds	r7, #20
  400280:	46bd      	mov	sp, r7
  400282:	bc80      	pop	{r7}
  400284:	4770      	bx	lr

00400286 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400286:	b480      	push	{r7}
  400288:	b089      	sub	sp, #36	; 0x24
  40028a:	af00      	add	r7, sp, #0
  40028c:	60f8      	str	r0, [r7, #12]
  40028e:	60b9      	str	r1, [r7, #8]
  400290:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400292:	68bb      	ldr	r3, [r7, #8]
  400294:	011a      	lsls	r2, r3, #4
  400296:	687b      	ldr	r3, [r7, #4]
  400298:	429a      	cmp	r2, r3
  40029a:	d802      	bhi.n	4002a2 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  40029c:	2310      	movs	r3, #16
  40029e:	61fb      	str	r3, [r7, #28]
  4002a0:	e001      	b.n	4002a6 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  4002a2:	2308      	movs	r3, #8
  4002a4:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4002a6:	687b      	ldr	r3, [r7, #4]
  4002a8:	00da      	lsls	r2, r3, #3
  4002aa:	69fb      	ldr	r3, [r7, #28]
  4002ac:	68b9      	ldr	r1, [r7, #8]
  4002ae:	fb01 f303 	mul.w	r3, r1, r3
  4002b2:	085b      	lsrs	r3, r3, #1
  4002b4:	441a      	add	r2, r3
  4002b6:	69fb      	ldr	r3, [r7, #28]
  4002b8:	68b9      	ldr	r1, [r7, #8]
  4002ba:	fb01 f303 	mul.w	r3, r1, r3
  4002be:	fbb2 f3f3 	udiv	r3, r2, r3
  4002c2:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  4002c4:	69bb      	ldr	r3, [r7, #24]
  4002c6:	08db      	lsrs	r3, r3, #3
  4002c8:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  4002ca:	69bb      	ldr	r3, [r7, #24]
  4002cc:	f003 0307 	and.w	r3, r3, #7
  4002d0:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4002d2:	697b      	ldr	r3, [r7, #20]
  4002d4:	2b00      	cmp	r3, #0
  4002d6:	d003      	beq.n	4002e0 <usart_set_async_baudrate+0x5a>
  4002d8:	697b      	ldr	r3, [r7, #20]
  4002da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4002de:	d301      	bcc.n	4002e4 <usart_set_async_baudrate+0x5e>
		return 1;
  4002e0:	2301      	movs	r3, #1
  4002e2:	e00f      	b.n	400304 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  4002e4:	69fb      	ldr	r3, [r7, #28]
  4002e6:	2b08      	cmp	r3, #8
  4002e8:	d105      	bne.n	4002f6 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  4002ea:	68fb      	ldr	r3, [r7, #12]
  4002ec:	685b      	ldr	r3, [r3, #4]
  4002ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  4002f2:	68fb      	ldr	r3, [r7, #12]
  4002f4:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4002f6:	693b      	ldr	r3, [r7, #16]
  4002f8:	041a      	lsls	r2, r3, #16
  4002fa:	697b      	ldr	r3, [r7, #20]
  4002fc:	431a      	orrs	r2, r3
  4002fe:	68fb      	ldr	r3, [r7, #12]
  400300:	621a      	str	r2, [r3, #32]

	return 0;
  400302:	2300      	movs	r3, #0
}
  400304:	4618      	mov	r0, r3
  400306:	3724      	adds	r7, #36	; 0x24
  400308:	46bd      	mov	sp, r7
  40030a:	bc80      	pop	{r7}
  40030c:	4770      	bx	lr
	...

00400310 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  400310:	b580      	push	{r7, lr}
  400312:	b082      	sub	sp, #8
  400314:	af00      	add	r7, sp, #0
  400316:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  400318:	6878      	ldr	r0, [r7, #4]
  40031a:	4b0f      	ldr	r3, [pc, #60]	; (400358 <usart_reset+0x48>)
  40031c:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  40031e:	687b      	ldr	r3, [r7, #4]
  400320:	2200      	movs	r2, #0
  400322:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  400324:	687b      	ldr	r3, [r7, #4]
  400326:	2200      	movs	r2, #0
  400328:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40032a:	687b      	ldr	r3, [r7, #4]
  40032c:	2200      	movs	r2, #0
  40032e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  400330:	6878      	ldr	r0, [r7, #4]
  400332:	4b0a      	ldr	r3, [pc, #40]	; (40035c <usart_reset+0x4c>)
  400334:	4798      	blx	r3
	usart_reset_rx(p_usart);
  400336:	6878      	ldr	r0, [r7, #4]
  400338:	4b09      	ldr	r3, [pc, #36]	; (400360 <usart_reset+0x50>)
  40033a:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  40033c:	6878      	ldr	r0, [r7, #4]
  40033e:	4b09      	ldr	r3, [pc, #36]	; (400364 <usart_reset+0x54>)
  400340:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  400342:	6878      	ldr	r0, [r7, #4]
  400344:	4b08      	ldr	r3, [pc, #32]	; (400368 <usart_reset+0x58>)
  400346:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  400348:	6878      	ldr	r0, [r7, #4]
  40034a:	4b08      	ldr	r3, [pc, #32]	; (40036c <usart_reset+0x5c>)
  40034c:	4798      	blx	r3
#endif
}
  40034e:	bf00      	nop
  400350:	3708      	adds	r7, #8
  400352:	46bd      	mov	sp, r7
  400354:	bd80      	pop	{r7, pc}
  400356:	bf00      	nop
  400358:	00400581 	.word	0x00400581
  40035c:	0040040d 	.word	0x0040040d
  400360:	0040043d 	.word	0x0040043d
  400364:	0040049f 	.word	0x0040049f
  400368:	004004d3 	.word	0x004004d3
  40036c:	004004b9 	.word	0x004004b9

00400370 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400370:	b580      	push	{r7, lr}
  400372:	b084      	sub	sp, #16
  400374:	af00      	add	r7, sp, #0
  400376:	60f8      	str	r0, [r7, #12]
  400378:	60b9      	str	r1, [r7, #8]
  40037a:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  40037c:	68f8      	ldr	r0, [r7, #12]
  40037e:	4b1a      	ldr	r3, [pc, #104]	; (4003e8 <usart_init_rs232+0x78>)
  400380:	4798      	blx	r3

	ul_reg_val = 0;
  400382:	4b1a      	ldr	r3, [pc, #104]	; (4003ec <usart_init_rs232+0x7c>)
  400384:	2200      	movs	r2, #0
  400386:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400388:	68bb      	ldr	r3, [r7, #8]
  40038a:	2b00      	cmp	r3, #0
  40038c:	d009      	beq.n	4003a2 <usart_init_rs232+0x32>
  40038e:	68bb      	ldr	r3, [r7, #8]
  400390:	681b      	ldr	r3, [r3, #0]
  400392:	687a      	ldr	r2, [r7, #4]
  400394:	4619      	mov	r1, r3
  400396:	68f8      	ldr	r0, [r7, #12]
  400398:	4b15      	ldr	r3, [pc, #84]	; (4003f0 <usart_init_rs232+0x80>)
  40039a:	4798      	blx	r3
  40039c:	4603      	mov	r3, r0
  40039e:	2b00      	cmp	r3, #0
  4003a0:	d001      	beq.n	4003a6 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4003a2:	2301      	movs	r3, #1
  4003a4:	e01b      	b.n	4003de <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4003a6:	68bb      	ldr	r3, [r7, #8]
  4003a8:	685a      	ldr	r2, [r3, #4]
  4003aa:	68bb      	ldr	r3, [r7, #8]
  4003ac:	689b      	ldr	r3, [r3, #8]
  4003ae:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4003b0:	68bb      	ldr	r3, [r7, #8]
  4003b2:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4003b4:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4003b6:	68bb      	ldr	r3, [r7, #8]
  4003b8:	68db      	ldr	r3, [r3, #12]
  4003ba:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4003bc:	4b0b      	ldr	r3, [pc, #44]	; (4003ec <usart_init_rs232+0x7c>)
  4003be:	681b      	ldr	r3, [r3, #0]
  4003c0:	4313      	orrs	r3, r2
  4003c2:	4a0a      	ldr	r2, [pc, #40]	; (4003ec <usart_init_rs232+0x7c>)
  4003c4:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  4003c6:	4b09      	ldr	r3, [pc, #36]	; (4003ec <usart_init_rs232+0x7c>)
  4003c8:	681b      	ldr	r3, [r3, #0]
  4003ca:	4a08      	ldr	r2, [pc, #32]	; (4003ec <usart_init_rs232+0x7c>)
  4003cc:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  4003ce:	68fb      	ldr	r3, [r7, #12]
  4003d0:	685a      	ldr	r2, [r3, #4]
  4003d2:	4b06      	ldr	r3, [pc, #24]	; (4003ec <usart_init_rs232+0x7c>)
  4003d4:	681b      	ldr	r3, [r3, #0]
  4003d6:	431a      	orrs	r2, r3
  4003d8:	68fb      	ldr	r3, [r7, #12]
  4003da:	605a      	str	r2, [r3, #4]

	return 0;
  4003dc:	2300      	movs	r3, #0
}
  4003de:	4618      	mov	r0, r3
  4003e0:	3710      	adds	r7, #16
  4003e2:	46bd      	mov	sp, r7
  4003e4:	bd80      	pop	{r7, pc}
  4003e6:	bf00      	nop
  4003e8:	00400311 	.word	0x00400311
  4003ec:	20000458 	.word	0x20000458
  4003f0:	00400287 	.word	0x00400287

004003f4 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  4003f4:	b480      	push	{r7}
  4003f6:	b083      	sub	sp, #12
  4003f8:	af00      	add	r7, sp, #0
  4003fa:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  4003fc:	687b      	ldr	r3, [r7, #4]
  4003fe:	2240      	movs	r2, #64	; 0x40
  400400:	601a      	str	r2, [r3, #0]
}
  400402:	bf00      	nop
  400404:	370c      	adds	r7, #12
  400406:	46bd      	mov	sp, r7
  400408:	bc80      	pop	{r7}
  40040a:	4770      	bx	lr

0040040c <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  40040c:	b480      	push	{r7}
  40040e:	b083      	sub	sp, #12
  400410:	af00      	add	r7, sp, #0
  400412:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400414:	687b      	ldr	r3, [r7, #4]
  400416:	2288      	movs	r2, #136	; 0x88
  400418:	601a      	str	r2, [r3, #0]
}
  40041a:	bf00      	nop
  40041c:	370c      	adds	r7, #12
  40041e:	46bd      	mov	sp, r7
  400420:	bc80      	pop	{r7}
  400422:	4770      	bx	lr

00400424 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  400424:	b480      	push	{r7}
  400426:	b083      	sub	sp, #12
  400428:	af00      	add	r7, sp, #0
  40042a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  40042c:	687b      	ldr	r3, [r7, #4]
  40042e:	2210      	movs	r2, #16
  400430:	601a      	str	r2, [r3, #0]
}
  400432:	bf00      	nop
  400434:	370c      	adds	r7, #12
  400436:	46bd      	mov	sp, r7
  400438:	bc80      	pop	{r7}
  40043a:	4770      	bx	lr

0040043c <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  40043c:	b480      	push	{r7}
  40043e:	b083      	sub	sp, #12
  400440:	af00      	add	r7, sp, #0
  400442:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400444:	687b      	ldr	r3, [r7, #4]
  400446:	2224      	movs	r2, #36	; 0x24
  400448:	601a      	str	r2, [r3, #0]
}
  40044a:	bf00      	nop
  40044c:	370c      	adds	r7, #12
  40044e:	46bd      	mov	sp, r7
  400450:	bc80      	pop	{r7}
  400452:	4770      	bx	lr

00400454 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  400454:	b480      	push	{r7}
  400456:	b083      	sub	sp, #12
  400458:	af00      	add	r7, sp, #0
  40045a:	6078      	str	r0, [r7, #4]
  40045c:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  40045e:	687b      	ldr	r3, [r7, #4]
  400460:	683a      	ldr	r2, [r7, #0]
  400462:	609a      	str	r2, [r3, #8]
}
  400464:	bf00      	nop
  400466:	370c      	adds	r7, #12
  400468:	46bd      	mov	sp, r7
  40046a:	bc80      	pop	{r7}
  40046c:	4770      	bx	lr

0040046e <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  40046e:	b480      	push	{r7}
  400470:	b083      	sub	sp, #12
  400472:	af00      	add	r7, sp, #0
  400474:	6078      	str	r0, [r7, #4]
  400476:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  400478:	687b      	ldr	r3, [r7, #4]
  40047a:	683a      	ldr	r2, [r7, #0]
  40047c:	60da      	str	r2, [r3, #12]
}
  40047e:	bf00      	nop
  400480:	370c      	adds	r7, #12
  400482:	46bd      	mov	sp, r7
  400484:	bc80      	pop	{r7}
  400486:	4770      	bx	lr

00400488 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  400488:	b480      	push	{r7}
  40048a:	b083      	sub	sp, #12
  40048c:	af00      	add	r7, sp, #0
  40048e:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  400490:	687b      	ldr	r3, [r7, #4]
  400492:	695b      	ldr	r3, [r3, #20]
}
  400494:	4618      	mov	r0, r3
  400496:	370c      	adds	r7, #12
  400498:	46bd      	mov	sp, r7
  40049a:	bc80      	pop	{r7}
  40049c:	4770      	bx	lr

0040049e <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  40049e:	b480      	push	{r7}
  4004a0:	b083      	sub	sp, #12
  4004a2:	af00      	add	r7, sp, #0
  4004a4:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  4004a6:	687b      	ldr	r3, [r7, #4]
  4004a8:	f44f 7280 	mov.w	r2, #256	; 0x100
  4004ac:	601a      	str	r2, [r3, #0]
}
  4004ae:	bf00      	nop
  4004b0:	370c      	adds	r7, #12
  4004b2:	46bd      	mov	sp, r7
  4004b4:	bc80      	pop	{r7}
  4004b6:	4770      	bx	lr

004004b8 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  4004b8:	b480      	push	{r7}
  4004ba:	b083      	sub	sp, #12
  4004bc:	af00      	add	r7, sp, #0
  4004be:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  4004c0:	687b      	ldr	r3, [r7, #4]
  4004c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  4004c6:	601a      	str	r2, [r3, #0]
}
  4004c8:	bf00      	nop
  4004ca:	370c      	adds	r7, #12
  4004cc:	46bd      	mov	sp, r7
  4004ce:	bc80      	pop	{r7}
  4004d0:	4770      	bx	lr

004004d2 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  4004d2:	b480      	push	{r7}
  4004d4:	b083      	sub	sp, #12
  4004d6:	af00      	add	r7, sp, #0
  4004d8:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  4004da:	687b      	ldr	r3, [r7, #4]
  4004dc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4004e0:	601a      	str	r2, [r3, #0]
}
  4004e2:	bf00      	nop
  4004e4:	370c      	adds	r7, #12
  4004e6:	46bd      	mov	sp, r7
  4004e8:	bc80      	pop	{r7}
  4004ea:	4770      	bx	lr

004004ec <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
  4004ec:	b480      	push	{r7}
  4004ee:	b083      	sub	sp, #12
  4004f0:	af00      	add	r7, sp, #0
  4004f2:	6078      	str	r0, [r7, #4]
  4004f4:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4004f6:	bf00      	nop
  4004f8:	687b      	ldr	r3, [r7, #4]
  4004fa:	695b      	ldr	r3, [r3, #20]
  4004fc:	f003 0302 	and.w	r3, r3, #2
  400500:	2b00      	cmp	r3, #0
  400502:	d0f9      	beq.n	4004f8 <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400504:	683b      	ldr	r3, [r7, #0]
  400506:	f3c3 0208 	ubfx	r2, r3, #0, #9
  40050a:	687b      	ldr	r3, [r7, #4]
  40050c:	61da      	str	r2, [r3, #28]

	return 0;
  40050e:	2300      	movs	r3, #0
}
  400510:	4618      	mov	r0, r3
  400512:	370c      	adds	r7, #12
  400514:	46bd      	mov	sp, r7
  400516:	bc80      	pop	{r7}
  400518:	4770      	bx	lr
	...

0040051c <usart_write_line>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param string Pointer to one-line string to be sent.
 */
void usart_write_line(Usart *p_usart, const char *string)
{
  40051c:	b580      	push	{r7, lr}
  40051e:	b082      	sub	sp, #8
  400520:	af00      	add	r7, sp, #0
  400522:	6078      	str	r0, [r7, #4]
  400524:	6039      	str	r1, [r7, #0]
	while (*string != '\0') {
  400526:	e007      	b.n	400538 <usart_write_line+0x1c>
		usart_putchar(p_usart, *string++);
  400528:	683b      	ldr	r3, [r7, #0]
  40052a:	1c5a      	adds	r2, r3, #1
  40052c:	603a      	str	r2, [r7, #0]
  40052e:	781b      	ldrb	r3, [r3, #0]
  400530:	4619      	mov	r1, r3
  400532:	6878      	ldr	r0, [r7, #4]
  400534:	4b04      	ldr	r3, [pc, #16]	; (400548 <usart_write_line+0x2c>)
  400536:	4798      	blx	r3
	while (*string != '\0') {
  400538:	683b      	ldr	r3, [r7, #0]
  40053a:	781b      	ldrb	r3, [r3, #0]
  40053c:	2b00      	cmp	r3, #0
  40053e:	d1f3      	bne.n	400528 <usart_write_line+0xc>
	}
}
  400540:	bf00      	nop
  400542:	3708      	adds	r7, #8
  400544:	46bd      	mov	sp, r7
  400546:	bd80      	pop	{r7, pc}
  400548:	004004ed 	.word	0x004004ed

0040054c <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  40054c:	b480      	push	{r7}
  40054e:	b083      	sub	sp, #12
  400550:	af00      	add	r7, sp, #0
  400552:	6078      	str	r0, [r7, #4]
  400554:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400556:	687b      	ldr	r3, [r7, #4]
  400558:	695b      	ldr	r3, [r3, #20]
  40055a:	f003 0301 	and.w	r3, r3, #1
  40055e:	2b00      	cmp	r3, #0
  400560:	d101      	bne.n	400566 <usart_read+0x1a>
		return 1;
  400562:	2301      	movs	r3, #1
  400564:	e006      	b.n	400574 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400566:	687b      	ldr	r3, [r7, #4]
  400568:	699b      	ldr	r3, [r3, #24]
  40056a:	f3c3 0208 	ubfx	r2, r3, #0, #9
  40056e:	683b      	ldr	r3, [r7, #0]
  400570:	601a      	str	r2, [r3, #0]

	return 0;
  400572:	2300      	movs	r3, #0
}
  400574:	4618      	mov	r0, r3
  400576:	370c      	adds	r7, #12
  400578:	46bd      	mov	sp, r7
  40057a:	bc80      	pop	{r7}
  40057c:	4770      	bx	lr
	...

00400580 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  400580:	b480      	push	{r7}
  400582:	b083      	sub	sp, #12
  400584:	af00      	add	r7, sp, #0
  400586:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400588:	687b      	ldr	r3, [r7, #4]
  40058a:	4a04      	ldr	r2, [pc, #16]	; (40059c <usart_disable_writeprotect+0x1c>)
  40058c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  400590:	bf00      	nop
  400592:	370c      	adds	r7, #12
  400594:	46bd      	mov	sp, r7
  400596:	bc80      	pop	{r7}
  400598:	4770      	bx	lr
  40059a:	bf00      	nop
  40059c:	55534100 	.word	0x55534100

004005a0 <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  4005a0:	b480      	push	{r7}
  4005a2:	b083      	sub	sp, #12
  4005a4:	af00      	add	r7, sp, #0
  4005a6:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  4005a8:	687b      	ldr	r3, [r7, #4]
  4005aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4005ae:	605a      	str	r2, [r3, #4]

}
  4005b0:	bf00      	nop
  4005b2:	370c      	adds	r7, #12
  4005b4:	46bd      	mov	sp, r7
  4005b6:	bc80      	pop	{r7}
  4005b8:	4770      	bx	lr
	...

004005bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  4005bc:	b480      	push	{r7}
  4005be:	b083      	sub	sp, #12
  4005c0:	af00      	add	r7, sp, #0
  4005c2:	4603      	mov	r3, r0
  4005c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  4005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4005ca:	2b00      	cmp	r3, #0
  4005cc:	db0b      	blt.n	4005e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4005ce:	4908      	ldr	r1, [pc, #32]	; (4005f0 <__NVIC_EnableIRQ+0x34>)
  4005d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4005d4:	095b      	lsrs	r3, r3, #5
  4005d6:	79fa      	ldrb	r2, [r7, #7]
  4005d8:	f002 021f 	and.w	r2, r2, #31
  4005dc:	2001      	movs	r0, #1
  4005de:	fa00 f202 	lsl.w	r2, r0, r2
  4005e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  4005e6:	bf00      	nop
  4005e8:	370c      	adds	r7, #12
  4005ea:	46bd      	mov	sp, r7
  4005ec:	bc80      	pop	{r7}
  4005ee:	4770      	bx	lr
  4005f0:	e000e100 	.word	0xe000e100

004005f4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  4005f4:	b480      	push	{r7}
  4005f6:	b083      	sub	sp, #12
  4005f8:	af00      	add	r7, sp, #0
  4005fa:	4603      	mov	r3, r0
  4005fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  4005fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400602:	2b00      	cmp	r3, #0
  400604:	db10      	blt.n	400628 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400606:	490b      	ldr	r1, [pc, #44]	; (400634 <__NVIC_DisableIRQ+0x40>)
  400608:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40060c:	095b      	lsrs	r3, r3, #5
  40060e:	79fa      	ldrb	r2, [r7, #7]
  400610:	f002 021f 	and.w	r2, r2, #31
  400614:	2001      	movs	r0, #1
  400616:	fa00 f202 	lsl.w	r2, r0, r2
  40061a:	3320      	adds	r3, #32
  40061c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  400620:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400624:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
  400628:	bf00      	nop
  40062a:	370c      	adds	r7, #12
  40062c:	46bd      	mov	sp, r7
  40062e:	bc80      	pop	{r7}
  400630:	4770      	bx	lr
  400632:	bf00      	nop
  400634:	e000e100 	.word	0xe000e100

00400638 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  400638:	b480      	push	{r7}
  40063a:	b083      	sub	sp, #12
  40063c:	af00      	add	r7, sp, #0
  40063e:	4603      	mov	r3, r0
  400640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  400642:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400646:	2b00      	cmp	r3, #0
  400648:	db0c      	blt.n	400664 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40064a:	4909      	ldr	r1, [pc, #36]	; (400670 <__NVIC_ClearPendingIRQ+0x38>)
  40064c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400650:	095b      	lsrs	r3, r3, #5
  400652:	79fa      	ldrb	r2, [r7, #7]
  400654:	f002 021f 	and.w	r2, r2, #31
  400658:	2001      	movs	r0, #1
  40065a:	fa00 f202 	lsl.w	r2, r0, r2
  40065e:	3360      	adds	r3, #96	; 0x60
  400660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  400664:	bf00      	nop
  400666:	370c      	adds	r7, #12
  400668:	46bd      	mov	sp, r7
  40066a:	bc80      	pop	{r7}
  40066c:	4770      	bx	lr
  40066e:	bf00      	nop
  400670:	e000e100 	.word	0xe000e100

00400674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  400674:	b480      	push	{r7}
  400676:	b083      	sub	sp, #12
  400678:	af00      	add	r7, sp, #0
  40067a:	4603      	mov	r3, r0
  40067c:	6039      	str	r1, [r7, #0]
  40067e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  400680:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400684:	2b00      	cmp	r3, #0
  400686:	db0a      	blt.n	40069e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400688:	490d      	ldr	r1, [pc, #52]	; (4006c0 <__NVIC_SetPriority+0x4c>)
  40068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40068e:	683a      	ldr	r2, [r7, #0]
  400690:	b2d2      	uxtb	r2, r2
  400692:	0112      	lsls	r2, r2, #4
  400694:	b2d2      	uxtb	r2, r2
  400696:	440b      	add	r3, r1
  400698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
  40069c:	e00a      	b.n	4006b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40069e:	4909      	ldr	r1, [pc, #36]	; (4006c4 <__NVIC_SetPriority+0x50>)
  4006a0:	79fb      	ldrb	r3, [r7, #7]
  4006a2:	f003 030f 	and.w	r3, r3, #15
  4006a6:	3b04      	subs	r3, #4
  4006a8:	683a      	ldr	r2, [r7, #0]
  4006aa:	b2d2      	uxtb	r2, r2
  4006ac:	0112      	lsls	r2, r2, #4
  4006ae:	b2d2      	uxtb	r2, r2
  4006b0:	440b      	add	r3, r1
  4006b2:	761a      	strb	r2, [r3, #24]
}
  4006b4:	bf00      	nop
  4006b6:	370c      	adds	r7, #12
  4006b8:	46bd      	mov	sp, r7
  4006ba:	bc80      	pop	{r7}
  4006bc:	4770      	bx	lr
  4006be:	bf00      	nop
  4006c0:	e000e100 	.word	0xe000e100
  4006c4:	e000ed00 	.word	0xe000ed00

004006c8 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4006c8:	b480      	push	{r7}
  4006ca:	b083      	sub	sp, #12
  4006cc:	af00      	add	r7, sp, #0
  4006ce:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4006d0:	687b      	ldr	r3, [r7, #4]
  4006d2:	2b07      	cmp	r3, #7
  4006d4:	d825      	bhi.n	400722 <osc_get_rate+0x5a>
  4006d6:	a201      	add	r2, pc, #4	; (adr r2, 4006dc <osc_get_rate+0x14>)
  4006d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4006dc:	004006fd 	.word	0x004006fd
  4006e0:	00400703 	.word	0x00400703
  4006e4:	00400709 	.word	0x00400709
  4006e8:	0040070f 	.word	0x0040070f
  4006ec:	00400713 	.word	0x00400713
  4006f0:	00400717 	.word	0x00400717
  4006f4:	0040071b 	.word	0x0040071b
  4006f8:	0040071f 	.word	0x0040071f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4006fc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400700:	e010      	b.n	400724 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400706:	e00d      	b.n	400724 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400708:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40070c:	e00a      	b.n	400724 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40070e:	4b08      	ldr	r3, [pc, #32]	; (400730 <osc_get_rate+0x68>)
  400710:	e008      	b.n	400724 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400712:	4b08      	ldr	r3, [pc, #32]	; (400734 <osc_get_rate+0x6c>)
  400714:	e006      	b.n	400724 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400716:	4b08      	ldr	r3, [pc, #32]	; (400738 <osc_get_rate+0x70>)
  400718:	e004      	b.n	400724 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40071a:	4b07      	ldr	r3, [pc, #28]	; (400738 <osc_get_rate+0x70>)
  40071c:	e002      	b.n	400724 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40071e:	4b06      	ldr	r3, [pc, #24]	; (400738 <osc_get_rate+0x70>)
  400720:	e000      	b.n	400724 <osc_get_rate+0x5c>
	}

	return 0;
  400722:	2300      	movs	r3, #0
}
  400724:	4618      	mov	r0, r3
  400726:	370c      	adds	r7, #12
  400728:	46bd      	mov	sp, r7
  40072a:	bc80      	pop	{r7}
  40072c:	4770      	bx	lr
  40072e:	bf00      	nop
  400730:	003d0900 	.word	0x003d0900
  400734:	007a1200 	.word	0x007a1200
  400738:	00b71b00 	.word	0x00b71b00

0040073c <sysclk_get_main_hz>:
{
  40073c:	b580      	push	{r7, lr}
  40073e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  400740:	2006      	movs	r0, #6
  400742:	4b04      	ldr	r3, [pc, #16]	; (400754 <sysclk_get_main_hz+0x18>)
  400744:	4798      	blx	r3
  400746:	4602      	mov	r2, r0
  400748:	4613      	mov	r3, r2
  40074a:	009b      	lsls	r3, r3, #2
  40074c:	4413      	add	r3, r2
  40074e:	009b      	lsls	r3, r3, #2
}
  400750:	4618      	mov	r0, r3
  400752:	bd80      	pop	{r7, pc}
  400754:	004006c9 	.word	0x004006c9

00400758 <sysclk_get_cpu_hz>:
{
  400758:	b580      	push	{r7, lr}
  40075a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  40075c:	4b02      	ldr	r3, [pc, #8]	; (400768 <sysclk_get_cpu_hz+0x10>)
  40075e:	4798      	blx	r3
  400760:	4603      	mov	r3, r0
  400762:	085b      	lsrs	r3, r3, #1
}
  400764:	4618      	mov	r0, r3
  400766:	bd80      	pop	{r7, pc}
  400768:	0040073d 	.word	0x0040073d

0040076c <sysclk_get_peripheral_hz>:
{
  40076c:	b580      	push	{r7, lr}
  40076e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400770:	4b02      	ldr	r3, [pc, #8]	; (40077c <sysclk_get_peripheral_hz+0x10>)
  400772:	4798      	blx	r3
  400774:	4603      	mov	r3, r0
  400776:	085b      	lsrs	r3, r3, #1
}
  400778:	4618      	mov	r0, r3
  40077a:	bd80      	pop	{r7, pc}
  40077c:	0040073d 	.word	0x0040073d

00400780 <sysclk_enable_peripheral_clock>:
{
  400780:	b580      	push	{r7, lr}
  400782:	b082      	sub	sp, #8
  400784:	af00      	add	r7, sp, #0
  400786:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400788:	6878      	ldr	r0, [r7, #4]
  40078a:	4b03      	ldr	r3, [pc, #12]	; (400798 <sysclk_enable_peripheral_clock+0x18>)
  40078c:	4798      	blx	r3
}
  40078e:	bf00      	nop
  400790:	3708      	adds	r7, #8
  400792:	46bd      	mov	sp, r7
  400794:	bd80      	pop	{r7, pc}
  400796:	bf00      	nop
  400798:	00401ba9 	.word	0x00401ba9

0040079c <spi_reset>:
 * \brief Reset SPI and set it to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
  40079c:	b480      	push	{r7}
  40079e:	b083      	sub	sp, #12
  4007a0:	af00      	add	r7, sp, #0
  4007a2:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  4007a4:	687b      	ldr	r3, [r7, #4]
  4007a6:	2280      	movs	r2, #128	; 0x80
  4007a8:	601a      	str	r2, [r3, #0]
}
  4007aa:	bf00      	nop
  4007ac:	370c      	adds	r7, #12
  4007ae:	46bd      	mov	sp, r7
  4007b0:	bc80      	pop	{r7}
  4007b2:	4770      	bx	lr

004007b4 <spi_enable>:
 * \brief Enable SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
  4007b4:	b480      	push	{r7}
  4007b6:	b083      	sub	sp, #12
  4007b8:	af00      	add	r7, sp, #0
  4007ba:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4007bc:	687b      	ldr	r3, [r7, #4]
  4007be:	2201      	movs	r2, #1
  4007c0:	601a      	str	r2, [r3, #0]
}
  4007c2:	bf00      	nop
  4007c4:	370c      	adds	r7, #12
  4007c6:	46bd      	mov	sp, r7
  4007c8:	bc80      	pop	{r7}
  4007ca:	4770      	bx	lr

004007cc <spi_disable>:
 * should check TX_EMPTY before disabling SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
  4007cc:	b480      	push	{r7}
  4007ce:	b083      	sub	sp, #12
  4007d0:	af00      	add	r7, sp, #0
  4007d2:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4007d4:	687b      	ldr	r3, [r7, #4]
  4007d6:	2202      	movs	r2, #2
  4007d8:	601a      	str	r2, [r3, #0]
}
  4007da:	bf00      	nop
  4007dc:	370c      	adds	r7, #12
  4007de:	46bd      	mov	sp, r7
  4007e0:	bc80      	pop	{r7}
  4007e2:	4770      	bx	lr

004007e4 <spi_set_slave_mode>:
 * \brief Set SPI to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_slave_mode(Spi *p_spi)
{
  4007e4:	b480      	push	{r7}
  4007e6:	b083      	sub	sp, #12
  4007e8:	af00      	add	r7, sp, #0
  4007ea:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_MSTR);
  4007ec:	687b      	ldr	r3, [r7, #4]
  4007ee:	685b      	ldr	r3, [r3, #4]
  4007f0:	f023 0201 	bic.w	r2, r3, #1
  4007f4:	687b      	ldr	r3, [r7, #4]
  4007f6:	605a      	str	r2, [r3, #4]
}
  4007f8:	bf00      	nop
  4007fa:	370c      	adds	r7, #12
  4007fc:	46bd      	mov	sp, r7
  4007fe:	bc80      	pop	{r7}
  400800:	4770      	bx	lr

00400802 <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
  400802:	b480      	push	{r7}
  400804:	b083      	sub	sp, #12
  400806:	af00      	add	r7, sp, #0
  400808:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  40080a:	687b      	ldr	r3, [r7, #4]
  40080c:	685b      	ldr	r3, [r3, #4]
  40080e:	f043 0210 	orr.w	r2, r3, #16
  400812:	687b      	ldr	r3, [r7, #4]
  400814:	605a      	str	r2, [r3, #4]
}
  400816:	bf00      	nop
  400818:	370c      	adds	r7, #12
  40081a:	46bd      	mov	sp, r7
  40081c:	bc80      	pop	{r7}
  40081e:	4770      	bx	lr

00400820 <spi_enable_interrupt>:
 *
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
  400820:	b480      	push	{r7}
  400822:	b083      	sub	sp, #12
  400824:	af00      	add	r7, sp, #0
  400826:	6078      	str	r0, [r7, #4]
  400828:	6039      	str	r1, [r7, #0]
	p_spi->SPI_IER = ul_sources;
  40082a:	687b      	ldr	r3, [r7, #4]
  40082c:	683a      	ldr	r2, [r7, #0]
  40082e:	615a      	str	r2, [r3, #20]
}
  400830:	bf00      	nop
  400832:	370c      	adds	r7, #12
  400834:	46bd      	mov	sp, r7
  400836:	bc80      	pop	{r7}
  400838:	4770      	bx	lr
	...

0040083c <USART0_Handler>:
/**
 * \brief Interrupt handler for USART. Echo the bytes received and start the
 * next receive.
 */
void USART_Handler(void)
{
  40083c:	b580      	push	{r7, lr}
  40083e:	b082      	sub	sp, #8
  400840:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	/* Read USART Status. */
	ul_status = usart_get_status(BOARD_USART);
  400842:	480d      	ldr	r0, [pc, #52]	; (400878 <USART0_Handler+0x3c>)
  400844:	4b0d      	ldr	r3, [pc, #52]	; (40087c <USART0_Handler+0x40>)
  400846:	4798      	blx	r3
  400848:	6078      	str	r0, [r7, #4]

	if (ul_status & US_CSR_RXBUFF) {
  40084a:	687b      	ldr	r3, [r7, #4]
  40084c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  400850:	2b00      	cmp	r3, #0
  400852:	d00c      	beq.n	40086e <USART0_Handler+0x32>
		usart_read(BOARD_USART, &received_byte_wifi);
  400854:	490a      	ldr	r1, [pc, #40]	; (400880 <USART0_Handler+0x44>)
  400856:	4808      	ldr	r0, [pc, #32]	; (400878 <USART0_Handler+0x3c>)
  400858:	4b0a      	ldr	r3, [pc, #40]	; (400884 <USART0_Handler+0x48>)
  40085a:	4798      	blx	r3
		new_rx_wifi = true;
  40085c:	4b0a      	ldr	r3, [pc, #40]	; (400888 <USART0_Handler+0x4c>)
  40085e:	2201      	movs	r2, #1
  400860:	701a      	strb	r2, [r3, #0]
		process_incoming_byte_wifi((uint8_t)received_byte_wifi);
  400862:	4b07      	ldr	r3, [pc, #28]	; (400880 <USART0_Handler+0x44>)
  400864:	681b      	ldr	r3, [r3, #0]
  400866:	b2db      	uxtb	r3, r3
  400868:	4618      	mov	r0, r3
  40086a:	4b08      	ldr	r3, [pc, #32]	; (40088c <USART0_Handler+0x50>)
  40086c:	4798      	blx	r3
	}
}
  40086e:	bf00      	nop
  400870:	3708      	adds	r7, #8
  400872:	46bd      	mov	sp, r7
  400874:	bd80      	pop	{r7, pc}
  400876:	bf00      	nop
  400878:	40024000 	.word	0x40024000
  40087c:	00400489 	.word	0x00400489
  400880:	20000460 	.word	0x20000460
  400884:	0040054d 	.word	0x0040054d
  400888:	20000464 	.word	0x20000464
  40088c:	00400891 	.word	0x00400891

00400890 <process_incoming_byte_wifi>:

void process_incoming_byte_wifi(uint8_t in_byte) {
  400890:	b480      	push	{r7}
  400892:	b083      	sub	sp, #12
  400894:	af00      	add	r7, sp, #0
  400896:	4603      	mov	r3, r0
  400898:	71fb      	strb	r3, [r7, #7]
	input_line_wifi[input_pos_wifi++] = in_byte;
  40089a:	4b06      	ldr	r3, [pc, #24]	; (4008b4 <process_incoming_byte_wifi+0x24>)
  40089c:	681b      	ldr	r3, [r3, #0]
  40089e:	1c5a      	adds	r2, r3, #1
  4008a0:	4904      	ldr	r1, [pc, #16]	; (4008b4 <process_incoming_byte_wifi+0x24>)
  4008a2:	600a      	str	r2, [r1, #0]
  4008a4:	4904      	ldr	r1, [pc, #16]	; (4008b8 <process_incoming_byte_wifi+0x28>)
  4008a6:	79fa      	ldrb	r2, [r7, #7]
  4008a8:	54ca      	strb	r2, [r1, r3]
}
  4008aa:	bf00      	nop
  4008ac:	370c      	adds	r7, #12
  4008ae:	46bd      	mov	sp, r7
  4008b0:	bc80      	pop	{r7}
  4008b2:	4770      	bx	lr
  4008b4:	2000045c 	.word	0x2000045c
  4008b8:	200004ec 	.word	0x200004ec

004008bc <wifi_command_response_handler>:

void wifi_command_response_handler(uint32_t ul_id, uint32_t ul_mask) {
  4008bc:	b580      	push	{r7, lr}
  4008be:	b084      	sub	sp, #16
  4008c0:	af00      	add	r7, sp, #0
  4008c2:	6078      	str	r0, [r7, #4]
  4008c4:	6039      	str	r1, [r7, #0]
	process_data_wifi();
  4008c6:	4b0c      	ldr	r3, [pc, #48]	; (4008f8 <wifi_command_response_handler+0x3c>)
  4008c8:	4798      	blx	r3
	for (uint32_t jj = 0; jj < 1000; jj++) {
  4008ca:	2300      	movs	r3, #0
  4008cc:	60fb      	str	r3, [r7, #12]
  4008ce:	e007      	b.n	4008e0 <wifi_command_response_handler+0x24>
		input_line_wifi[jj] = 0;
  4008d0:	4a0a      	ldr	r2, [pc, #40]	; (4008fc <wifi_command_response_handler+0x40>)
  4008d2:	68fb      	ldr	r3, [r7, #12]
  4008d4:	4413      	add	r3, r2
  4008d6:	2200      	movs	r2, #0
  4008d8:	701a      	strb	r2, [r3, #0]
	for (uint32_t jj = 0; jj < 1000; jj++) {
  4008da:	68fb      	ldr	r3, [r7, #12]
  4008dc:	3301      	adds	r3, #1
  4008de:	60fb      	str	r3, [r7, #12]
  4008e0:	68fb      	ldr	r3, [r7, #12]
  4008e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  4008e6:	d3f3      	bcc.n	4008d0 <wifi_command_response_handler+0x14>
	}
	input_pos_wifi = 0;
  4008e8:	4b05      	ldr	r3, [pc, #20]	; (400900 <wifi_command_response_handler+0x44>)
  4008ea:	2200      	movs	r2, #0
  4008ec:	601a      	str	r2, [r3, #0]
}
  4008ee:	bf00      	nop
  4008f0:	3710      	adds	r7, #16
  4008f2:	46bd      	mov	sp, r7
  4008f4:	bd80      	pop	{r7, pc}
  4008f6:	bf00      	nop
  4008f8:	00400905 	.word	0x00400905
  4008fc:	200004ec 	.word	0x200004ec
  400900:	2000045c 	.word	0x2000045c

00400904 <process_data_wifi>:


void process_data_wifi() {
  400904:	b580      	push	{r7, lr}
  400906:	af00      	add	r7, sp, #0
	if (strstr(input_line_wifi, "SUCCESS\r\n")) {
  400908:	4905      	ldr	r1, [pc, #20]	; (400920 <process_data_wifi+0x1c>)
  40090a:	4806      	ldr	r0, [pc, #24]	; (400924 <process_data_wifi+0x20>)
  40090c:	4b06      	ldr	r3, [pc, #24]	; (400928 <process_data_wifi+0x24>)
  40090e:	4798      	blx	r3
  400910:	4603      	mov	r3, r0
  400912:	2b00      	cmp	r3, #0
  400914:	d002      	beq.n	40091c <process_data_wifi+0x18>
		data_received_flag = true;
  400916:	4b05      	ldr	r3, [pc, #20]	; (40092c <process_data_wifi+0x28>)
  400918:	2201      	movs	r2, #1
  40091a:	701a      	strb	r2, [r3, #0]
	}
}
  40091c:	bf00      	nop
  40091e:	bd80      	pop	{r7, pc}
  400920:	00402afc 	.word	0x00402afc
  400924:	200004ec 	.word	0x200004ec
  400928:	004025d5 	.word	0x004025d5
  40092c:	20000465 	.word	0x20000465

00400930 <configure_usart>:
	pio_enable_interrupt(PROVISION_BUTTON_PIO, PROVISION_BUTTON_PIN_MSK);
	
}

void configure_usart(void)
{
  400930:	b5b0      	push	{r4, r5, r7, lr}
  400932:	b086      	sub	sp, #24
  400934:	af00      	add	r7, sp, #0
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
  400936:	4919      	ldr	r1, [pc, #100]	; (40099c <configure_usart+0x6c>)
  400938:	2005      	movs	r0, #5
  40093a:	4b19      	ldr	r3, [pc, #100]	; (4009a0 <configure_usart+0x70>)
  40093c:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
  40093e:	4917      	ldr	r1, [pc, #92]	; (40099c <configure_usart+0x6c>)
  400940:	2006      	movs	r0, #6
  400942:	4b17      	ldr	r3, [pc, #92]	; (4009a0 <configure_usart+0x70>)
  400944:	4798      	blx	r3
	
	const sam_usart_opt_t usart_console_settings = {
  400946:	4b17      	ldr	r3, [pc, #92]	; (4009a4 <configure_usart+0x74>)
  400948:	463c      	mov	r4, r7
  40094a:	461d      	mov	r5, r3
  40094c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40094e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400950:	e895 0003 	ldmia.w	r5, {r0, r1}
  400954:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
  400958:	200e      	movs	r0, #14
  40095a:	4b13      	ldr	r3, [pc, #76]	; (4009a8 <configure_usart+0x78>)
  40095c:	4798      	blx	r3

	/* Configure USART in serial mode. */
	usart_init_rs232(BOARD_USART, &usart_console_settings, sysclk_get_peripheral_hz());
  40095e:	4b13      	ldr	r3, [pc, #76]	; (4009ac <configure_usart+0x7c>)
  400960:	4798      	blx	r3
  400962:	4602      	mov	r2, r0
  400964:	463b      	mov	r3, r7
  400966:	4619      	mov	r1, r3
  400968:	4811      	ldr	r0, [pc, #68]	; (4009b0 <configure_usart+0x80>)
  40096a:	4b12      	ldr	r3, [pc, #72]	; (4009b4 <configure_usart+0x84>)
  40096c:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
  40096e:	f04f 31ff 	mov.w	r1, #4294967295
  400972:	480f      	ldr	r0, [pc, #60]	; (4009b0 <configure_usart+0x80>)
  400974:	4b10      	ldr	r3, [pc, #64]	; (4009b8 <configure_usart+0x88>)
  400976:	4798      	blx	r3

	/* Enable the receiver and transmitter. */
	usart_enable_tx(BOARD_USART);
  400978:	480d      	ldr	r0, [pc, #52]	; (4009b0 <configure_usart+0x80>)
  40097a:	4b10      	ldr	r3, [pc, #64]	; (4009bc <configure_usart+0x8c>)
  40097c:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  40097e:	480c      	ldr	r0, [pc, #48]	; (4009b0 <configure_usart+0x80>)
  400980:	4b0f      	ldr	r3, [pc, #60]	; (4009c0 <configure_usart+0x90>)
  400982:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
  400984:	200e      	movs	r0, #14
  400986:	4b0f      	ldr	r3, [pc, #60]	; (4009c4 <configure_usart+0x94>)
  400988:	4798      	blx	r3
	
	usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
  40098a:	2101      	movs	r1, #1
  40098c:	4808      	ldr	r0, [pc, #32]	; (4009b0 <configure_usart+0x80>)
  40098e:	4b0e      	ldr	r3, [pc, #56]	; (4009c8 <configure_usart+0x98>)
  400990:	4798      	blx	r3
}
  400992:	bf00      	nop
  400994:	3718      	adds	r7, #24
  400996:	46bd      	mov	sp, r7
  400998:	bdb0      	pop	{r4, r5, r7, pc}
  40099a:	bf00      	nop
  40099c:	08000001 	.word	0x08000001
  4009a0:	00400f81 	.word	0x00400f81
  4009a4:	00402b08 	.word	0x00402b08
  4009a8:	00400781 	.word	0x00400781
  4009ac:	0040076d 	.word	0x0040076d
  4009b0:	40024000 	.word	0x40024000
  4009b4:	00400371 	.word	0x00400371
  4009b8:	0040046f 	.word	0x0040046f
  4009bc:	004003f5 	.word	0x004003f5
  4009c0:	00400425 	.word	0x00400425
  4009c4:	004005bd 	.word	0x004005bd
  4009c8:	00400455 	.word	0x00400455

004009cc <configure_wifi_comm_pin>:

void configure_wifi_comm_pin(void)
{
  4009cc:	b590      	push	{r4, r7, lr}
  4009ce:	b083      	sub	sp, #12
  4009d0:	af02      	add	r7, sp, #8
	/* Configure PIO clock. */
	pmc_enable_periph_clk(WIFI_COMM_ID);
  4009d2:	200b      	movs	r0, #11
  4009d4:	4b0a      	ldr	r3, [pc, #40]	; (400a00 <configure_wifi_comm_pin+0x34>)
  4009d6:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(WIFI_COMM_PIO, WIFI_COMM_ID, WIFI_COMM_PIN_NUM, WIFI_COMM_ATTR, wifi_command_response_handler);
  4009d8:	4b0a      	ldr	r3, [pc, #40]	; (400a04 <configure_wifi_comm_pin+0x38>)
  4009da:	9300      	str	r3, [sp, #0]
  4009dc:	2370      	movs	r3, #112	; 0x70
  4009de:	2240      	movs	r2, #64	; 0x40
  4009e0:	210b      	movs	r1, #11
  4009e2:	4809      	ldr	r0, [pc, #36]	; (400a08 <configure_wifi_comm_pin+0x3c>)
  4009e4:	4c09      	ldr	r4, [pc, #36]	; (400a0c <configure_wifi_comm_pin+0x40>)
  4009e6:	47a0      	blx	r4

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)WIFI_COMM_ID);
  4009e8:	200b      	movs	r0, #11
  4009ea:	4b09      	ldr	r3, [pc, #36]	; (400a10 <configure_wifi_comm_pin+0x44>)
  4009ec:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WIFI_COMM_PIO, WIFI_COMM_PIN_NUM);
  4009ee:	2140      	movs	r1, #64	; 0x40
  4009f0:	4805      	ldr	r0, [pc, #20]	; (400a08 <configure_wifi_comm_pin+0x3c>)
  4009f2:	4b08      	ldr	r3, [pc, #32]	; (400a14 <configure_wifi_comm_pin+0x48>)
  4009f4:	4798      	blx	r3
}
  4009f6:	bf00      	nop
  4009f8:	3704      	adds	r7, #4
  4009fa:	46bd      	mov	sp, r7
  4009fc:	bd90      	pop	{r4, r7, pc}
  4009fe:	bf00      	nop
  400a00:	00401ba9 	.word	0x00401ba9
  400a04:	004008bd 	.word	0x004008bd
  400a08:	400e0e00 	.word	0x400e0e00
  400a0c:	00401229 	.word	0x00401229
  400a10:	004005bd 	.word	0x004005bd
  400a14:	00400f1f 	.word	0x00400f1f

00400a18 <configure_usart_wifi>:
		}
	}
}

void configure_usart_wifi(void)
{
  400a18:	b5b0      	push	{r4, r5, r7, lr}
  400a1a:	b086      	sub	sp, #24
  400a1c:	af00      	add	r7, sp, #0
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
  400a1e:	491b      	ldr	r1, [pc, #108]	; (400a8c <configure_usart_wifi+0x74>)
  400a20:	2005      	movs	r0, #5
  400a22:	4b1b      	ldr	r3, [pc, #108]	; (400a90 <configure_usart_wifi+0x78>)
  400a24:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
  400a26:	4919      	ldr	r1, [pc, #100]	; (400a8c <configure_usart_wifi+0x74>)
  400a28:	2006      	movs	r0, #6
  400a2a:	4b19      	ldr	r3, [pc, #100]	; (400a90 <configure_usart_wifi+0x78>)
  400a2c:	4798      	blx	r3
	
	static uint32_t ul_sysclk;
	const sam_usart_opt_t wifi_usart_settings = {
  400a2e:	4b19      	ldr	r3, [pc, #100]	; (400a94 <configure_usart_wifi+0x7c>)
  400a30:	463c      	mov	r4, r7
  400a32:	461d      	mov	r5, r3
  400a34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400a38:	e895 0003 	ldmia.w	r5, {r0, r1}
  400a3c:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};
	
	/* Get system clock. */
	ul_sysclk = sysclk_get_cpu_hz();
  400a40:	4b15      	ldr	r3, [pc, #84]	; (400a98 <configure_usart_wifi+0x80>)
  400a42:	4798      	blx	r3
  400a44:	4602      	mov	r2, r0
  400a46:	4b15      	ldr	r3, [pc, #84]	; (400a9c <configure_usart_wifi+0x84>)
  400a48:	601a      	str	r2, [r3, #0]
	
	pmc_enable_periph_clk(WIFI_USART_ID);
  400a4a:	200e      	movs	r0, #14
  400a4c:	4b14      	ldr	r3, [pc, #80]	; (400aa0 <configure_usart_wifi+0x88>)
  400a4e:	4798      	blx	r3
	
	usart_init_rs232(WIFI_USART,&wifi_usart_settings,ul_sysclk);
  400a50:	4b12      	ldr	r3, [pc, #72]	; (400a9c <configure_usart_wifi+0x84>)
  400a52:	681a      	ldr	r2, [r3, #0]
  400a54:	463b      	mov	r3, r7
  400a56:	4619      	mov	r1, r3
  400a58:	4812      	ldr	r0, [pc, #72]	; (400aa4 <configure_usart_wifi+0x8c>)
  400a5a:	4b13      	ldr	r3, [pc, #76]	; (400aa8 <configure_usart_wifi+0x90>)
  400a5c:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(WIFI_USART, ALL_INTERRUPT_MASK);
  400a5e:	f04f 31ff 	mov.w	r1, #4294967295
  400a62:	4810      	ldr	r0, [pc, #64]	; (400aa4 <configure_usart_wifi+0x8c>)
  400a64:	4b11      	ldr	r3, [pc, #68]	; (400aac <configure_usart_wifi+0x94>)
  400a66:	4798      	blx	r3
	
	/* Enable TX & RX function. */
	usart_enable_tx(WIFI_USART);
  400a68:	480e      	ldr	r0, [pc, #56]	; (400aa4 <configure_usart_wifi+0x8c>)
  400a6a:	4b11      	ldr	r3, [pc, #68]	; (400ab0 <configure_usart_wifi+0x98>)
  400a6c:	4798      	blx	r3
	usart_enable_rx(WIFI_USART);
  400a6e:	480d      	ldr	r0, [pc, #52]	; (400aa4 <configure_usart_wifi+0x8c>)
  400a70:	4b10      	ldr	r3, [pc, #64]	; (400ab4 <configure_usart_wifi+0x9c>)
  400a72:	4798      	blx	r3

	usart_enable_interrupt(WIFI_USART, US_IER_RXRDY);
  400a74:	2101      	movs	r1, #1
  400a76:	480b      	ldr	r0, [pc, #44]	; (400aa4 <configure_usart_wifi+0x8c>)
  400a78:	4b0f      	ldr	r3, [pc, #60]	; (400ab8 <configure_usart_wifi+0xa0>)
  400a7a:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(WIFI_USART_IRQn);
  400a7c:	200e      	movs	r0, #14
  400a7e:	4b0f      	ldr	r3, [pc, #60]	; (400abc <configure_usart_wifi+0xa4>)
  400a80:	4798      	blx	r3
}
  400a82:	bf00      	nop
  400a84:	3718      	adds	r7, #24
  400a86:	46bd      	mov	sp, r7
  400a88:	bdb0      	pop	{r4, r5, r7, pc}
  400a8a:	bf00      	nop
  400a8c:	08000001 	.word	0x08000001
  400a90:	00400f81 	.word	0x00400f81
  400a94:	00402b08 	.word	0x00402b08
  400a98:	00400759 	.word	0x00400759
  400a9c:	20000468 	.word	0x20000468
  400aa0:	00401ba9 	.word	0x00401ba9
  400aa4:	40024000 	.word	0x40024000
  400aa8:	00400371 	.word	0x00400371
  400aac:	0040046f 	.word	0x0040046f
  400ab0:	004003f5 	.word	0x004003f5
  400ab4:	00400425 	.word	0x00400425
  400ab8:	00400455 	.word	0x00400455
  400abc:	004005bd 	.word	0x004005bd

00400ac0 <configure_spi>:

void configure_spi()
{
  400ac0:	b580      	push	{r7, lr}
  400ac2:	af00      	add	r7, sp, #0
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  400ac4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400ac8:	200c      	movs	r0, #12
  400aca:	4b10      	ldr	r3, [pc, #64]	; (400b0c <configure_spi+0x4c>)
  400acc:	4798      	blx	r3
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  400ace:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400ad2:	200d      	movs	r0, #13
  400ad4:	4b0d      	ldr	r3, [pc, #52]	; (400b0c <configure_spi+0x4c>)
  400ad6:	4798      	blx	r3
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  400ad8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400adc:	200e      	movs	r0, #14
  400ade:	4b0b      	ldr	r3, [pc, #44]	; (400b0c <configure_spi+0x4c>)
  400ae0:	4798      	blx	r3
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
  400ae2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400ae6:	200b      	movs	r0, #11
  400ae8:	4b08      	ldr	r3, [pc, #32]	; (400b0c <configure_spi+0x4c>)
  400aea:	4798      	blx	r3
	
	/* Configure SPI interrupts for slave only. */
	NVIC_DisableIRQ(SPI_IRQn);
  400aec:	2015      	movs	r0, #21
  400aee:	4b08      	ldr	r3, [pc, #32]	; (400b10 <configure_spi+0x50>)
  400af0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(SPI_IRQn);
  400af2:	2015      	movs	r0, #21
  400af4:	4b07      	ldr	r3, [pc, #28]	; (400b14 <configure_spi+0x54>)
  400af6:	4798      	blx	r3
	NVIC_SetPriority(SPI_IRQn, 0);
  400af8:	2100      	movs	r1, #0
  400afa:	2015      	movs	r0, #21
  400afc:	4b06      	ldr	r3, [pc, #24]	; (400b18 <configure_spi+0x58>)
  400afe:	4798      	blx	r3
	NVIC_EnableIRQ(SPI_IRQn);
  400b00:	2015      	movs	r0, #21
  400b02:	4b06      	ldr	r3, [pc, #24]	; (400b1c <configure_spi+0x5c>)
  400b04:	4798      	blx	r3
}
  400b06:	bf00      	nop
  400b08:	bd80      	pop	{r7, pc}
  400b0a:	bf00      	nop
  400b0c:	00400f81 	.word	0x00400f81
  400b10:	004005f5 	.word	0x004005f5
  400b14:	00400639 	.word	0x00400639
  400b18:	00400675 	.word	0x00400675
  400b1c:	004005bd 	.word	0x004005bd

00400b20 <spi_peripheral_initialize>:

void spi_peripheral_initialize(void)
{
  400b20:	b580      	push	{r7, lr}
  400b22:	af00      	add	r7, sp, #0
	spi_enable_clock(SPI);
  400b24:	4815      	ldr	r0, [pc, #84]	; (400b7c <spi_peripheral_initialize+0x5c>)
  400b26:	4b16      	ldr	r3, [pc, #88]	; (400b80 <spi_peripheral_initialize+0x60>)
  400b28:	4798      	blx	r3
	spi_disable(SPI);
  400b2a:	4814      	ldr	r0, [pc, #80]	; (400b7c <spi_peripheral_initialize+0x5c>)
  400b2c:	4b15      	ldr	r3, [pc, #84]	; (400b84 <spi_peripheral_initialize+0x64>)
  400b2e:	4798      	blx	r3
	spi_reset(SPI);
  400b30:	4812      	ldr	r0, [pc, #72]	; (400b7c <spi_peripheral_initialize+0x5c>)
  400b32:	4b15      	ldr	r3, [pc, #84]	; (400b88 <spi_peripheral_initialize+0x68>)
  400b34:	4798      	blx	r3
	spi_set_slave_mode(SPI);
  400b36:	4811      	ldr	r0, [pc, #68]	; (400b7c <spi_peripheral_initialize+0x5c>)
  400b38:	4b14      	ldr	r3, [pc, #80]	; (400b8c <spi_peripheral_initialize+0x6c>)
  400b3a:	4798      	blx	r3
	spi_disable_mode_fault_detect(SPI);
  400b3c:	480f      	ldr	r0, [pc, #60]	; (400b7c <spi_peripheral_initialize+0x5c>)
  400b3e:	4b14      	ldr	r3, [pc, #80]	; (400b90 <spi_peripheral_initialize+0x70>)
  400b40:	4798      	blx	r3
	spi_set_peripheral_chip_select_value(SPI, SPI_CHIP_PCS);
  400b42:	210e      	movs	r1, #14
  400b44:	480d      	ldr	r0, [pc, #52]	; (400b7c <spi_peripheral_initialize+0x5c>)
  400b46:	4b13      	ldr	r3, [pc, #76]	; (400b94 <spi_peripheral_initialize+0x74>)
  400b48:	4798      	blx	r3
	spi_set_clock_polarity(SPI, SPI_CHIP_SEL, SPI_CLK_POLARITY);
  400b4a:	2200      	movs	r2, #0
  400b4c:	2100      	movs	r1, #0
  400b4e:	480b      	ldr	r0, [pc, #44]	; (400b7c <spi_peripheral_initialize+0x5c>)
  400b50:	4b11      	ldr	r3, [pc, #68]	; (400b98 <spi_peripheral_initialize+0x78>)
  400b52:	4798      	blx	r3
	spi_set_clock_phase(SPI, SPI_CHIP_SEL, SPI_CLK_PHASE);
  400b54:	2200      	movs	r2, #0
  400b56:	2100      	movs	r1, #0
  400b58:	4808      	ldr	r0, [pc, #32]	; (400b7c <spi_peripheral_initialize+0x5c>)
  400b5a:	4b10      	ldr	r3, [pc, #64]	; (400b9c <spi_peripheral_initialize+0x7c>)
  400b5c:	4798      	blx	r3
	spi_set_bits_per_transfer(SPI, SPI_CHIP_SEL, SPI_CSR_BITS_8_BIT);
  400b5e:	2200      	movs	r2, #0
  400b60:	2100      	movs	r1, #0
  400b62:	4806      	ldr	r0, [pc, #24]	; (400b7c <spi_peripheral_initialize+0x5c>)
  400b64:	4b0e      	ldr	r3, [pc, #56]	; (400ba0 <spi_peripheral_initialize+0x80>)
  400b66:	4798      	blx	r3
	spi_enable_interrupt(SPI, SPI_IER_RDRF);
  400b68:	2101      	movs	r1, #1
  400b6a:	4804      	ldr	r0, [pc, #16]	; (400b7c <spi_peripheral_initialize+0x5c>)
  400b6c:	4b0d      	ldr	r3, [pc, #52]	; (400ba4 <spi_peripheral_initialize+0x84>)
  400b6e:	4798      	blx	r3
	spi_enable(SPI);
  400b70:	4802      	ldr	r0, [pc, #8]	; (400b7c <spi_peripheral_initialize+0x5c>)
  400b72:	4b0d      	ldr	r3, [pc, #52]	; (400ba8 <spi_peripheral_initialize+0x88>)
  400b74:	4798      	blx	r3
}
  400b76:	bf00      	nop
  400b78:	bd80      	pop	{r7, pc}
  400b7a:	bf00      	nop
  400b7c:	40008000 	.word	0x40008000
  400b80:	00400155 	.word	0x00400155
  400b84:	004007cd 	.word	0x004007cd
  400b88:	0040079d 	.word	0x0040079d
  400b8c:	004007e5 	.word	0x004007e5
  400b90:	00400803 	.word	0x00400803
  400b94:	00400171 	.word	0x00400171
  400b98:	004001a3 	.word	0x004001a3
  400b9c:	004001f1 	.word	0x004001f1
  400ba0:	0040023f 	.word	0x0040023f
  400ba4:	00400821 	.word	0x00400821
  400ba8:	004007b5 	.word	0x004007b5

00400bac <write_wifi_command>:
	transfer_len = 100;
	transfer_index = 0;
}

void write_wifi_command(char* comm, uint8_t cnt)
{
  400bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400bb0:	b085      	sub	sp, #20
  400bb2:	af00      	add	r7, sp, #0
  400bb4:	60f8      	str	r0, [r7, #12]
  400bb6:	460b      	mov	r3, r1
  400bb8:	72fb      	strb	r3, [r7, #11]
	data_received_flag = false;
  400bba:	4b30      	ldr	r3, [pc, #192]	; (400c7c <write_wifi_command+0xd0>)
  400bbc:	2200      	movs	r2, #0
  400bbe:	701a      	strb	r2, [r3, #0]
	counts = 0;
  400bc0:	4b2f      	ldr	r3, [pc, #188]	; (400c80 <write_wifi_command+0xd4>)
  400bc2:	2200      	movs	r2, #0
  400bc4:	701a      	strb	r2, [r3, #0]
	while ((counts < cnt) && (!data_received_flag)){
  400bc6:	e048      	b.n	400c5a <write_wifi_command+0xae>
		usart_write_line(WIFI_USART, comm);
  400bc8:	68f9      	ldr	r1, [r7, #12]
  400bca:	482e      	ldr	r0, [pc, #184]	; (400c84 <write_wifi_command+0xd8>)
  400bcc:	4b2e      	ldr	r3, [pc, #184]	; (400c88 <write_wifi_command+0xdc>)
  400bce:	4798      	blx	r3
		delay_s(1);
  400bd0:	4b2e      	ldr	r3, [pc, #184]	; (400c8c <write_wifi_command+0xe0>)
  400bd2:	4798      	blx	r3
  400bd4:	4603      	mov	r3, r0
  400bd6:	4619      	mov	r1, r3
  400bd8:	f04f 0200 	mov.w	r2, #0
  400bdc:	460b      	mov	r3, r1
  400bde:	4614      	mov	r4, r2
  400be0:	0160      	lsls	r0, r4, #5
  400be2:	6078      	str	r0, [r7, #4]
  400be4:	6878      	ldr	r0, [r7, #4]
  400be6:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
  400bea:	6078      	str	r0, [r7, #4]
  400bec:	015b      	lsls	r3, r3, #5
  400bee:	603b      	str	r3, [r7, #0]
  400bf0:	e9d7 3400 	ldrd	r3, r4, [r7]
  400bf4:	1a5b      	subs	r3, r3, r1
  400bf6:	eb64 0402 	sbc.w	r4, r4, r2
  400bfa:	ea4f 0984 	mov.w	r9, r4, lsl #2
  400bfe:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
  400c02:	ea4f 0883 	mov.w	r8, r3, lsl #2
  400c06:	4643      	mov	r3, r8
  400c08:	464c      	mov	r4, r9
  400c0a:	185b      	adds	r3, r3, r1
  400c0c:	eb44 0402 	adc.w	r4, r4, r2
  400c10:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
  400c14:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
  400c18:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
  400c1c:	4653      	mov	r3, sl
  400c1e:	465c      	mov	r4, fp
  400c20:	4619      	mov	r1, r3
  400c22:	4622      	mov	r2, r4
  400c24:	f243 63af 	movw	r3, #13999	; 0x36af
  400c28:	f04f 0400 	mov.w	r4, #0
  400c2c:	18cd      	adds	r5, r1, r3
  400c2e:	eb42 0604 	adc.w	r6, r2, r4
  400c32:	4628      	mov	r0, r5
  400c34:	4631      	mov	r1, r6
  400c36:	4c16      	ldr	r4, [pc, #88]	; (400c90 <write_wifi_command+0xe4>)
  400c38:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400c3c:	f04f 0300 	mov.w	r3, #0
  400c40:	47a0      	blx	r4
  400c42:	4603      	mov	r3, r0
  400c44:	460c      	mov	r4, r1
  400c46:	4618      	mov	r0, r3
  400c48:	4b12      	ldr	r3, [pc, #72]	; (400c94 <write_wifi_command+0xe8>)
  400c4a:	4798      	blx	r3
		counts = counts + 1;
  400c4c:	4b0c      	ldr	r3, [pc, #48]	; (400c80 <write_wifi_command+0xd4>)
  400c4e:	781b      	ldrb	r3, [r3, #0]
  400c50:	b2db      	uxtb	r3, r3
  400c52:	3301      	adds	r3, #1
  400c54:	b2da      	uxtb	r2, r3
  400c56:	4b0a      	ldr	r3, [pc, #40]	; (400c80 <write_wifi_command+0xd4>)
  400c58:	701a      	strb	r2, [r3, #0]
	while ((counts < cnt) && (!data_received_flag)){
  400c5a:	4b09      	ldr	r3, [pc, #36]	; (400c80 <write_wifi_command+0xd4>)
  400c5c:	781b      	ldrb	r3, [r3, #0]
  400c5e:	b2db      	uxtb	r3, r3
  400c60:	7afa      	ldrb	r2, [r7, #11]
  400c62:	429a      	cmp	r2, r3
  400c64:	d904      	bls.n	400c70 <write_wifi_command+0xc4>
  400c66:	4b05      	ldr	r3, [pc, #20]	; (400c7c <write_wifi_command+0xd0>)
  400c68:	781b      	ldrb	r3, [r3, #0]
  400c6a:	b2db      	uxtb	r3, r3
  400c6c:	2b00      	cmp	r3, #0
  400c6e:	d0ab      	beq.n	400bc8 <write_wifi_command+0x1c>
	}
		
}
  400c70:	bf00      	nop
  400c72:	3714      	adds	r7, #20
  400c74:	46bd      	mov	sp, r7
  400c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400c7a:	bf00      	nop
  400c7c:	20000465 	.word	0x20000465
  400c80:	200008e4 	.word	0x200008e4
  400c84:	40024000 	.word	0x40024000
  400c88:	0040051d 	.word	0x0040051d
  400c8c:	00400759 	.word	0x00400759
  400c90:	00401fc5 	.word	0x00401fc5
  400c94:	20000001 	.word	0x20000001

00400c98 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  400c98:	b480      	push	{r7}
  400c9a:	b085      	sub	sp, #20
  400c9c:	af00      	add	r7, sp, #0
  400c9e:	60f8      	str	r0, [r7, #12]
  400ca0:	60b9      	str	r1, [r7, #8]
  400ca2:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400ca4:	687b      	ldr	r3, [r7, #4]
  400ca6:	2b00      	cmp	r3, #0
  400ca8:	d003      	beq.n	400cb2 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  400caa:	68fb      	ldr	r3, [r7, #12]
  400cac:	68ba      	ldr	r2, [r7, #8]
  400cae:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  400cb0:	e002      	b.n	400cb8 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  400cb2:	68fb      	ldr	r3, [r7, #12]
  400cb4:	68ba      	ldr	r2, [r7, #8]
  400cb6:	661a      	str	r2, [r3, #96]	; 0x60
}
  400cb8:	bf00      	nop
  400cba:	3714      	adds	r7, #20
  400cbc:	46bd      	mov	sp, r7
  400cbe:	bc80      	pop	{r7}
  400cc0:	4770      	bx	lr

00400cc2 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400cc2:	b480      	push	{r7}
  400cc4:	b087      	sub	sp, #28
  400cc6:	af00      	add	r7, sp, #0
  400cc8:	60f8      	str	r0, [r7, #12]
  400cca:	60b9      	str	r1, [r7, #8]
  400ccc:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400cce:	68fb      	ldr	r3, [r7, #12]
  400cd0:	687a      	ldr	r2, [r7, #4]
  400cd2:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400cd4:	68bb      	ldr	r3, [r7, #8]
  400cd6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400cda:	d04a      	beq.n	400d72 <pio_set_peripheral+0xb0>
  400cdc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400ce0:	d808      	bhi.n	400cf4 <pio_set_peripheral+0x32>
  400ce2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400ce6:	d016      	beq.n	400d16 <pio_set_peripheral+0x54>
  400ce8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400cec:	d02c      	beq.n	400d48 <pio_set_peripheral+0x86>
  400cee:	2b00      	cmp	r3, #0
  400cf0:	d069      	beq.n	400dc6 <pio_set_peripheral+0x104>
  400cf2:	e064      	b.n	400dbe <pio_set_peripheral+0xfc>
  400cf4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400cf8:	d065      	beq.n	400dc6 <pio_set_peripheral+0x104>
  400cfa:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400cfe:	d803      	bhi.n	400d08 <pio_set_peripheral+0x46>
  400d00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400d04:	d04a      	beq.n	400d9c <pio_set_peripheral+0xda>
  400d06:	e05a      	b.n	400dbe <pio_set_peripheral+0xfc>
  400d08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400d0c:	d05b      	beq.n	400dc6 <pio_set_peripheral+0x104>
  400d0e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400d12:	d058      	beq.n	400dc6 <pio_set_peripheral+0x104>
  400d14:	e053      	b.n	400dbe <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400d16:	68fb      	ldr	r3, [r7, #12]
  400d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400d1a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400d1c:	68fb      	ldr	r3, [r7, #12]
  400d1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400d20:	687b      	ldr	r3, [r7, #4]
  400d22:	43d9      	mvns	r1, r3
  400d24:	697b      	ldr	r3, [r7, #20]
  400d26:	400b      	ands	r3, r1
  400d28:	401a      	ands	r2, r3
  400d2a:	68fb      	ldr	r3, [r7, #12]
  400d2c:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400d2e:	68fb      	ldr	r3, [r7, #12]
  400d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400d32:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400d34:	68fb      	ldr	r3, [r7, #12]
  400d36:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400d38:	687b      	ldr	r3, [r7, #4]
  400d3a:	43d9      	mvns	r1, r3
  400d3c:	697b      	ldr	r3, [r7, #20]
  400d3e:	400b      	ands	r3, r1
  400d40:	401a      	ands	r2, r3
  400d42:	68fb      	ldr	r3, [r7, #12]
  400d44:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400d46:	e03a      	b.n	400dbe <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400d48:	68fb      	ldr	r3, [r7, #12]
  400d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400d4c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400d4e:	687a      	ldr	r2, [r7, #4]
  400d50:	697b      	ldr	r3, [r7, #20]
  400d52:	431a      	orrs	r2, r3
  400d54:	68fb      	ldr	r3, [r7, #12]
  400d56:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400d58:	68fb      	ldr	r3, [r7, #12]
  400d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400d5c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400d5e:	68fb      	ldr	r3, [r7, #12]
  400d60:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400d62:	687b      	ldr	r3, [r7, #4]
  400d64:	43d9      	mvns	r1, r3
  400d66:	697b      	ldr	r3, [r7, #20]
  400d68:	400b      	ands	r3, r1
  400d6a:	401a      	ands	r2, r3
  400d6c:	68fb      	ldr	r3, [r7, #12]
  400d6e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400d70:	e025      	b.n	400dbe <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400d72:	68fb      	ldr	r3, [r7, #12]
  400d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400d76:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400d78:	68fb      	ldr	r3, [r7, #12]
  400d7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400d7c:	687b      	ldr	r3, [r7, #4]
  400d7e:	43d9      	mvns	r1, r3
  400d80:	697b      	ldr	r3, [r7, #20]
  400d82:	400b      	ands	r3, r1
  400d84:	401a      	ands	r2, r3
  400d86:	68fb      	ldr	r3, [r7, #12]
  400d88:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400d8a:	68fb      	ldr	r3, [r7, #12]
  400d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400d8e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400d90:	687a      	ldr	r2, [r7, #4]
  400d92:	697b      	ldr	r3, [r7, #20]
  400d94:	431a      	orrs	r2, r3
  400d96:	68fb      	ldr	r3, [r7, #12]
  400d98:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400d9a:	e010      	b.n	400dbe <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400d9c:	68fb      	ldr	r3, [r7, #12]
  400d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400da0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400da2:	687a      	ldr	r2, [r7, #4]
  400da4:	697b      	ldr	r3, [r7, #20]
  400da6:	431a      	orrs	r2, r3
  400da8:	68fb      	ldr	r3, [r7, #12]
  400daa:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400dac:	68fb      	ldr	r3, [r7, #12]
  400dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400db0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400db2:	687a      	ldr	r2, [r7, #4]
  400db4:	697b      	ldr	r3, [r7, #20]
  400db6:	431a      	orrs	r2, r3
  400db8:	68fb      	ldr	r3, [r7, #12]
  400dba:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400dbc:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400dbe:	68fb      	ldr	r3, [r7, #12]
  400dc0:	687a      	ldr	r2, [r7, #4]
  400dc2:	605a      	str	r2, [r3, #4]
  400dc4:	e000      	b.n	400dc8 <pio_set_peripheral+0x106>
		return;
  400dc6:	bf00      	nop
}
  400dc8:	371c      	adds	r7, #28
  400dca:	46bd      	mov	sp, r7
  400dcc:	bc80      	pop	{r7}
  400dce:	4770      	bx	lr

00400dd0 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  400dd0:	b580      	push	{r7, lr}
  400dd2:	b084      	sub	sp, #16
  400dd4:	af00      	add	r7, sp, #0
  400dd6:	60f8      	str	r0, [r7, #12]
  400dd8:	60b9      	str	r1, [r7, #8]
  400dda:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  400ddc:	68b9      	ldr	r1, [r7, #8]
  400dde:	68f8      	ldr	r0, [r7, #12]
  400de0:	4b19      	ldr	r3, [pc, #100]	; (400e48 <pio_set_input+0x78>)
  400de2:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  400de4:	687b      	ldr	r3, [r7, #4]
  400de6:	f003 0301 	and.w	r3, r3, #1
  400dea:	461a      	mov	r2, r3
  400dec:	68b9      	ldr	r1, [r7, #8]
  400dee:	68f8      	ldr	r0, [r7, #12]
  400df0:	4b16      	ldr	r3, [pc, #88]	; (400e4c <pio_set_input+0x7c>)
  400df2:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400df4:	687b      	ldr	r3, [r7, #4]
  400df6:	f003 030a 	and.w	r3, r3, #10
  400dfa:	2b00      	cmp	r3, #0
  400dfc:	d003      	beq.n	400e06 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  400dfe:	68fb      	ldr	r3, [r7, #12]
  400e00:	68ba      	ldr	r2, [r7, #8]
  400e02:	621a      	str	r2, [r3, #32]
  400e04:	e002      	b.n	400e0c <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400e06:	68fb      	ldr	r3, [r7, #12]
  400e08:	68ba      	ldr	r2, [r7, #8]
  400e0a:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400e0c:	687b      	ldr	r3, [r7, #4]
  400e0e:	f003 0302 	and.w	r3, r3, #2
  400e12:	2b00      	cmp	r3, #0
  400e14:	d004      	beq.n	400e20 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  400e16:	68fb      	ldr	r3, [r7, #12]
  400e18:	68ba      	ldr	r2, [r7, #8]
  400e1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  400e1e:	e008      	b.n	400e32 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400e20:	687b      	ldr	r3, [r7, #4]
  400e22:	f003 0308 	and.w	r3, r3, #8
  400e26:	2b00      	cmp	r3, #0
  400e28:	d003      	beq.n	400e32 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  400e2a:	68fb      	ldr	r3, [r7, #12]
  400e2c:	68ba      	ldr	r2, [r7, #8]
  400e2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400e32:	68fb      	ldr	r3, [r7, #12]
  400e34:	68ba      	ldr	r2, [r7, #8]
  400e36:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  400e38:	68fb      	ldr	r3, [r7, #12]
  400e3a:	68ba      	ldr	r2, [r7, #8]
  400e3c:	601a      	str	r2, [r3, #0]
}
  400e3e:	bf00      	nop
  400e40:	3710      	adds	r7, #16
  400e42:	46bd      	mov	sp, r7
  400e44:	bd80      	pop	{r7, pc}
  400e46:	bf00      	nop
  400e48:	00400f39 	.word	0x00400f39
  400e4c:	00400c99 	.word	0x00400c99

00400e50 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400e50:	b580      	push	{r7, lr}
  400e52:	b084      	sub	sp, #16
  400e54:	af00      	add	r7, sp, #0
  400e56:	60f8      	str	r0, [r7, #12]
  400e58:	60b9      	str	r1, [r7, #8]
  400e5a:	607a      	str	r2, [r7, #4]
  400e5c:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  400e5e:	68b9      	ldr	r1, [r7, #8]
  400e60:	68f8      	ldr	r0, [r7, #12]
  400e62:	4b12      	ldr	r3, [pc, #72]	; (400eac <pio_set_output+0x5c>)
  400e64:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  400e66:	69ba      	ldr	r2, [r7, #24]
  400e68:	68b9      	ldr	r1, [r7, #8]
  400e6a:	68f8      	ldr	r0, [r7, #12]
  400e6c:	4b10      	ldr	r3, [pc, #64]	; (400eb0 <pio_set_output+0x60>)
  400e6e:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400e70:	683b      	ldr	r3, [r7, #0]
  400e72:	2b00      	cmp	r3, #0
  400e74:	d003      	beq.n	400e7e <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  400e76:	68fb      	ldr	r3, [r7, #12]
  400e78:	68ba      	ldr	r2, [r7, #8]
  400e7a:	651a      	str	r2, [r3, #80]	; 0x50
  400e7c:	e002      	b.n	400e84 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400e7e:	68fb      	ldr	r3, [r7, #12]
  400e80:	68ba      	ldr	r2, [r7, #8]
  400e82:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400e84:	687b      	ldr	r3, [r7, #4]
  400e86:	2b00      	cmp	r3, #0
  400e88:	d003      	beq.n	400e92 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  400e8a:	68fb      	ldr	r3, [r7, #12]
  400e8c:	68ba      	ldr	r2, [r7, #8]
  400e8e:	631a      	str	r2, [r3, #48]	; 0x30
  400e90:	e002      	b.n	400e98 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400e92:	68fb      	ldr	r3, [r7, #12]
  400e94:	68ba      	ldr	r2, [r7, #8]
  400e96:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400e98:	68fb      	ldr	r3, [r7, #12]
  400e9a:	68ba      	ldr	r2, [r7, #8]
  400e9c:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  400e9e:	68fb      	ldr	r3, [r7, #12]
  400ea0:	68ba      	ldr	r2, [r7, #8]
  400ea2:	601a      	str	r2, [r3, #0]
}
  400ea4:	bf00      	nop
  400ea6:	3710      	adds	r7, #16
  400ea8:	46bd      	mov	sp, r7
  400eaa:	bd80      	pop	{r7, pc}
  400eac:	00400f39 	.word	0x00400f39
  400eb0:	00400c99 	.word	0x00400c99

00400eb4 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  400eb4:	b480      	push	{r7}
  400eb6:	b085      	sub	sp, #20
  400eb8:	af00      	add	r7, sp, #0
  400eba:	60f8      	str	r0, [r7, #12]
  400ebc:	60b9      	str	r1, [r7, #8]
  400ebe:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  400ec0:	687b      	ldr	r3, [r7, #4]
  400ec2:	f003 0310 	and.w	r3, r3, #16
  400ec6:	2b00      	cmp	r3, #0
  400ec8:	d020      	beq.n	400f0c <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  400eca:	68fb      	ldr	r3, [r7, #12]
  400ecc:	68ba      	ldr	r2, [r7, #8]
  400ece:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400ed2:	687b      	ldr	r3, [r7, #4]
  400ed4:	f003 0320 	and.w	r3, r3, #32
  400ed8:	2b00      	cmp	r3, #0
  400eda:	d004      	beq.n	400ee6 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  400edc:	68fb      	ldr	r3, [r7, #12]
  400ede:	68ba      	ldr	r2, [r7, #8]
  400ee0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400ee4:	e003      	b.n	400eee <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  400ee6:	68fb      	ldr	r3, [r7, #12]
  400ee8:	68ba      	ldr	r2, [r7, #8]
  400eea:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  400eee:	687b      	ldr	r3, [r7, #4]
  400ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  400ef4:	2b00      	cmp	r3, #0
  400ef6:	d004      	beq.n	400f02 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  400ef8:	68fb      	ldr	r3, [r7, #12]
  400efa:	68ba      	ldr	r2, [r7, #8]
  400efc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  400f00:	e008      	b.n	400f14 <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  400f02:	68fb      	ldr	r3, [r7, #12]
  400f04:	68ba      	ldr	r2, [r7, #8]
  400f06:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  400f0a:	e003      	b.n	400f14 <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  400f0c:	68fb      	ldr	r3, [r7, #12]
  400f0e:	68ba      	ldr	r2, [r7, #8]
  400f10:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  400f14:	bf00      	nop
  400f16:	3714      	adds	r7, #20
  400f18:	46bd      	mov	sp, r7
  400f1a:	bc80      	pop	{r7}
  400f1c:	4770      	bx	lr

00400f1e <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400f1e:	b480      	push	{r7}
  400f20:	b083      	sub	sp, #12
  400f22:	af00      	add	r7, sp, #0
  400f24:	6078      	str	r0, [r7, #4]
  400f26:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  400f28:	687b      	ldr	r3, [r7, #4]
  400f2a:	683a      	ldr	r2, [r7, #0]
  400f2c:	641a      	str	r2, [r3, #64]	; 0x40
}
  400f2e:	bf00      	nop
  400f30:	370c      	adds	r7, #12
  400f32:	46bd      	mov	sp, r7
  400f34:	bc80      	pop	{r7}
  400f36:	4770      	bx	lr

00400f38 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400f38:	b480      	push	{r7}
  400f3a:	b083      	sub	sp, #12
  400f3c:	af00      	add	r7, sp, #0
  400f3e:	6078      	str	r0, [r7, #4]
  400f40:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  400f42:	687b      	ldr	r3, [r7, #4]
  400f44:	683a      	ldr	r2, [r7, #0]
  400f46:	645a      	str	r2, [r3, #68]	; 0x44
}
  400f48:	bf00      	nop
  400f4a:	370c      	adds	r7, #12
  400f4c:	46bd      	mov	sp, r7
  400f4e:	bc80      	pop	{r7}
  400f50:	4770      	bx	lr

00400f52 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  400f52:	b480      	push	{r7}
  400f54:	b083      	sub	sp, #12
  400f56:	af00      	add	r7, sp, #0
  400f58:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  400f5a:	687b      	ldr	r3, [r7, #4]
  400f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  400f5e:	4618      	mov	r0, r3
  400f60:	370c      	adds	r7, #12
  400f62:	46bd      	mov	sp, r7
  400f64:	bc80      	pop	{r7}
  400f66:	4770      	bx	lr

00400f68 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  400f68:	b480      	push	{r7}
  400f6a:	b083      	sub	sp, #12
  400f6c:	af00      	add	r7, sp, #0
  400f6e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  400f70:	687b      	ldr	r3, [r7, #4]
  400f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  400f74:	4618      	mov	r0, r3
  400f76:	370c      	adds	r7, #12
  400f78:	46bd      	mov	sp, r7
  400f7a:	bc80      	pop	{r7}
  400f7c:	4770      	bx	lr
	...

00400f80 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400f80:	b590      	push	{r4, r7, lr}
  400f82:	b087      	sub	sp, #28
  400f84:	af02      	add	r7, sp, #8
  400f86:	6078      	str	r0, [r7, #4]
  400f88:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  400f8a:	6878      	ldr	r0, [r7, #4]
  400f8c:	4b63      	ldr	r3, [pc, #396]	; (40111c <pio_configure_pin+0x19c>)
  400f8e:	4798      	blx	r3
  400f90:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400f92:	683b      	ldr	r3, [r7, #0]
  400f94:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  400f98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400f9c:	d067      	beq.n	40106e <pio_configure_pin+0xee>
  400f9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400fa2:	d809      	bhi.n	400fb8 <pio_configure_pin+0x38>
  400fa4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400fa8:	d02b      	beq.n	401002 <pio_configure_pin+0x82>
  400faa:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400fae:	d043      	beq.n	401038 <pio_configure_pin+0xb8>
  400fb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400fb4:	d00a      	beq.n	400fcc <pio_configure_pin+0x4c>
  400fb6:	e0a9      	b.n	40110c <pio_configure_pin+0x18c>
  400fb8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400fbc:	d07e      	beq.n	4010bc <pio_configure_pin+0x13c>
  400fbe:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400fc2:	d07b      	beq.n	4010bc <pio_configure_pin+0x13c>
  400fc4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400fc8:	d06c      	beq.n	4010a4 <pio_configure_pin+0x124>
  400fca:	e09f      	b.n	40110c <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400fcc:	687b      	ldr	r3, [r7, #4]
  400fce:	f003 031f 	and.w	r3, r3, #31
  400fd2:	2201      	movs	r2, #1
  400fd4:	fa02 f303 	lsl.w	r3, r2, r3
  400fd8:	461a      	mov	r2, r3
  400fda:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400fde:	68f8      	ldr	r0, [r7, #12]
  400fe0:	4b4f      	ldr	r3, [pc, #316]	; (401120 <pio_configure_pin+0x1a0>)
  400fe2:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  400fe4:	687b      	ldr	r3, [r7, #4]
  400fe6:	f003 031f 	and.w	r3, r3, #31
  400fea:	2201      	movs	r2, #1
  400fec:	fa02 f303 	lsl.w	r3, r2, r3
  400ff0:	4619      	mov	r1, r3
  400ff2:	683b      	ldr	r3, [r7, #0]
  400ff4:	f003 0301 	and.w	r3, r3, #1
  400ff8:	461a      	mov	r2, r3
  400ffa:	68f8      	ldr	r0, [r7, #12]
  400ffc:	4b49      	ldr	r3, [pc, #292]	; (401124 <pio_configure_pin+0x1a4>)
  400ffe:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401000:	e086      	b.n	401110 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401002:	687b      	ldr	r3, [r7, #4]
  401004:	f003 031f 	and.w	r3, r3, #31
  401008:	2201      	movs	r2, #1
  40100a:	fa02 f303 	lsl.w	r3, r2, r3
  40100e:	461a      	mov	r2, r3
  401010:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401014:	68f8      	ldr	r0, [r7, #12]
  401016:	4b42      	ldr	r3, [pc, #264]	; (401120 <pio_configure_pin+0x1a0>)
  401018:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40101a:	687b      	ldr	r3, [r7, #4]
  40101c:	f003 031f 	and.w	r3, r3, #31
  401020:	2201      	movs	r2, #1
  401022:	fa02 f303 	lsl.w	r3, r2, r3
  401026:	4619      	mov	r1, r3
  401028:	683b      	ldr	r3, [r7, #0]
  40102a:	f003 0301 	and.w	r3, r3, #1
  40102e:	461a      	mov	r2, r3
  401030:	68f8      	ldr	r0, [r7, #12]
  401032:	4b3c      	ldr	r3, [pc, #240]	; (401124 <pio_configure_pin+0x1a4>)
  401034:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401036:	e06b      	b.n	401110 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401038:	687b      	ldr	r3, [r7, #4]
  40103a:	f003 031f 	and.w	r3, r3, #31
  40103e:	2201      	movs	r2, #1
  401040:	fa02 f303 	lsl.w	r3, r2, r3
  401044:	461a      	mov	r2, r3
  401046:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40104a:	68f8      	ldr	r0, [r7, #12]
  40104c:	4b34      	ldr	r3, [pc, #208]	; (401120 <pio_configure_pin+0x1a0>)
  40104e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401050:	687b      	ldr	r3, [r7, #4]
  401052:	f003 031f 	and.w	r3, r3, #31
  401056:	2201      	movs	r2, #1
  401058:	fa02 f303 	lsl.w	r3, r2, r3
  40105c:	4619      	mov	r1, r3
  40105e:	683b      	ldr	r3, [r7, #0]
  401060:	f003 0301 	and.w	r3, r3, #1
  401064:	461a      	mov	r2, r3
  401066:	68f8      	ldr	r0, [r7, #12]
  401068:	4b2e      	ldr	r3, [pc, #184]	; (401124 <pio_configure_pin+0x1a4>)
  40106a:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40106c:	e050      	b.n	401110 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  40106e:	687b      	ldr	r3, [r7, #4]
  401070:	f003 031f 	and.w	r3, r3, #31
  401074:	2201      	movs	r2, #1
  401076:	fa02 f303 	lsl.w	r3, r2, r3
  40107a:	461a      	mov	r2, r3
  40107c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401080:	68f8      	ldr	r0, [r7, #12]
  401082:	4b27      	ldr	r3, [pc, #156]	; (401120 <pio_configure_pin+0x1a0>)
  401084:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401086:	687b      	ldr	r3, [r7, #4]
  401088:	f003 031f 	and.w	r3, r3, #31
  40108c:	2201      	movs	r2, #1
  40108e:	fa02 f303 	lsl.w	r3, r2, r3
  401092:	4619      	mov	r1, r3
  401094:	683b      	ldr	r3, [r7, #0]
  401096:	f003 0301 	and.w	r3, r3, #1
  40109a:	461a      	mov	r2, r3
  40109c:	68f8      	ldr	r0, [r7, #12]
  40109e:	4b21      	ldr	r3, [pc, #132]	; (401124 <pio_configure_pin+0x1a4>)
  4010a0:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4010a2:	e035      	b.n	401110 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4010a4:	687b      	ldr	r3, [r7, #4]
  4010a6:	f003 031f 	and.w	r3, r3, #31
  4010aa:	2201      	movs	r2, #1
  4010ac:	fa02 f303 	lsl.w	r3, r2, r3
  4010b0:	683a      	ldr	r2, [r7, #0]
  4010b2:	4619      	mov	r1, r3
  4010b4:	68f8      	ldr	r0, [r7, #12]
  4010b6:	4b1c      	ldr	r3, [pc, #112]	; (401128 <pio_configure_pin+0x1a8>)
  4010b8:	4798      	blx	r3
		break;
  4010ba:	e029      	b.n	401110 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4010bc:	687b      	ldr	r3, [r7, #4]
  4010be:	f003 031f 	and.w	r3, r3, #31
  4010c2:	2201      	movs	r2, #1
  4010c4:	fa02 f303 	lsl.w	r3, r2, r3
  4010c8:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4010ca:	683b      	ldr	r3, [r7, #0]
  4010cc:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4010d0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4010d4:	bf0c      	ite	eq
  4010d6:	2301      	moveq	r3, #1
  4010d8:	2300      	movne	r3, #0
  4010da:	b2db      	uxtb	r3, r3
  4010dc:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  4010de:	683b      	ldr	r3, [r7, #0]
  4010e0:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4010e4:	2b00      	cmp	r3, #0
  4010e6:	bf14      	ite	ne
  4010e8:	2301      	movne	r3, #1
  4010ea:	2300      	moveq	r3, #0
  4010ec:	b2db      	uxtb	r3, r3
  4010ee:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  4010f0:	683b      	ldr	r3, [r7, #0]
  4010f2:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4010f6:	2b00      	cmp	r3, #0
  4010f8:	bf14      	ite	ne
  4010fa:	2301      	movne	r3, #1
  4010fc:	2300      	moveq	r3, #0
  4010fe:	b2db      	uxtb	r3, r3
  401100:	9300      	str	r3, [sp, #0]
  401102:	4603      	mov	r3, r0
  401104:	68f8      	ldr	r0, [r7, #12]
  401106:	4c09      	ldr	r4, [pc, #36]	; (40112c <pio_configure_pin+0x1ac>)
  401108:	47a0      	blx	r4
		break;
  40110a:	e001      	b.n	401110 <pio_configure_pin+0x190>

	default:
		return 0;
  40110c:	2300      	movs	r3, #0
  40110e:	e000      	b.n	401112 <pio_configure_pin+0x192>
	}

	return 1;
  401110:	2301      	movs	r3, #1
}
  401112:	4618      	mov	r0, r3
  401114:	3714      	adds	r7, #20
  401116:	46bd      	mov	sp, r7
  401118:	bd90      	pop	{r4, r7, pc}
  40111a:	bf00      	nop
  40111c:	00401131 	.word	0x00401131
  401120:	00400cc3 	.word	0x00400cc3
  401124:	00400c99 	.word	0x00400c99
  401128:	00400dd1 	.word	0x00400dd1
  40112c:	00400e51 	.word	0x00400e51

00401130 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  401130:	b480      	push	{r7}
  401132:	b085      	sub	sp, #20
  401134:	af00      	add	r7, sp, #0
  401136:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401138:	687b      	ldr	r3, [r7, #4]
  40113a:	095b      	lsrs	r3, r3, #5
  40113c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401140:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401144:	025b      	lsls	r3, r3, #9
  401146:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  401148:	68fb      	ldr	r3, [r7, #12]
}
  40114a:	4618      	mov	r0, r3
  40114c:	3714      	adds	r7, #20
  40114e:	46bd      	mov	sp, r7
  401150:	bc80      	pop	{r7}
  401152:	4770      	bx	lr

00401154 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401154:	b580      	push	{r7, lr}
  401156:	b084      	sub	sp, #16
  401158:	af00      	add	r7, sp, #0
  40115a:	6078      	str	r0, [r7, #4]
  40115c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40115e:	6878      	ldr	r0, [r7, #4]
  401160:	4b2c      	ldr	r3, [pc, #176]	; (401214 <pio_handler_process+0xc0>)
  401162:	4798      	blx	r3
  401164:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  401166:	6878      	ldr	r0, [r7, #4]
  401168:	4b2b      	ldr	r3, [pc, #172]	; (401218 <pio_handler_process+0xc4>)
  40116a:	4798      	blx	r3
  40116c:	4602      	mov	r2, r0
  40116e:	68fb      	ldr	r3, [r7, #12]
  401170:	4013      	ands	r3, r2
  401172:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  401174:	68fb      	ldr	r3, [r7, #12]
  401176:	2b00      	cmp	r3, #0
  401178:	d03c      	beq.n	4011f4 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40117a:	2300      	movs	r3, #0
  40117c:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40117e:	e034      	b.n	4011ea <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  401180:	4a26      	ldr	r2, [pc, #152]	; (40121c <pio_handler_process+0xc8>)
  401182:	68bb      	ldr	r3, [r7, #8]
  401184:	011b      	lsls	r3, r3, #4
  401186:	4413      	add	r3, r2
  401188:	681a      	ldr	r2, [r3, #0]
  40118a:	683b      	ldr	r3, [r7, #0]
  40118c:	429a      	cmp	r2, r3
  40118e:	d126      	bne.n	4011de <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401190:	4a22      	ldr	r2, [pc, #136]	; (40121c <pio_handler_process+0xc8>)
  401192:	68bb      	ldr	r3, [r7, #8]
  401194:	011b      	lsls	r3, r3, #4
  401196:	4413      	add	r3, r2
  401198:	3304      	adds	r3, #4
  40119a:	681a      	ldr	r2, [r3, #0]
  40119c:	68fb      	ldr	r3, [r7, #12]
  40119e:	4013      	ands	r3, r2
  4011a0:	2b00      	cmp	r3, #0
  4011a2:	d01c      	beq.n	4011de <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4011a4:	4a1d      	ldr	r2, [pc, #116]	; (40121c <pio_handler_process+0xc8>)
  4011a6:	68bb      	ldr	r3, [r7, #8]
  4011a8:	011b      	lsls	r3, r3, #4
  4011aa:	4413      	add	r3, r2
  4011ac:	330c      	adds	r3, #12
  4011ae:	681b      	ldr	r3, [r3, #0]
  4011b0:	491a      	ldr	r1, [pc, #104]	; (40121c <pio_handler_process+0xc8>)
  4011b2:	68ba      	ldr	r2, [r7, #8]
  4011b4:	0112      	lsls	r2, r2, #4
  4011b6:	440a      	add	r2, r1
  4011b8:	6810      	ldr	r0, [r2, #0]
  4011ba:	4918      	ldr	r1, [pc, #96]	; (40121c <pio_handler_process+0xc8>)
  4011bc:	68ba      	ldr	r2, [r7, #8]
  4011be:	0112      	lsls	r2, r2, #4
  4011c0:	440a      	add	r2, r1
  4011c2:	3204      	adds	r2, #4
  4011c4:	6812      	ldr	r2, [r2, #0]
  4011c6:	4611      	mov	r1, r2
  4011c8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4011ca:	4a14      	ldr	r2, [pc, #80]	; (40121c <pio_handler_process+0xc8>)
  4011cc:	68bb      	ldr	r3, [r7, #8]
  4011ce:	011b      	lsls	r3, r3, #4
  4011d0:	4413      	add	r3, r2
  4011d2:	3304      	adds	r3, #4
  4011d4:	681b      	ldr	r3, [r3, #0]
  4011d6:	43db      	mvns	r3, r3
  4011d8:	68fa      	ldr	r2, [r7, #12]
  4011da:	4013      	ands	r3, r2
  4011dc:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4011de:	68bb      	ldr	r3, [r7, #8]
  4011e0:	3301      	adds	r3, #1
  4011e2:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4011e4:	68bb      	ldr	r3, [r7, #8]
  4011e6:	2b06      	cmp	r3, #6
  4011e8:	d803      	bhi.n	4011f2 <pio_handler_process+0x9e>
		while (status != 0) {
  4011ea:	68fb      	ldr	r3, [r7, #12]
  4011ec:	2b00      	cmp	r3, #0
  4011ee:	d1c7      	bne.n	401180 <pio_handler_process+0x2c>
  4011f0:	e000      	b.n	4011f4 <pio_handler_process+0xa0>
				break;
  4011f2:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4011f4:	4b0a      	ldr	r3, [pc, #40]	; (401220 <pio_handler_process+0xcc>)
  4011f6:	681b      	ldr	r3, [r3, #0]
  4011f8:	2b00      	cmp	r3, #0
  4011fa:	d007      	beq.n	40120c <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  4011fc:	4b09      	ldr	r3, [pc, #36]	; (401224 <pio_handler_process+0xd0>)
  4011fe:	681b      	ldr	r3, [r3, #0]
  401200:	2b00      	cmp	r3, #0
  401202:	d003      	beq.n	40120c <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  401204:	4b07      	ldr	r3, [pc, #28]	; (401224 <pio_handler_process+0xd0>)
  401206:	681b      	ldr	r3, [r3, #0]
  401208:	6878      	ldr	r0, [r7, #4]
  40120a:	4798      	blx	r3
		}
	}
#endif
}
  40120c:	bf00      	nop
  40120e:	3710      	adds	r7, #16
  401210:	46bd      	mov	sp, r7
  401212:	bd80      	pop	{r7, pc}
  401214:	00400f53 	.word	0x00400f53
  401218:	00400f69 	.word	0x00400f69
  40121c:	2000046c 	.word	0x2000046c
  401220:	200008e8 	.word	0x200008e8
  401224:	200004e0 	.word	0x200004e0

00401228 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  401228:	b580      	push	{r7, lr}
  40122a:	b086      	sub	sp, #24
  40122c:	af00      	add	r7, sp, #0
  40122e:	60f8      	str	r0, [r7, #12]
  401230:	60b9      	str	r1, [r7, #8]
  401232:	607a      	str	r2, [r7, #4]
  401234:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  401236:	4b21      	ldr	r3, [pc, #132]	; (4012bc <pio_handler_set+0x94>)
  401238:	681b      	ldr	r3, [r3, #0]
  40123a:	2b06      	cmp	r3, #6
  40123c:	d901      	bls.n	401242 <pio_handler_set+0x1a>
		return 1;
  40123e:	2301      	movs	r3, #1
  401240:	e038      	b.n	4012b4 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  401242:	2300      	movs	r3, #0
  401244:	75fb      	strb	r3, [r7, #23]
  401246:	e011      	b.n	40126c <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  401248:	7dfb      	ldrb	r3, [r7, #23]
  40124a:	011b      	lsls	r3, r3, #4
  40124c:	4a1c      	ldr	r2, [pc, #112]	; (4012c0 <pio_handler_set+0x98>)
  40124e:	4413      	add	r3, r2
  401250:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  401252:	693b      	ldr	r3, [r7, #16]
  401254:	681a      	ldr	r2, [r3, #0]
  401256:	68bb      	ldr	r3, [r7, #8]
  401258:	429a      	cmp	r2, r3
  40125a:	d104      	bne.n	401266 <pio_handler_set+0x3e>
  40125c:	693b      	ldr	r3, [r7, #16]
  40125e:	685a      	ldr	r2, [r3, #4]
  401260:	687b      	ldr	r3, [r7, #4]
  401262:	429a      	cmp	r2, r3
  401264:	d008      	beq.n	401278 <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  401266:	7dfb      	ldrb	r3, [r7, #23]
  401268:	3301      	adds	r3, #1
  40126a:	75fb      	strb	r3, [r7, #23]
  40126c:	7dfa      	ldrb	r2, [r7, #23]
  40126e:	4b13      	ldr	r3, [pc, #76]	; (4012bc <pio_handler_set+0x94>)
  401270:	681b      	ldr	r3, [r3, #0]
  401272:	429a      	cmp	r2, r3
  401274:	d9e8      	bls.n	401248 <pio_handler_set+0x20>
  401276:	e000      	b.n	40127a <pio_handler_set+0x52>
			break;
  401278:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40127a:	693b      	ldr	r3, [r7, #16]
  40127c:	68ba      	ldr	r2, [r7, #8]
  40127e:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  401280:	693b      	ldr	r3, [r7, #16]
  401282:	687a      	ldr	r2, [r7, #4]
  401284:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  401286:	693b      	ldr	r3, [r7, #16]
  401288:	683a      	ldr	r2, [r7, #0]
  40128a:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  40128c:	693b      	ldr	r3, [r7, #16]
  40128e:	6a3a      	ldr	r2, [r7, #32]
  401290:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  401292:	7dfa      	ldrb	r2, [r7, #23]
  401294:	4b09      	ldr	r3, [pc, #36]	; (4012bc <pio_handler_set+0x94>)
  401296:	681b      	ldr	r3, [r3, #0]
  401298:	3301      	adds	r3, #1
  40129a:	429a      	cmp	r2, r3
  40129c:	d104      	bne.n	4012a8 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  40129e:	4b07      	ldr	r3, [pc, #28]	; (4012bc <pio_handler_set+0x94>)
  4012a0:	681b      	ldr	r3, [r3, #0]
  4012a2:	3301      	adds	r3, #1
  4012a4:	4a05      	ldr	r2, [pc, #20]	; (4012bc <pio_handler_set+0x94>)
  4012a6:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4012a8:	683a      	ldr	r2, [r7, #0]
  4012aa:	6879      	ldr	r1, [r7, #4]
  4012ac:	68f8      	ldr	r0, [r7, #12]
  4012ae:	4b05      	ldr	r3, [pc, #20]	; (4012c4 <pio_handler_set+0x9c>)
  4012b0:	4798      	blx	r3

	return 0;
  4012b2:	2300      	movs	r3, #0
}
  4012b4:	4618      	mov	r0, r3
  4012b6:	3718      	adds	r7, #24
  4012b8:	46bd      	mov	sp, r7
  4012ba:	bd80      	pop	{r7, pc}
  4012bc:	200004dc 	.word	0x200004dc
  4012c0:	2000046c 	.word	0x2000046c
  4012c4:	00400eb5 	.word	0x00400eb5

004012c8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4012c8:	b580      	push	{r7, lr}
  4012ca:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4012cc:	210b      	movs	r1, #11
  4012ce:	4802      	ldr	r0, [pc, #8]	; (4012d8 <PIOA_Handler+0x10>)
  4012d0:	4b02      	ldr	r3, [pc, #8]	; (4012dc <PIOA_Handler+0x14>)
  4012d2:	4798      	blx	r3
}
  4012d4:	bf00      	nop
  4012d6:	bd80      	pop	{r7, pc}
  4012d8:	400e0e00 	.word	0x400e0e00
  4012dc:	00401155 	.word	0x00401155

004012e0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4012e0:	b580      	push	{r7, lr}
  4012e2:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4012e4:	210c      	movs	r1, #12
  4012e6:	4802      	ldr	r0, [pc, #8]	; (4012f0 <PIOB_Handler+0x10>)
  4012e8:	4b02      	ldr	r3, [pc, #8]	; (4012f4 <PIOB_Handler+0x14>)
  4012ea:	4798      	blx	r3
}
  4012ec:	bf00      	nop
  4012ee:	bd80      	pop	{r7, pc}
  4012f0:	400e1000 	.word	0x400e1000
  4012f4:	00401155 	.word	0x00401155

004012f8 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4012f8:	b480      	push	{r7}
  4012fa:	b087      	sub	sp, #28
  4012fc:	af00      	add	r7, sp, #0
  4012fe:	60f8      	str	r0, [r7, #12]
  401300:	60b9      	str	r1, [r7, #8]
  401302:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  401304:	68fa      	ldr	r2, [r7, #12]
  401306:	68bb      	ldr	r3, [r7, #8]
  401308:	019b      	lsls	r3, r3, #6
  40130a:	4413      	add	r3, r2
  40130c:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  40130e:	697b      	ldr	r3, [r7, #20]
  401310:	2202      	movs	r2, #2
  401312:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  401314:	697b      	ldr	r3, [r7, #20]
  401316:	f04f 32ff 	mov.w	r2, #4294967295
  40131a:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  40131c:	697b      	ldr	r3, [r7, #20]
  40131e:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  401320:	697b      	ldr	r3, [r7, #20]
  401322:	687a      	ldr	r2, [r7, #4]
  401324:	605a      	str	r2, [r3, #4]
}
  401326:	bf00      	nop
  401328:	371c      	adds	r7, #28
  40132a:	46bd      	mov	sp, r7
  40132c:	bc80      	pop	{r7}
  40132e:	4770      	bx	lr

00401330 <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  401330:	b480      	push	{r7}
  401332:	b083      	sub	sp, #12
  401334:	af00      	add	r7, sp, #0
  401336:	6078      	str	r0, [r7, #4]
  401338:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  40133a:	687a      	ldr	r2, [r7, #4]
  40133c:	683b      	ldr	r3, [r7, #0]
  40133e:	019b      	lsls	r3, r3, #6
  401340:	4413      	add	r3, r2
  401342:	2205      	movs	r2, #5
  401344:	601a      	str	r2, [r3, #0]
}
  401346:	bf00      	nop
  401348:	370c      	adds	r7, #12
  40134a:	46bd      	mov	sp, r7
  40134c:	bc80      	pop	{r7}
  40134e:	4770      	bx	lr

00401350 <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  401350:	b480      	push	{r7}
  401352:	b085      	sub	sp, #20
  401354:	af00      	add	r7, sp, #0
  401356:	60f8      	str	r0, [r7, #12]
  401358:	60b9      	str	r1, [r7, #8]
  40135a:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  40135c:	68fa      	ldr	r2, [r7, #12]
  40135e:	68bb      	ldr	r3, [r7, #8]
  401360:	019b      	lsls	r3, r3, #6
  401362:	4413      	add	r3, r2
  401364:	331c      	adds	r3, #28
  401366:	687a      	ldr	r2, [r7, #4]
  401368:	601a      	str	r2, [r3, #0]
}
  40136a:	bf00      	nop
  40136c:	3714      	adds	r7, #20
  40136e:	46bd      	mov	sp, r7
  401370:	bc80      	pop	{r7}
  401372:	4770      	bx	lr

00401374 <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  401374:	b480      	push	{r7}
  401376:	b087      	sub	sp, #28
  401378:	af00      	add	r7, sp, #0
  40137a:	60f8      	str	r0, [r7, #12]
  40137c:	60b9      	str	r1, [r7, #8]
  40137e:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  401380:	68fa      	ldr	r2, [r7, #12]
  401382:	68bb      	ldr	r3, [r7, #8]
  401384:	019b      	lsls	r3, r3, #6
  401386:	4413      	add	r3, r2
  401388:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  40138a:	697b      	ldr	r3, [r7, #20]
  40138c:	687a      	ldr	r2, [r7, #4]
  40138e:	625a      	str	r2, [r3, #36]	; 0x24
}
  401390:	bf00      	nop
  401392:	371c      	adds	r7, #28
  401394:	46bd      	mov	sp, r7
  401396:	bc80      	pop	{r7}
  401398:	4770      	bx	lr

0040139a <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  40139a:	b480      	push	{r7}
  40139c:	b085      	sub	sp, #20
  40139e:	af00      	add	r7, sp, #0
  4013a0:	6078      	str	r0, [r7, #4]
  4013a2:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4013a4:	687a      	ldr	r2, [r7, #4]
  4013a6:	683b      	ldr	r3, [r7, #0]
  4013a8:	019b      	lsls	r3, r3, #6
  4013aa:	4413      	add	r3, r2
  4013ac:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  4013ae:	68fb      	ldr	r3, [r7, #12]
  4013b0:	6a1b      	ldr	r3, [r3, #32]
}
  4013b2:	4618      	mov	r0, r3
  4013b4:	3714      	adds	r7, #20
  4013b6:	46bd      	mov	sp, r7
  4013b8:	bc80      	pop	{r7}
  4013ba:	4770      	bx	lr

004013bc <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4013bc:	b480      	push	{r7}
  4013be:	b08d      	sub	sp, #52	; 0x34
  4013c0:	af00      	add	r7, sp, #0
  4013c2:	60f8      	str	r0, [r7, #12]
  4013c4:	60b9      	str	r1, [r7, #8]
  4013c6:	607a      	str	r2, [r7, #4]
  4013c8:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4013ca:	2302      	movs	r3, #2
  4013cc:	613b      	str	r3, [r7, #16]
  4013ce:	2308      	movs	r3, #8
  4013d0:	617b      	str	r3, [r7, #20]
  4013d2:	2320      	movs	r3, #32
  4013d4:	61bb      	str	r3, [r7, #24]
  4013d6:	2380      	movs	r3, #128	; 0x80
  4013d8:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  4013da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4013dc:	0bdb      	lsrs	r3, r3, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4013de:	623b      	str	r3, [r7, #32]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  4013e0:	2300      	movs	r3, #0
  4013e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  4013e4:	e01a      	b.n	40141c <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  4013e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4013e8:	009b      	lsls	r3, r3, #2
  4013ea:	f107 0230 	add.w	r2, r7, #48	; 0x30
  4013ee:	4413      	add	r3, r2
  4013f0:	f853 3c20 	ldr.w	r3, [r3, #-32]
  4013f4:	68ba      	ldr	r2, [r7, #8]
  4013f6:	fbb2 f3f3 	udiv	r3, r2, r3
  4013fa:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  4013fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4013fe:	0c1b      	lsrs	r3, r3, #16
  401400:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  401402:	68fa      	ldr	r2, [r7, #12]
  401404:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401406:	429a      	cmp	r2, r3
  401408:	d901      	bls.n	40140e <tc_find_mck_divisor+0x52>
			return 0;
  40140a:	2300      	movs	r3, #0
  40140c:	e023      	b.n	401456 <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  40140e:	68fa      	ldr	r2, [r7, #12]
  401410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401412:	429a      	cmp	r2, r3
  401414:	d206      	bcs.n	401424 <tc_find_mck_divisor+0x68>
			ul_index++) {
  401416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401418:	3301      	adds	r3, #1
  40141a:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (ul_index = 0;
  40141c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40141e:	2b04      	cmp	r3, #4
  401420:	d9e1      	bls.n	4013e6 <tc_find_mck_divisor+0x2a>
  401422:	e000      	b.n	401426 <tc_find_mck_divisor+0x6a>
			break;
  401424:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  401426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401428:	2b04      	cmp	r3, #4
  40142a:	d901      	bls.n	401430 <tc_find_mck_divisor+0x74>
		return 0;
  40142c:	2300      	movs	r3, #0
  40142e:	e012      	b.n	401456 <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  401430:	687b      	ldr	r3, [r7, #4]
  401432:	2b00      	cmp	r3, #0
  401434:	d008      	beq.n	401448 <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  401436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401438:	009b      	lsls	r3, r3, #2
  40143a:	f107 0230 	add.w	r2, r7, #48	; 0x30
  40143e:	4413      	add	r3, r2
  401440:	f853 2c20 	ldr.w	r2, [r3, #-32]
  401444:	687b      	ldr	r3, [r7, #4]
  401446:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  401448:	683b      	ldr	r3, [r7, #0]
  40144a:	2b00      	cmp	r3, #0
  40144c:	d002      	beq.n	401454 <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  40144e:	683b      	ldr	r3, [r7, #0]
  401450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  401452:	601a      	str	r2, [r3, #0]
	}

	return 1;
  401454:	2301      	movs	r3, #1
}
  401456:	4618      	mov	r0, r3
  401458:	3734      	adds	r7, #52	; 0x34
  40145a:	46bd      	mov	sp, r7
  40145c:	bc80      	pop	{r7}
  40145e:	4770      	bx	lr

00401460 <__NVIC_EnableIRQ>:
{
  401460:	b480      	push	{r7}
  401462:	b083      	sub	sp, #12
  401464:	af00      	add	r7, sp, #0
  401466:	4603      	mov	r3, r0
  401468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  40146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40146e:	2b00      	cmp	r3, #0
  401470:	db0b      	blt.n	40148a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401472:	4908      	ldr	r1, [pc, #32]	; (401494 <__NVIC_EnableIRQ+0x34>)
  401474:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401478:	095b      	lsrs	r3, r3, #5
  40147a:	79fa      	ldrb	r2, [r7, #7]
  40147c:	f002 021f 	and.w	r2, r2, #31
  401480:	2001      	movs	r0, #1
  401482:	fa00 f202 	lsl.w	r2, r0, r2
  401486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40148a:	bf00      	nop
  40148c:	370c      	adds	r7, #12
  40148e:	46bd      	mov	sp, r7
  401490:	bc80      	pop	{r7}
  401492:	4770      	bx	lr
  401494:	e000e100 	.word	0xe000e100

00401498 <osc_get_rate>:
{
  401498:	b480      	push	{r7}
  40149a:	b083      	sub	sp, #12
  40149c:	af00      	add	r7, sp, #0
  40149e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4014a0:	687b      	ldr	r3, [r7, #4]
  4014a2:	2b07      	cmp	r3, #7
  4014a4:	d825      	bhi.n	4014f2 <osc_get_rate+0x5a>
  4014a6:	a201      	add	r2, pc, #4	; (adr r2, 4014ac <osc_get_rate+0x14>)
  4014a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4014ac:	004014cd 	.word	0x004014cd
  4014b0:	004014d3 	.word	0x004014d3
  4014b4:	004014d9 	.word	0x004014d9
  4014b8:	004014df 	.word	0x004014df
  4014bc:	004014e3 	.word	0x004014e3
  4014c0:	004014e7 	.word	0x004014e7
  4014c4:	004014eb 	.word	0x004014eb
  4014c8:	004014ef 	.word	0x004014ef
		return OSC_SLCK_32K_RC_HZ;
  4014cc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4014d0:	e010      	b.n	4014f4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4014d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4014d6:	e00d      	b.n	4014f4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4014d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4014dc:	e00a      	b.n	4014f4 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4014de:	4b08      	ldr	r3, [pc, #32]	; (401500 <osc_get_rate+0x68>)
  4014e0:	e008      	b.n	4014f4 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4014e2:	4b08      	ldr	r3, [pc, #32]	; (401504 <osc_get_rate+0x6c>)
  4014e4:	e006      	b.n	4014f4 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4014e6:	4b08      	ldr	r3, [pc, #32]	; (401508 <osc_get_rate+0x70>)
  4014e8:	e004      	b.n	4014f4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4014ea:	4b07      	ldr	r3, [pc, #28]	; (401508 <osc_get_rate+0x70>)
  4014ec:	e002      	b.n	4014f4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4014ee:	4b06      	ldr	r3, [pc, #24]	; (401508 <osc_get_rate+0x70>)
  4014f0:	e000      	b.n	4014f4 <osc_get_rate+0x5c>
	return 0;
  4014f2:	2300      	movs	r3, #0
}
  4014f4:	4618      	mov	r0, r3
  4014f6:	370c      	adds	r7, #12
  4014f8:	46bd      	mov	sp, r7
  4014fa:	bc80      	pop	{r7}
  4014fc:	4770      	bx	lr
  4014fe:	bf00      	nop
  401500:	003d0900 	.word	0x003d0900
  401504:	007a1200 	.word	0x007a1200
  401508:	00b71b00 	.word	0x00b71b00

0040150c <sysclk_get_main_hz>:
{
  40150c:	b580      	push	{r7, lr}
  40150e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401510:	2006      	movs	r0, #6
  401512:	4b04      	ldr	r3, [pc, #16]	; (401524 <sysclk_get_main_hz+0x18>)
  401514:	4798      	blx	r3
  401516:	4602      	mov	r2, r0
  401518:	4613      	mov	r3, r2
  40151a:	009b      	lsls	r3, r3, #2
  40151c:	4413      	add	r3, r2
  40151e:	009b      	lsls	r3, r3, #2
}
  401520:	4618      	mov	r0, r3
  401522:	bd80      	pop	{r7, pc}
  401524:	00401499 	.word	0x00401499

00401528 <sysclk_get_cpu_hz>:
{
  401528:	b580      	push	{r7, lr}
  40152a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  40152c:	4b02      	ldr	r3, [pc, #8]	; (401538 <sysclk_get_cpu_hz+0x10>)
  40152e:	4798      	blx	r3
  401530:	4603      	mov	r3, r0
  401532:	085b      	lsrs	r3, r3, #1
}
  401534:	4618      	mov	r0, r3
  401536:	bd80      	pop	{r7, pc}
  401538:	0040150d 	.word	0x0040150d

0040153c <TC0_Handler>:
 */ 

#include "timer_interface.h"

void TC0_Handler(void)
{
  40153c:	b580      	push	{r7, lr}
  40153e:	b082      	sub	sp, #8
  401540:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	// Read TC0 status.
	ul_status = tc_get_status(TC0, 0);
  401542:	2100      	movs	r1, #0
  401544:	4809      	ldr	r0, [pc, #36]	; (40156c <TC0_Handler+0x30>)
  401546:	4b0a      	ldr	r3, [pc, #40]	; (401570 <TC0_Handler+0x34>)
  401548:	4798      	blx	r3
  40154a:	6078      	str	r0, [r7, #4]

	// RC compare.
	if ((ul_status & TC_SR_CPCS) == TC_SR_CPCS) {
  40154c:	687b      	ldr	r3, [r7, #4]
  40154e:	f003 0310 	and.w	r3, r3, #16
  401552:	2b00      	cmp	r3, #0
  401554:	d006      	beq.n	401564 <TC0_Handler+0x28>
		counts++;
  401556:	4b07      	ldr	r3, [pc, #28]	; (401574 <TC0_Handler+0x38>)
  401558:	781b      	ldrb	r3, [r3, #0]
  40155a:	b2db      	uxtb	r3, r3
  40155c:	3301      	adds	r3, #1
  40155e:	b2da      	uxtb	r2, r3
  401560:	4b04      	ldr	r3, [pc, #16]	; (401574 <TC0_Handler+0x38>)
  401562:	701a      	strb	r2, [r3, #0]
	}
}
  401564:	bf00      	nop
  401566:	3708      	adds	r7, #8
  401568:	46bd      	mov	sp, r7
  40156a:	bd80      	pop	{r7, pc}
  40156c:	40010000 	.word	0x40010000
  401570:	0040139b 	.word	0x0040139b
  401574:	200008e4 	.word	0x200008e4

00401578 <configure_tc>:

void configure_tc(void)
{
  401578:	b590      	push	{r4, r7, lr}
  40157a:	b087      	sub	sp, #28
  40157c:	af02      	add	r7, sp, #8
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk;

	// Get system clock.
	ul_sysclk = sysclk_get_cpu_hz();
  40157e:	4b18      	ldr	r3, [pc, #96]	; (4015e0 <configure_tc+0x68>)
  401580:	4798      	blx	r3
  401582:	60f8      	str	r0, [r7, #12]

	// Configure PMC.
	pmc_enable_periph_clk(ID_TC0);
  401584:	2017      	movs	r0, #23
  401586:	4b17      	ldr	r3, [pc, #92]	; (4015e4 <configure_tc+0x6c>)
  401588:	4798      	blx	r3

	// Configure TC for a 1Hz frequency and trigger on RC compare.
	tc_find_mck_divisor(TC_FREQ, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  40158a:	1d39      	adds	r1, r7, #4
  40158c:	f107 0208 	add.w	r2, r7, #8
  401590:	68fb      	ldr	r3, [r7, #12]
  401592:	9300      	str	r3, [sp, #0]
  401594:	460b      	mov	r3, r1
  401596:	68f9      	ldr	r1, [r7, #12]
  401598:	2001      	movs	r0, #1
  40159a:	4c13      	ldr	r4, [pc, #76]	; (4015e8 <configure_tc+0x70>)
  40159c:	47a0      	blx	r4
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  40159e:	687b      	ldr	r3, [r7, #4]
  4015a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  4015a4:	461a      	mov	r2, r3
  4015a6:	2100      	movs	r1, #0
  4015a8:	4810      	ldr	r0, [pc, #64]	; (4015ec <configure_tc+0x74>)
  4015aa:	4b11      	ldr	r3, [pc, #68]	; (4015f0 <configure_tc+0x78>)
  4015ac:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / TC_FREQ);
  4015ae:	68bb      	ldr	r3, [r7, #8]
  4015b0:	68fa      	ldr	r2, [r7, #12]
  4015b2:	fbb2 f3f3 	udiv	r3, r2, r3
  4015b6:	461a      	mov	r2, r3
  4015b8:	2100      	movs	r1, #0
  4015ba:	480c      	ldr	r0, [pc, #48]	; (4015ec <configure_tc+0x74>)
  4015bc:	4b0d      	ldr	r3, [pc, #52]	; (4015f4 <configure_tc+0x7c>)
  4015be:	4798      	blx	r3

	// Configure and enable interrupt on RC compare.
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
  4015c0:	2017      	movs	r0, #23
  4015c2:	4b0d      	ldr	r3, [pc, #52]	; (4015f8 <configure_tc+0x80>)
  4015c4:	4798      	blx	r3
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  4015c6:	2210      	movs	r2, #16
  4015c8:	2100      	movs	r1, #0
  4015ca:	4808      	ldr	r0, [pc, #32]	; (4015ec <configure_tc+0x74>)
  4015cc:	4b0b      	ldr	r3, [pc, #44]	; (4015fc <configure_tc+0x84>)
  4015ce:	4798      	blx	r3
	
	// Start the timer
	tc_start(TC0, 0);
  4015d0:	2100      	movs	r1, #0
  4015d2:	4806      	ldr	r0, [pc, #24]	; (4015ec <configure_tc+0x74>)
  4015d4:	4b0a      	ldr	r3, [pc, #40]	; (401600 <configure_tc+0x88>)
  4015d6:	4798      	blx	r3
  4015d8:	bf00      	nop
  4015da:	3714      	adds	r7, #20
  4015dc:	46bd      	mov	sp, r7
  4015de:	bd90      	pop	{r4, r7, pc}
  4015e0:	00401529 	.word	0x00401529
  4015e4:	00401ba9 	.word	0x00401ba9
  4015e8:	004013bd 	.word	0x004013bd
  4015ec:	40010000 	.word	0x40010000
  4015f0:	004012f9 	.word	0x004012f9
  4015f4:	00401351 	.word	0x00401351
  4015f8:	00401461 	.word	0x00401461
  4015fc:	00401375 	.word	0x00401375
  401600:	00401331 	.word	0x00401331

00401604 <osc_enable>:
{
  401604:	b580      	push	{r7, lr}
  401606:	b082      	sub	sp, #8
  401608:	af00      	add	r7, sp, #0
  40160a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40160c:	687b      	ldr	r3, [r7, #4]
  40160e:	2b07      	cmp	r3, #7
  401610:	d831      	bhi.n	401676 <osc_enable+0x72>
  401612:	a201      	add	r2, pc, #4	; (adr r2, 401618 <osc_enable+0x14>)
  401614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401618:	00401675 	.word	0x00401675
  40161c:	00401639 	.word	0x00401639
  401620:	00401641 	.word	0x00401641
  401624:	00401649 	.word	0x00401649
  401628:	00401651 	.word	0x00401651
  40162c:	00401659 	.word	0x00401659
  401630:	00401661 	.word	0x00401661
  401634:	0040166b 	.word	0x0040166b
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  401638:	2000      	movs	r0, #0
  40163a:	4b11      	ldr	r3, [pc, #68]	; (401680 <osc_enable+0x7c>)
  40163c:	4798      	blx	r3
		break;
  40163e:	e01a      	b.n	401676 <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  401640:	2001      	movs	r0, #1
  401642:	4b0f      	ldr	r3, [pc, #60]	; (401680 <osc_enable+0x7c>)
  401644:	4798      	blx	r3
		break;
  401646:	e016      	b.n	401676 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  401648:	2000      	movs	r0, #0
  40164a:	4b0e      	ldr	r3, [pc, #56]	; (401684 <osc_enable+0x80>)
  40164c:	4798      	blx	r3
		break;
  40164e:	e012      	b.n	401676 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  401650:	2010      	movs	r0, #16
  401652:	4b0c      	ldr	r3, [pc, #48]	; (401684 <osc_enable+0x80>)
  401654:	4798      	blx	r3
		break;
  401656:	e00e      	b.n	401676 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  401658:	2020      	movs	r0, #32
  40165a:	4b0a      	ldr	r3, [pc, #40]	; (401684 <osc_enable+0x80>)
  40165c:	4798      	blx	r3
		break;
  40165e:	e00a      	b.n	401676 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401660:	213e      	movs	r1, #62	; 0x3e
  401662:	2000      	movs	r0, #0
  401664:	4b08      	ldr	r3, [pc, #32]	; (401688 <osc_enable+0x84>)
  401666:	4798      	blx	r3
		break;
  401668:	e005      	b.n	401676 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40166a:	213e      	movs	r1, #62	; 0x3e
  40166c:	2001      	movs	r0, #1
  40166e:	4b06      	ldr	r3, [pc, #24]	; (401688 <osc_enable+0x84>)
  401670:	4798      	blx	r3
		break;
  401672:	e000      	b.n	401676 <osc_enable+0x72>
		break;
  401674:	bf00      	nop
}
  401676:	bf00      	nop
  401678:	3708      	adds	r7, #8
  40167a:	46bd      	mov	sp, r7
  40167c:	bd80      	pop	{r7, pc}
  40167e:	bf00      	nop
  401680:	004019dd 	.word	0x004019dd
  401684:	00401a49 	.word	0x00401a49
  401688:	00401ab9 	.word	0x00401ab9

0040168c <osc_is_ready>:
{
  40168c:	b580      	push	{r7, lr}
  40168e:	b082      	sub	sp, #8
  401690:	af00      	add	r7, sp, #0
  401692:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401694:	687b      	ldr	r3, [r7, #4]
  401696:	2b07      	cmp	r3, #7
  401698:	d826      	bhi.n	4016e8 <osc_is_ready+0x5c>
  40169a:	a201      	add	r2, pc, #4	; (adr r2, 4016a0 <osc_is_ready+0x14>)
  40169c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4016a0:	004016c1 	.word	0x004016c1
  4016a4:	004016c5 	.word	0x004016c5
  4016a8:	004016c5 	.word	0x004016c5
  4016ac:	004016d7 	.word	0x004016d7
  4016b0:	004016d7 	.word	0x004016d7
  4016b4:	004016d7 	.word	0x004016d7
  4016b8:	004016d7 	.word	0x004016d7
  4016bc:	004016d7 	.word	0x004016d7
		return 1;
  4016c0:	2301      	movs	r3, #1
  4016c2:	e012      	b.n	4016ea <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  4016c4:	4b0b      	ldr	r3, [pc, #44]	; (4016f4 <osc_is_ready+0x68>)
  4016c6:	4798      	blx	r3
  4016c8:	4603      	mov	r3, r0
  4016ca:	2b00      	cmp	r3, #0
  4016cc:	bf14      	ite	ne
  4016ce:	2301      	movne	r3, #1
  4016d0:	2300      	moveq	r3, #0
  4016d2:	b2db      	uxtb	r3, r3
  4016d4:	e009      	b.n	4016ea <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  4016d6:	4b08      	ldr	r3, [pc, #32]	; (4016f8 <osc_is_ready+0x6c>)
  4016d8:	4798      	blx	r3
  4016da:	4603      	mov	r3, r0
  4016dc:	2b00      	cmp	r3, #0
  4016de:	bf14      	ite	ne
  4016e0:	2301      	movne	r3, #1
  4016e2:	2300      	moveq	r3, #0
  4016e4:	b2db      	uxtb	r3, r3
  4016e6:	e000      	b.n	4016ea <osc_is_ready+0x5e>
	return 0;
  4016e8:	2300      	movs	r3, #0
}
  4016ea:	4618      	mov	r0, r3
  4016ec:	3708      	adds	r7, #8
  4016ee:	46bd      	mov	sp, r7
  4016f0:	bd80      	pop	{r7, pc}
  4016f2:	bf00      	nop
  4016f4:	00401a15 	.word	0x00401a15
  4016f8:	00401b31 	.word	0x00401b31

004016fc <osc_get_rate>:
{
  4016fc:	b480      	push	{r7}
  4016fe:	b083      	sub	sp, #12
  401700:	af00      	add	r7, sp, #0
  401702:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401704:	687b      	ldr	r3, [r7, #4]
  401706:	2b07      	cmp	r3, #7
  401708:	d825      	bhi.n	401756 <osc_get_rate+0x5a>
  40170a:	a201      	add	r2, pc, #4	; (adr r2, 401710 <osc_get_rate+0x14>)
  40170c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401710:	00401731 	.word	0x00401731
  401714:	00401737 	.word	0x00401737
  401718:	0040173d 	.word	0x0040173d
  40171c:	00401743 	.word	0x00401743
  401720:	00401747 	.word	0x00401747
  401724:	0040174b 	.word	0x0040174b
  401728:	0040174f 	.word	0x0040174f
  40172c:	00401753 	.word	0x00401753
		return OSC_SLCK_32K_RC_HZ;
  401730:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401734:	e010      	b.n	401758 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40173a:	e00d      	b.n	401758 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  40173c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401740:	e00a      	b.n	401758 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401742:	4b08      	ldr	r3, [pc, #32]	; (401764 <osc_get_rate+0x68>)
  401744:	e008      	b.n	401758 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401746:	4b08      	ldr	r3, [pc, #32]	; (401768 <osc_get_rate+0x6c>)
  401748:	e006      	b.n	401758 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  40174a:	4b08      	ldr	r3, [pc, #32]	; (40176c <osc_get_rate+0x70>)
  40174c:	e004      	b.n	401758 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40174e:	4b07      	ldr	r3, [pc, #28]	; (40176c <osc_get_rate+0x70>)
  401750:	e002      	b.n	401758 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401752:	4b06      	ldr	r3, [pc, #24]	; (40176c <osc_get_rate+0x70>)
  401754:	e000      	b.n	401758 <osc_get_rate+0x5c>
	return 0;
  401756:	2300      	movs	r3, #0
}
  401758:	4618      	mov	r0, r3
  40175a:	370c      	adds	r7, #12
  40175c:	46bd      	mov	sp, r7
  40175e:	bc80      	pop	{r7}
  401760:	4770      	bx	lr
  401762:	bf00      	nop
  401764:	003d0900 	.word	0x003d0900
  401768:	007a1200 	.word	0x007a1200
  40176c:	00b71b00 	.word	0x00b71b00

00401770 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  401770:	b580      	push	{r7, lr}
  401772:	b082      	sub	sp, #8
  401774:	af00      	add	r7, sp, #0
  401776:	4603      	mov	r3, r0
  401778:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40177a:	bf00      	nop
  40177c:	79fb      	ldrb	r3, [r7, #7]
  40177e:	4618      	mov	r0, r3
  401780:	4b05      	ldr	r3, [pc, #20]	; (401798 <osc_wait_ready+0x28>)
  401782:	4798      	blx	r3
  401784:	4603      	mov	r3, r0
  401786:	f083 0301 	eor.w	r3, r3, #1
  40178a:	b2db      	uxtb	r3, r3
  40178c:	2b00      	cmp	r3, #0
  40178e:	d1f5      	bne.n	40177c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  401790:	bf00      	nop
  401792:	3708      	adds	r7, #8
  401794:	46bd      	mov	sp, r7
  401796:	bd80      	pop	{r7, pc}
  401798:	0040168d 	.word	0x0040168d

0040179c <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  40179c:	b580      	push	{r7, lr}
  40179e:	b086      	sub	sp, #24
  4017a0:	af00      	add	r7, sp, #0
  4017a2:	60f8      	str	r0, [r7, #12]
  4017a4:	607a      	str	r2, [r7, #4]
  4017a6:	603b      	str	r3, [r7, #0]
  4017a8:	460b      	mov	r3, r1
  4017aa:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  4017ac:	7afb      	ldrb	r3, [r7, #11]
  4017ae:	4618      	mov	r0, r3
  4017b0:	4b0d      	ldr	r3, [pc, #52]	; (4017e8 <pll_config_init+0x4c>)
  4017b2:	4798      	blx	r3
  4017b4:	4602      	mov	r2, r0
  4017b6:	687b      	ldr	r3, [r7, #4]
  4017b8:	fbb2 f3f3 	udiv	r3, r2, r3
  4017bc:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  4017be:	697b      	ldr	r3, [r7, #20]
  4017c0:	683a      	ldr	r2, [r7, #0]
  4017c2:	fb02 f303 	mul.w	r3, r2, r3
  4017c6:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  4017c8:	683b      	ldr	r3, [r7, #0]
  4017ca:	3b01      	subs	r3, #1
  4017cc:	041a      	lsls	r2, r3, #16
  4017ce:	4b07      	ldr	r3, [pc, #28]	; (4017ec <pll_config_init+0x50>)
  4017d0:	4013      	ands	r3, r2
  4017d2:	687a      	ldr	r2, [r7, #4]
  4017d4:	b2d2      	uxtb	r2, r2
  4017d6:	4313      	orrs	r3, r2
  4017d8:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  4017dc:	68fb      	ldr	r3, [r7, #12]
  4017de:	601a      	str	r2, [r3, #0]
}
  4017e0:	bf00      	nop
  4017e2:	3718      	adds	r7, #24
  4017e4:	46bd      	mov	sp, r7
  4017e6:	bd80      	pop	{r7, pc}
  4017e8:	004016fd 	.word	0x004016fd
  4017ec:	07ff0000 	.word	0x07ff0000

004017f0 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4017f0:	b580      	push	{r7, lr}
  4017f2:	b082      	sub	sp, #8
  4017f4:	af00      	add	r7, sp, #0
  4017f6:	6078      	str	r0, [r7, #4]
  4017f8:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4017fa:	683b      	ldr	r3, [r7, #0]
  4017fc:	2b00      	cmp	r3, #0
  4017fe:	d108      	bne.n	401812 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  401800:	4b09      	ldr	r3, [pc, #36]	; (401828 <pll_enable+0x38>)
  401802:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401804:	4a09      	ldr	r2, [pc, #36]	; (40182c <pll_enable+0x3c>)
  401806:	687b      	ldr	r3, [r7, #4]
  401808:	681b      	ldr	r3, [r3, #0]
  40180a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  40180e:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  401810:	e005      	b.n	40181e <pll_enable+0x2e>
		pmc_disable_pllbck();
  401812:	4b07      	ldr	r3, [pc, #28]	; (401830 <pll_enable+0x40>)
  401814:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  401816:	4a05      	ldr	r2, [pc, #20]	; (40182c <pll_enable+0x3c>)
  401818:	687b      	ldr	r3, [r7, #4]
  40181a:	681b      	ldr	r3, [r3, #0]
  40181c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  40181e:	bf00      	nop
  401820:	3708      	adds	r7, #8
  401822:	46bd      	mov	sp, r7
  401824:	bd80      	pop	{r7, pc}
  401826:	bf00      	nop
  401828:	00401b49 	.word	0x00401b49
  40182c:	400e0400 	.word	0x400e0400
  401830:	00401b79 	.word	0x00401b79

00401834 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  401834:	b580      	push	{r7, lr}
  401836:	b082      	sub	sp, #8
  401838:	af00      	add	r7, sp, #0
  40183a:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40183c:	687b      	ldr	r3, [r7, #4]
  40183e:	2b00      	cmp	r3, #0
  401840:	d103      	bne.n	40184a <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  401842:	4b05      	ldr	r3, [pc, #20]	; (401858 <pll_is_locked+0x24>)
  401844:	4798      	blx	r3
  401846:	4603      	mov	r3, r0
  401848:	e002      	b.n	401850 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  40184a:	4b04      	ldr	r3, [pc, #16]	; (40185c <pll_is_locked+0x28>)
  40184c:	4798      	blx	r3
  40184e:	4603      	mov	r3, r0
	}
}
  401850:	4618      	mov	r0, r3
  401852:	3708      	adds	r7, #8
  401854:	46bd      	mov	sp, r7
  401856:	bd80      	pop	{r7, pc}
  401858:	00401b61 	.word	0x00401b61
  40185c:	00401b91 	.word	0x00401b91

00401860 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  401860:	b580      	push	{r7, lr}
  401862:	b082      	sub	sp, #8
  401864:	af00      	add	r7, sp, #0
  401866:	4603      	mov	r3, r0
  401868:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40186a:	79fb      	ldrb	r3, [r7, #7]
  40186c:	3b03      	subs	r3, #3
  40186e:	2b04      	cmp	r3, #4
  401870:	d808      	bhi.n	401884 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  401872:	79fb      	ldrb	r3, [r7, #7]
  401874:	4618      	mov	r0, r3
  401876:	4b06      	ldr	r3, [pc, #24]	; (401890 <pll_enable_source+0x30>)
  401878:	4798      	blx	r3
		osc_wait_ready(e_src);
  40187a:	79fb      	ldrb	r3, [r7, #7]
  40187c:	4618      	mov	r0, r3
  40187e:	4b05      	ldr	r3, [pc, #20]	; (401894 <pll_enable_source+0x34>)
  401880:	4798      	blx	r3
		break;
  401882:	e000      	b.n	401886 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  401884:	bf00      	nop
	}
}
  401886:	bf00      	nop
  401888:	3708      	adds	r7, #8
  40188a:	46bd      	mov	sp, r7
  40188c:	bd80      	pop	{r7, pc}
  40188e:	bf00      	nop
  401890:	00401605 	.word	0x00401605
  401894:	00401771 	.word	0x00401771

00401898 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  401898:	b580      	push	{r7, lr}
  40189a:	b082      	sub	sp, #8
  40189c:	af00      	add	r7, sp, #0
  40189e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4018a0:	bf00      	nop
  4018a2:	6878      	ldr	r0, [r7, #4]
  4018a4:	4b04      	ldr	r3, [pc, #16]	; (4018b8 <pll_wait_for_lock+0x20>)
  4018a6:	4798      	blx	r3
  4018a8:	4603      	mov	r3, r0
  4018aa:	2b00      	cmp	r3, #0
  4018ac:	d0f9      	beq.n	4018a2 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  4018ae:	2300      	movs	r3, #0
}
  4018b0:	4618      	mov	r0, r3
  4018b2:	3708      	adds	r7, #8
  4018b4:	46bd      	mov	sp, r7
  4018b6:	bd80      	pop	{r7, pc}
  4018b8:	00401835 	.word	0x00401835

004018bc <sysclk_get_main_hz>:
{
  4018bc:	b580      	push	{r7, lr}
  4018be:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4018c0:	2006      	movs	r0, #6
  4018c2:	4b04      	ldr	r3, [pc, #16]	; (4018d4 <sysclk_get_main_hz+0x18>)
  4018c4:	4798      	blx	r3
  4018c6:	4602      	mov	r2, r0
  4018c8:	4613      	mov	r3, r2
  4018ca:	009b      	lsls	r3, r3, #2
  4018cc:	4413      	add	r3, r2
  4018ce:	009b      	lsls	r3, r3, #2
}
  4018d0:	4618      	mov	r0, r3
  4018d2:	bd80      	pop	{r7, pc}
  4018d4:	004016fd 	.word	0x004016fd

004018d8 <sysclk_get_cpu_hz>:
{
  4018d8:	b580      	push	{r7, lr}
  4018da:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4018dc:	4b02      	ldr	r3, [pc, #8]	; (4018e8 <sysclk_get_cpu_hz+0x10>)
  4018de:	4798      	blx	r3
  4018e0:	4603      	mov	r3, r0
  4018e2:	085b      	lsrs	r3, r3, #1
}
  4018e4:	4618      	mov	r0, r3
  4018e6:	bd80      	pop	{r7, pc}
  4018e8:	004018bd 	.word	0x004018bd

004018ec <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4018ec:	b590      	push	{r4, r7, lr}
  4018ee:	b083      	sub	sp, #12
  4018f0:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4018f2:	4811      	ldr	r0, [pc, #68]	; (401938 <sysclk_init+0x4c>)
  4018f4:	4b11      	ldr	r3, [pc, #68]	; (40193c <sysclk_init+0x50>)
  4018f6:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  4018f8:	2006      	movs	r0, #6
  4018fa:	4b11      	ldr	r3, [pc, #68]	; (401940 <sysclk_init+0x54>)
  4018fc:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4018fe:	1d38      	adds	r0, r7, #4
  401900:	2314      	movs	r3, #20
  401902:	2201      	movs	r2, #1
  401904:	2106      	movs	r1, #6
  401906:	4c0f      	ldr	r4, [pc, #60]	; (401944 <sysclk_init+0x58>)
  401908:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  40190a:	1d3b      	adds	r3, r7, #4
  40190c:	2100      	movs	r1, #0
  40190e:	4618      	mov	r0, r3
  401910:	4b0d      	ldr	r3, [pc, #52]	; (401948 <sysclk_init+0x5c>)
  401912:	4798      	blx	r3
		pll_wait_for_lock(0);
  401914:	2000      	movs	r0, #0
  401916:	4b0d      	ldr	r3, [pc, #52]	; (40194c <sysclk_init+0x60>)
  401918:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40191a:	2010      	movs	r0, #16
  40191c:	4b0c      	ldr	r3, [pc, #48]	; (401950 <sysclk_init+0x64>)
  40191e:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401920:	4b0c      	ldr	r3, [pc, #48]	; (401954 <sysclk_init+0x68>)
  401922:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401924:	4b0c      	ldr	r3, [pc, #48]	; (401958 <sysclk_init+0x6c>)
  401926:	4798      	blx	r3
  401928:	4603      	mov	r3, r0
  40192a:	4618      	mov	r0, r3
  40192c:	4b03      	ldr	r3, [pc, #12]	; (40193c <sysclk_init+0x50>)
  40192e:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  401930:	bf00      	nop
  401932:	370c      	adds	r7, #12
  401934:	46bd      	mov	sp, r7
  401936:	bd90      	pop	{r4, r7, pc}
  401938:	07270e00 	.word	0x07270e00
  40193c:	00401e9d 	.word	0x00401e9d
  401940:	00401861 	.word	0x00401861
  401944:	0040179d 	.word	0x0040179d
  401948:	004017f1 	.word	0x004017f1
  40194c:	00401899 	.word	0x00401899
  401950:	0040195d 	.word	0x0040195d
  401954:	00401d05 	.word	0x00401d05
  401958:	004018d9 	.word	0x004018d9

0040195c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  40195c:	b480      	push	{r7}
  40195e:	b085      	sub	sp, #20
  401960:	af00      	add	r7, sp, #0
  401962:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401964:	491c      	ldr	r1, [pc, #112]	; (4019d8 <pmc_switch_mck_to_pllack+0x7c>)
  401966:	4b1c      	ldr	r3, [pc, #112]	; (4019d8 <pmc_switch_mck_to_pllack+0x7c>)
  401968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40196a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  40196e:	687b      	ldr	r3, [r7, #4]
  401970:	4313      	orrs	r3, r2
  401972:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401974:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401978:	60fb      	str	r3, [r7, #12]
  40197a:	e007      	b.n	40198c <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40197c:	68fb      	ldr	r3, [r7, #12]
  40197e:	2b00      	cmp	r3, #0
  401980:	d101      	bne.n	401986 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  401982:	2301      	movs	r3, #1
  401984:	e023      	b.n	4019ce <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  401986:	68fb      	ldr	r3, [r7, #12]
  401988:	3b01      	subs	r3, #1
  40198a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40198c:	4b12      	ldr	r3, [pc, #72]	; (4019d8 <pmc_switch_mck_to_pllack+0x7c>)
  40198e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401990:	f003 0308 	and.w	r3, r3, #8
  401994:	2b00      	cmp	r3, #0
  401996:	d0f1      	beq.n	40197c <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401998:	4a0f      	ldr	r2, [pc, #60]	; (4019d8 <pmc_switch_mck_to_pllack+0x7c>)
  40199a:	4b0f      	ldr	r3, [pc, #60]	; (4019d8 <pmc_switch_mck_to_pllack+0x7c>)
  40199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40199e:	f023 0303 	bic.w	r3, r3, #3
  4019a2:	f043 0302 	orr.w	r3, r3, #2
  4019a6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4019a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4019ac:	60fb      	str	r3, [r7, #12]
  4019ae:	e007      	b.n	4019c0 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4019b0:	68fb      	ldr	r3, [r7, #12]
  4019b2:	2b00      	cmp	r3, #0
  4019b4:	d101      	bne.n	4019ba <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  4019b6:	2301      	movs	r3, #1
  4019b8:	e009      	b.n	4019ce <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4019ba:	68fb      	ldr	r3, [r7, #12]
  4019bc:	3b01      	subs	r3, #1
  4019be:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4019c0:	4b05      	ldr	r3, [pc, #20]	; (4019d8 <pmc_switch_mck_to_pllack+0x7c>)
  4019c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4019c4:	f003 0308 	and.w	r3, r3, #8
  4019c8:	2b00      	cmp	r3, #0
  4019ca:	d0f1      	beq.n	4019b0 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  4019cc:	2300      	movs	r3, #0
}
  4019ce:	4618      	mov	r0, r3
  4019d0:	3714      	adds	r7, #20
  4019d2:	46bd      	mov	sp, r7
  4019d4:	bc80      	pop	{r7}
  4019d6:	4770      	bx	lr
  4019d8:	400e0400 	.word	0x400e0400

004019dc <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4019dc:	b480      	push	{r7}
  4019de:	b083      	sub	sp, #12
  4019e0:	af00      	add	r7, sp, #0
  4019e2:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4019e4:	687b      	ldr	r3, [r7, #4]
  4019e6:	2b01      	cmp	r3, #1
  4019e8:	d107      	bne.n	4019fa <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4019ea:	4a08      	ldr	r2, [pc, #32]	; (401a0c <pmc_switch_sclk_to_32kxtal+0x30>)
  4019ec:	4b07      	ldr	r3, [pc, #28]	; (401a0c <pmc_switch_sclk_to_32kxtal+0x30>)
  4019ee:	689b      	ldr	r3, [r3, #8]
  4019f0:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  4019f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4019f8:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4019fa:	4b04      	ldr	r3, [pc, #16]	; (401a0c <pmc_switch_sclk_to_32kxtal+0x30>)
  4019fc:	4a04      	ldr	r2, [pc, #16]	; (401a10 <pmc_switch_sclk_to_32kxtal+0x34>)
  4019fe:	601a      	str	r2, [r3, #0]
}
  401a00:	bf00      	nop
  401a02:	370c      	adds	r7, #12
  401a04:	46bd      	mov	sp, r7
  401a06:	bc80      	pop	{r7}
  401a08:	4770      	bx	lr
  401a0a:	bf00      	nop
  401a0c:	400e1410 	.word	0x400e1410
  401a10:	a5000008 	.word	0xa5000008

00401a14 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  401a14:	b480      	push	{r7}
  401a16:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  401a18:	4b09      	ldr	r3, [pc, #36]	; (401a40 <pmc_osc_is_ready_32kxtal+0x2c>)
  401a1a:	695b      	ldr	r3, [r3, #20]
  401a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  401a20:	2b00      	cmp	r3, #0
  401a22:	d007      	beq.n	401a34 <pmc_osc_is_ready_32kxtal+0x20>
  401a24:	4b07      	ldr	r3, [pc, #28]	; (401a44 <pmc_osc_is_ready_32kxtal+0x30>)
  401a26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401a2c:	2b00      	cmp	r3, #0
  401a2e:	d001      	beq.n	401a34 <pmc_osc_is_ready_32kxtal+0x20>
  401a30:	2301      	movs	r3, #1
  401a32:	e000      	b.n	401a36 <pmc_osc_is_ready_32kxtal+0x22>
  401a34:	2300      	movs	r3, #0
}
  401a36:	4618      	mov	r0, r3
  401a38:	46bd      	mov	sp, r7
  401a3a:	bc80      	pop	{r7}
  401a3c:	4770      	bx	lr
  401a3e:	bf00      	nop
  401a40:	400e1410 	.word	0x400e1410
  401a44:	400e0400 	.word	0x400e0400

00401a48 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  401a48:	b480      	push	{r7}
  401a4a:	b083      	sub	sp, #12
  401a4c:	af00      	add	r7, sp, #0
  401a4e:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  401a50:	4a18      	ldr	r2, [pc, #96]	; (401ab4 <pmc_switch_mainck_to_fastrc+0x6c>)
  401a52:	4b18      	ldr	r3, [pc, #96]	; (401ab4 <pmc_switch_mainck_to_fastrc+0x6c>)
  401a54:	6a1b      	ldr	r3, [r3, #32]
  401a56:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401a5a:	f043 0308 	orr.w	r3, r3, #8
  401a5e:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401a60:	bf00      	nop
  401a62:	4b14      	ldr	r3, [pc, #80]	; (401ab4 <pmc_switch_mainck_to_fastrc+0x6c>)
  401a64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401a6a:	2b00      	cmp	r3, #0
  401a6c:	d0f9      	beq.n	401a62 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401a6e:	4911      	ldr	r1, [pc, #68]	; (401ab4 <pmc_switch_mainck_to_fastrc+0x6c>)
  401a70:	4b10      	ldr	r3, [pc, #64]	; (401ab4 <pmc_switch_mainck_to_fastrc+0x6c>)
  401a72:	6a1b      	ldr	r3, [r3, #32]
  401a74:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  401a7c:	687a      	ldr	r2, [r7, #4]
  401a7e:	4313      	orrs	r3, r2
  401a80:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401a84:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401a86:	bf00      	nop
  401a88:	4b0a      	ldr	r3, [pc, #40]	; (401ab4 <pmc_switch_mainck_to_fastrc+0x6c>)
  401a8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401a90:	2b00      	cmp	r3, #0
  401a92:	d0f9      	beq.n	401a88 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401a94:	4a07      	ldr	r2, [pc, #28]	; (401ab4 <pmc_switch_mainck_to_fastrc+0x6c>)
  401a96:	4b07      	ldr	r3, [pc, #28]	; (401ab4 <pmc_switch_mainck_to_fastrc+0x6c>)
  401a98:	6a1b      	ldr	r3, [r3, #32]
  401a9a:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  401a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401aa2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401aa6:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  401aa8:	bf00      	nop
  401aaa:	370c      	adds	r7, #12
  401aac:	46bd      	mov	sp, r7
  401aae:	bc80      	pop	{r7}
  401ab0:	4770      	bx	lr
  401ab2:	bf00      	nop
  401ab4:	400e0400 	.word	0x400e0400

00401ab8 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  401ab8:	b480      	push	{r7}
  401aba:	b083      	sub	sp, #12
  401abc:	af00      	add	r7, sp, #0
  401abe:	6078      	str	r0, [r7, #4]
  401ac0:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401ac2:	687b      	ldr	r3, [r7, #4]
  401ac4:	2b00      	cmp	r3, #0
  401ac6:	d008      	beq.n	401ada <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401ac8:	4916      	ldr	r1, [pc, #88]	; (401b24 <pmc_switch_mainck_to_xtal+0x6c>)
  401aca:	4b16      	ldr	r3, [pc, #88]	; (401b24 <pmc_switch_mainck_to_xtal+0x6c>)
  401acc:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401ace:	4a16      	ldr	r2, [pc, #88]	; (401b28 <pmc_switch_mainck_to_xtal+0x70>)
  401ad0:	401a      	ands	r2, r3
  401ad2:	4b16      	ldr	r3, [pc, #88]	; (401b2c <pmc_switch_mainck_to_xtal+0x74>)
  401ad4:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401ad6:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  401ad8:	e01e      	b.n	401b18 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401ada:	4912      	ldr	r1, [pc, #72]	; (401b24 <pmc_switch_mainck_to_xtal+0x6c>)
  401adc:	4b11      	ldr	r3, [pc, #68]	; (401b24 <pmc_switch_mainck_to_xtal+0x6c>)
  401ade:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401ae0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401ae4:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401ae8:	683a      	ldr	r2, [r7, #0]
  401aea:	0212      	lsls	r2, r2, #8
  401aec:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401aee:	4313      	orrs	r3, r2
  401af0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401af4:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401af8:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401afa:	bf00      	nop
  401afc:	4b09      	ldr	r3, [pc, #36]	; (401b24 <pmc_switch_mainck_to_xtal+0x6c>)
  401afe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401b00:	f003 0301 	and.w	r3, r3, #1
  401b04:	2b00      	cmp	r3, #0
  401b06:	d0f9      	beq.n	401afc <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401b08:	4a06      	ldr	r2, [pc, #24]	; (401b24 <pmc_switch_mainck_to_xtal+0x6c>)
  401b0a:	4b06      	ldr	r3, [pc, #24]	; (401b24 <pmc_switch_mainck_to_xtal+0x6c>)
  401b0c:	6a1b      	ldr	r3, [r3, #32]
  401b0e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  401b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401b16:	6213      	str	r3, [r2, #32]
}
  401b18:	bf00      	nop
  401b1a:	370c      	adds	r7, #12
  401b1c:	46bd      	mov	sp, r7
  401b1e:	bc80      	pop	{r7}
  401b20:	4770      	bx	lr
  401b22:	bf00      	nop
  401b24:	400e0400 	.word	0x400e0400
  401b28:	fec8fffc 	.word	0xfec8fffc
  401b2c:	01370002 	.word	0x01370002

00401b30 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  401b30:	b480      	push	{r7}
  401b32:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401b34:	4b03      	ldr	r3, [pc, #12]	; (401b44 <pmc_osc_is_ready_mainck+0x14>)
  401b36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  401b3c:	4618      	mov	r0, r3
  401b3e:	46bd      	mov	sp, r7
  401b40:	bc80      	pop	{r7}
  401b42:	4770      	bx	lr
  401b44:	400e0400 	.word	0x400e0400

00401b48 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  401b48:	b480      	push	{r7}
  401b4a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401b4c:	4b03      	ldr	r3, [pc, #12]	; (401b5c <pmc_disable_pllack+0x14>)
  401b4e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401b52:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  401b54:	bf00      	nop
  401b56:	46bd      	mov	sp, r7
  401b58:	bc80      	pop	{r7}
  401b5a:	4770      	bx	lr
  401b5c:	400e0400 	.word	0x400e0400

00401b60 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  401b60:	b480      	push	{r7}
  401b62:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401b64:	4b03      	ldr	r3, [pc, #12]	; (401b74 <pmc_is_locked_pllack+0x14>)
  401b66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401b68:	f003 0302 	and.w	r3, r3, #2
}
  401b6c:	4618      	mov	r0, r3
  401b6e:	46bd      	mov	sp, r7
  401b70:	bc80      	pop	{r7}
  401b72:	4770      	bx	lr
  401b74:	400e0400 	.word	0x400e0400

00401b78 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  401b78:	b480      	push	{r7}
  401b7a:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  401b7c:	4b03      	ldr	r3, [pc, #12]	; (401b8c <pmc_disable_pllbck+0x14>)
  401b7e:	2200      	movs	r2, #0
  401b80:	62da      	str	r2, [r3, #44]	; 0x2c
}
  401b82:	bf00      	nop
  401b84:	46bd      	mov	sp, r7
  401b86:	bc80      	pop	{r7}
  401b88:	4770      	bx	lr
  401b8a:	bf00      	nop
  401b8c:	400e0400 	.word	0x400e0400

00401b90 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  401b90:	b480      	push	{r7}
  401b92:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  401b94:	4b03      	ldr	r3, [pc, #12]	; (401ba4 <pmc_is_locked_pllbck+0x14>)
  401b96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401b98:	f003 0304 	and.w	r3, r3, #4
}
  401b9c:	4618      	mov	r0, r3
  401b9e:	46bd      	mov	sp, r7
  401ba0:	bc80      	pop	{r7}
  401ba2:	4770      	bx	lr
  401ba4:	400e0400 	.word	0x400e0400

00401ba8 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  401ba8:	b480      	push	{r7}
  401baa:	b083      	sub	sp, #12
  401bac:	af00      	add	r7, sp, #0
  401bae:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  401bb0:	687b      	ldr	r3, [r7, #4]
  401bb2:	2b22      	cmp	r3, #34	; 0x22
  401bb4:	d901      	bls.n	401bba <pmc_enable_periph_clk+0x12>
		return 1;
  401bb6:	2301      	movs	r3, #1
  401bb8:	e02f      	b.n	401c1a <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  401bba:	687b      	ldr	r3, [r7, #4]
  401bbc:	2b1f      	cmp	r3, #31
  401bbe:	d813      	bhi.n	401be8 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401bc0:	4b18      	ldr	r3, [pc, #96]	; (401c24 <pmc_enable_periph_clk+0x7c>)
  401bc2:	699a      	ldr	r2, [r3, #24]
  401bc4:	2101      	movs	r1, #1
  401bc6:	687b      	ldr	r3, [r7, #4]
  401bc8:	fa01 f303 	lsl.w	r3, r1, r3
  401bcc:	401a      	ands	r2, r3
  401bce:	2101      	movs	r1, #1
  401bd0:	687b      	ldr	r3, [r7, #4]
  401bd2:	fa01 f303 	lsl.w	r3, r1, r3
  401bd6:	429a      	cmp	r2, r3
  401bd8:	d01e      	beq.n	401c18 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  401bda:	4a12      	ldr	r2, [pc, #72]	; (401c24 <pmc_enable_periph_clk+0x7c>)
  401bdc:	2101      	movs	r1, #1
  401bde:	687b      	ldr	r3, [r7, #4]
  401be0:	fa01 f303 	lsl.w	r3, r1, r3
  401be4:	6113      	str	r3, [r2, #16]
  401be6:	e017      	b.n	401c18 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401be8:	687b      	ldr	r3, [r7, #4]
  401bea:	3b20      	subs	r3, #32
  401bec:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401bee:	4b0d      	ldr	r3, [pc, #52]	; (401c24 <pmc_enable_periph_clk+0x7c>)
  401bf0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401bf4:	2101      	movs	r1, #1
  401bf6:	687b      	ldr	r3, [r7, #4]
  401bf8:	fa01 f303 	lsl.w	r3, r1, r3
  401bfc:	401a      	ands	r2, r3
  401bfe:	2101      	movs	r1, #1
  401c00:	687b      	ldr	r3, [r7, #4]
  401c02:	fa01 f303 	lsl.w	r3, r1, r3
  401c06:	429a      	cmp	r2, r3
  401c08:	d006      	beq.n	401c18 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  401c0a:	4a06      	ldr	r2, [pc, #24]	; (401c24 <pmc_enable_periph_clk+0x7c>)
  401c0c:	2101      	movs	r1, #1
  401c0e:	687b      	ldr	r3, [r7, #4]
  401c10:	fa01 f303 	lsl.w	r3, r1, r3
  401c14:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  401c18:	2300      	movs	r3, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  401c1a:	4618      	mov	r0, r3
  401c1c:	370c      	adds	r7, #12
  401c1e:	46bd      	mov	sp, r7
  401c20:	bc80      	pop	{r7}
  401c22:	4770      	bx	lr
  401c24:	400e0400 	.word	0x400e0400

00401c28 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  401c28:	b480      	push	{r7}
  401c2a:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
}
  401c2c:	bf00      	nop
  401c2e:	46bd      	mov	sp, r7
  401c30:	bc80      	pop	{r7}
  401c32:	4770      	bx	lr

00401c34 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401c34:	b580      	push	{r7, lr}
  401c36:	b084      	sub	sp, #16
  401c38:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  401c3a:	4b27      	ldr	r3, [pc, #156]	; (401cd8 <Reset_Handler+0xa4>)
  401c3c:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  401c3e:	4b27      	ldr	r3, [pc, #156]	; (401cdc <Reset_Handler+0xa8>)
  401c40:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  401c42:	68fa      	ldr	r2, [r7, #12]
  401c44:	68bb      	ldr	r3, [r7, #8]
  401c46:	429a      	cmp	r2, r3
  401c48:	d90d      	bls.n	401c66 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  401c4a:	e007      	b.n	401c5c <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  401c4c:	68bb      	ldr	r3, [r7, #8]
  401c4e:	1d1a      	adds	r2, r3, #4
  401c50:	60ba      	str	r2, [r7, #8]
  401c52:	68fa      	ldr	r2, [r7, #12]
  401c54:	1d11      	adds	r1, r2, #4
  401c56:	60f9      	str	r1, [r7, #12]
  401c58:	6812      	ldr	r2, [r2, #0]
  401c5a:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  401c5c:	68bb      	ldr	r3, [r7, #8]
  401c5e:	4a20      	ldr	r2, [pc, #128]	; (401ce0 <Reset_Handler+0xac>)
  401c60:	4293      	cmp	r3, r2
  401c62:	d3f3      	bcc.n	401c4c <Reset_Handler+0x18>
  401c64:	e020      	b.n	401ca8 <Reset_Handler+0x74>
		}
	} else if (pSrc < pDest) {
  401c66:	68fa      	ldr	r2, [r7, #12]
  401c68:	68bb      	ldr	r3, [r7, #8]
  401c6a:	429a      	cmp	r2, r3
  401c6c:	d21c      	bcs.n	401ca8 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  401c6e:	4a1c      	ldr	r2, [pc, #112]	; (401ce0 <Reset_Handler+0xac>)
  401c70:	4b1a      	ldr	r3, [pc, #104]	; (401cdc <Reset_Handler+0xa8>)
  401c72:	1ad3      	subs	r3, r2, r3
  401c74:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  401c76:	68fa      	ldr	r2, [r7, #12]
  401c78:	687b      	ldr	r3, [r7, #4]
  401c7a:	4413      	add	r3, r2
  401c7c:	3b04      	subs	r3, #4
  401c7e:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  401c80:	68ba      	ldr	r2, [r7, #8]
  401c82:	687b      	ldr	r3, [r7, #4]
  401c84:	4413      	add	r3, r2
  401c86:	3b04      	subs	r3, #4
  401c88:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  401c8a:	e00a      	b.n	401ca2 <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  401c8c:	68bb      	ldr	r3, [r7, #8]
  401c8e:	1f1a      	subs	r2, r3, #4
  401c90:	60ba      	str	r2, [r7, #8]
  401c92:	68fa      	ldr	r2, [r7, #12]
  401c94:	1f11      	subs	r1, r2, #4
  401c96:	60f9      	str	r1, [r7, #12]
  401c98:	6812      	ldr	r2, [r2, #0]
  401c9a:	601a      	str	r2, [r3, #0]
		for (;nb_bytes;nb_bytes -= 4) {
  401c9c:	687b      	ldr	r3, [r7, #4]
  401c9e:	3b04      	subs	r3, #4
  401ca0:	607b      	str	r3, [r7, #4]
  401ca2:	687b      	ldr	r3, [r7, #4]
  401ca4:	2b00      	cmp	r3, #0
  401ca6:	d1f1      	bne.n	401c8c <Reset_Handler+0x58>
		}
	}
	__NOP();
  401ca8:	bf00      	nop

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401caa:	4b0e      	ldr	r3, [pc, #56]	; (401ce4 <Reset_Handler+0xb0>)
  401cac:	60bb      	str	r3, [r7, #8]
  401cae:	e004      	b.n	401cba <Reset_Handler+0x86>
		*pDest++ = 0;
  401cb0:	68bb      	ldr	r3, [r7, #8]
  401cb2:	1d1a      	adds	r2, r3, #4
  401cb4:	60ba      	str	r2, [r7, #8]
  401cb6:	2200      	movs	r2, #0
  401cb8:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  401cba:	68bb      	ldr	r3, [r7, #8]
  401cbc:	4a0a      	ldr	r2, [pc, #40]	; (401ce8 <Reset_Handler+0xb4>)
  401cbe:	4293      	cmp	r3, r2
  401cc0:	d3f6      	bcc.n	401cb0 <Reset_Handler+0x7c>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  401cc2:	4b0a      	ldr	r3, [pc, #40]	; (401cec <Reset_Handler+0xb8>)
  401cc4:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  401cc6:	4a0a      	ldr	r2, [pc, #40]	; (401cf0 <Reset_Handler+0xbc>)
  401cc8:	68fb      	ldr	r3, [r7, #12]
  401cca:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  401ccc:	4b09      	ldr	r3, [pc, #36]	; (401cf4 <Reset_Handler+0xc0>)
  401cce:	4798      	blx	r3

	/* Branch to main function */
	main();
  401cd0:	4b09      	ldr	r3, [pc, #36]	; (401cf8 <Reset_Handler+0xc4>)
  401cd2:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  401cd4:	e7fe      	b.n	401cd4 <Reset_Handler+0xa0>
  401cd6:	bf00      	nop
  401cd8:	00402b98 	.word	0x00402b98
  401cdc:	20000000 	.word	0x20000000
  401ce0:	2000043c 	.word	0x2000043c
  401ce4:	2000043c 	.word	0x2000043c
  401ce8:	20000910 	.word	0x20000910
  401cec:	00400000 	.word	0x00400000
  401cf0:	e000ed00 	.word	0xe000ed00
  401cf4:	004022d5 	.word	0x004022d5
  401cf8:	00401f31 	.word	0x00401f31

00401cfc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401cfc:	b480      	push	{r7}
  401cfe:	af00      	add	r7, sp, #0
	while (1) {
  401d00:	e7fe      	b.n	401d00 <Dummy_Handler+0x4>
	...

00401d04 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  401d04:	b480      	push	{r7}
  401d06:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  401d08:	4b5d      	ldr	r3, [pc, #372]	; (401e80 <SystemCoreClockUpdate+0x17c>)
  401d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401d0c:	f003 0303 	and.w	r3, r3, #3
  401d10:	2b03      	cmp	r3, #3
  401d12:	f200 8096 	bhi.w	401e42 <SystemCoreClockUpdate+0x13e>
  401d16:	a201      	add	r2, pc, #4	; (adr r2, 401d1c <SystemCoreClockUpdate+0x18>)
  401d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401d1c:	00401d2d 	.word	0x00401d2d
  401d20:	00401d4d 	.word	0x00401d4d
  401d24:	00401d97 	.word	0x00401d97
  401d28:	00401d97 	.word	0x00401d97
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401d2c:	4b55      	ldr	r3, [pc, #340]	; (401e84 <SystemCoreClockUpdate+0x180>)
  401d2e:	695b      	ldr	r3, [r3, #20]
  401d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401d34:	2b00      	cmp	r3, #0
  401d36:	d004      	beq.n	401d42 <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401d38:	4b53      	ldr	r3, [pc, #332]	; (401e88 <SystemCoreClockUpdate+0x184>)
  401d3a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401d3e:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  401d40:	e080      	b.n	401e44 <SystemCoreClockUpdate+0x140>
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401d42:	4b51      	ldr	r3, [pc, #324]	; (401e88 <SystemCoreClockUpdate+0x184>)
  401d44:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  401d48:	601a      	str	r2, [r3, #0]
		break;
  401d4a:	e07b      	b.n	401e44 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401d4c:	4b4c      	ldr	r3, [pc, #304]	; (401e80 <SystemCoreClockUpdate+0x17c>)
  401d4e:	6a1b      	ldr	r3, [r3, #32]
  401d50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401d54:	2b00      	cmp	r3, #0
  401d56:	d003      	beq.n	401d60 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  401d58:	4b4b      	ldr	r3, [pc, #300]	; (401e88 <SystemCoreClockUpdate+0x184>)
  401d5a:	4a4c      	ldr	r2, [pc, #304]	; (401e8c <SystemCoreClockUpdate+0x188>)
  401d5c:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  401d5e:	e071      	b.n	401e44 <SystemCoreClockUpdate+0x140>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401d60:	4b49      	ldr	r3, [pc, #292]	; (401e88 <SystemCoreClockUpdate+0x184>)
  401d62:	4a4b      	ldr	r2, [pc, #300]	; (401e90 <SystemCoreClockUpdate+0x18c>)
  401d64:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401d66:	4b46      	ldr	r3, [pc, #280]	; (401e80 <SystemCoreClockUpdate+0x17c>)
  401d68:	6a1b      	ldr	r3, [r3, #32]
  401d6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401d6e:	2b10      	cmp	r3, #16
  401d70:	d008      	beq.n	401d84 <SystemCoreClockUpdate+0x80>
  401d72:	2b20      	cmp	r3, #32
  401d74:	d00a      	beq.n	401d8c <SystemCoreClockUpdate+0x88>
  401d76:	2b00      	cmp	r3, #0
  401d78:	d000      	beq.n	401d7c <SystemCoreClockUpdate+0x78>
			break;
  401d7a:	e00b      	b.n	401d94 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401d7c:	4b42      	ldr	r3, [pc, #264]	; (401e88 <SystemCoreClockUpdate+0x184>)
  401d7e:	4a44      	ldr	r2, [pc, #272]	; (401e90 <SystemCoreClockUpdate+0x18c>)
  401d80:	601a      	str	r2, [r3, #0]
			break;
  401d82:	e007      	b.n	401d94 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401d84:	4b40      	ldr	r3, [pc, #256]	; (401e88 <SystemCoreClockUpdate+0x184>)
  401d86:	4a43      	ldr	r2, [pc, #268]	; (401e94 <SystemCoreClockUpdate+0x190>)
  401d88:	601a      	str	r2, [r3, #0]
			break;
  401d8a:	e003      	b.n	401d94 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401d8c:	4b3e      	ldr	r3, [pc, #248]	; (401e88 <SystemCoreClockUpdate+0x184>)
  401d8e:	4a3f      	ldr	r2, [pc, #252]	; (401e8c <SystemCoreClockUpdate+0x188>)
  401d90:	601a      	str	r2, [r3, #0]
			break;
  401d92:	bf00      	nop
		break;
  401d94:	e056      	b.n	401e44 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401d96:	4b3a      	ldr	r3, [pc, #232]	; (401e80 <SystemCoreClockUpdate+0x17c>)
  401d98:	6a1b      	ldr	r3, [r3, #32]
  401d9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401d9e:	2b00      	cmp	r3, #0
  401da0:	d003      	beq.n	401daa <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  401da2:	4b39      	ldr	r3, [pc, #228]	; (401e88 <SystemCoreClockUpdate+0x184>)
  401da4:	4a39      	ldr	r2, [pc, #228]	; (401e8c <SystemCoreClockUpdate+0x188>)
  401da6:	601a      	str	r2, [r3, #0]
  401da8:	e019      	b.n	401dde <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401daa:	4b37      	ldr	r3, [pc, #220]	; (401e88 <SystemCoreClockUpdate+0x184>)
  401dac:	4a38      	ldr	r2, [pc, #224]	; (401e90 <SystemCoreClockUpdate+0x18c>)
  401dae:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401db0:	4b33      	ldr	r3, [pc, #204]	; (401e80 <SystemCoreClockUpdate+0x17c>)
  401db2:	6a1b      	ldr	r3, [r3, #32]
  401db4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401db8:	2b10      	cmp	r3, #16
  401dba:	d008      	beq.n	401dce <SystemCoreClockUpdate+0xca>
  401dbc:	2b20      	cmp	r3, #32
  401dbe:	d00a      	beq.n	401dd6 <SystemCoreClockUpdate+0xd2>
  401dc0:	2b00      	cmp	r3, #0
  401dc2:	d000      	beq.n	401dc6 <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  401dc4:	e00b      	b.n	401dde <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401dc6:	4b30      	ldr	r3, [pc, #192]	; (401e88 <SystemCoreClockUpdate+0x184>)
  401dc8:	4a31      	ldr	r2, [pc, #196]	; (401e90 <SystemCoreClockUpdate+0x18c>)
  401dca:	601a      	str	r2, [r3, #0]
					break;
  401dcc:	e007      	b.n	401dde <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401dce:	4b2e      	ldr	r3, [pc, #184]	; (401e88 <SystemCoreClockUpdate+0x184>)
  401dd0:	4a30      	ldr	r2, [pc, #192]	; (401e94 <SystemCoreClockUpdate+0x190>)
  401dd2:	601a      	str	r2, [r3, #0]
					break;
  401dd4:	e003      	b.n	401dde <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401dd6:	4b2c      	ldr	r3, [pc, #176]	; (401e88 <SystemCoreClockUpdate+0x184>)
  401dd8:	4a2c      	ldr	r2, [pc, #176]	; (401e8c <SystemCoreClockUpdate+0x188>)
  401dda:	601a      	str	r2, [r3, #0]
					break;
  401ddc:	bf00      	nop
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  401dde:	4b28      	ldr	r3, [pc, #160]	; (401e80 <SystemCoreClockUpdate+0x17c>)
  401de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401de2:	f003 0303 	and.w	r3, r3, #3
  401de6:	2b02      	cmp	r3, #2
  401de8:	d115      	bne.n	401e16 <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  401dea:	4b25      	ldr	r3, [pc, #148]	; (401e80 <SystemCoreClockUpdate+0x17c>)
  401dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  401dee:	0c1b      	lsrs	r3, r3, #16
  401df0:	f3c3 030a 	ubfx	r3, r3, #0, #11
  401df4:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  401df6:	4a24      	ldr	r2, [pc, #144]	; (401e88 <SystemCoreClockUpdate+0x184>)
  401df8:	6812      	ldr	r2, [r2, #0]
  401dfa:	fb02 f303 	mul.w	r3, r2, r3
  401dfe:	4a22      	ldr	r2, [pc, #136]	; (401e88 <SystemCoreClockUpdate+0x184>)
  401e00:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  401e02:	4b1f      	ldr	r3, [pc, #124]	; (401e80 <SystemCoreClockUpdate+0x17c>)
  401e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  401e06:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  401e08:	4a1f      	ldr	r2, [pc, #124]	; (401e88 <SystemCoreClockUpdate+0x184>)
  401e0a:	6812      	ldr	r2, [r2, #0]
  401e0c:	fbb2 f3f3 	udiv	r3, r2, r3
  401e10:	4a1d      	ldr	r2, [pc, #116]	; (401e88 <SystemCoreClockUpdate+0x184>)
  401e12:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  401e14:	e016      	b.n	401e44 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  401e16:	4b1a      	ldr	r3, [pc, #104]	; (401e80 <SystemCoreClockUpdate+0x17c>)
  401e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  401e1a:	0c1b      	lsrs	r3, r3, #16
  401e1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
  401e20:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  401e22:	4a19      	ldr	r2, [pc, #100]	; (401e88 <SystemCoreClockUpdate+0x184>)
  401e24:	6812      	ldr	r2, [r2, #0]
  401e26:	fb02 f303 	mul.w	r3, r2, r3
  401e2a:	4a17      	ldr	r2, [pc, #92]	; (401e88 <SystemCoreClockUpdate+0x184>)
  401e2c:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401e2e:	4b14      	ldr	r3, [pc, #80]	; (401e80 <SystemCoreClockUpdate+0x17c>)
  401e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  401e32:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401e34:	4a14      	ldr	r2, [pc, #80]	; (401e88 <SystemCoreClockUpdate+0x184>)
  401e36:	6812      	ldr	r2, [r2, #0]
  401e38:	fbb2 f3f3 	udiv	r3, r2, r3
  401e3c:	4a12      	ldr	r2, [pc, #72]	; (401e88 <SystemCoreClockUpdate+0x184>)
  401e3e:	6013      	str	r3, [r2, #0]
		break;
  401e40:	e000      	b.n	401e44 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  401e42:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  401e44:	4b0e      	ldr	r3, [pc, #56]	; (401e80 <SystemCoreClockUpdate+0x17c>)
  401e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401e48:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401e4c:	2b70      	cmp	r3, #112	; 0x70
  401e4e:	d108      	bne.n	401e62 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  401e50:	4b0d      	ldr	r3, [pc, #52]	; (401e88 <SystemCoreClockUpdate+0x184>)
  401e52:	681b      	ldr	r3, [r3, #0]
  401e54:	4a10      	ldr	r2, [pc, #64]	; (401e98 <SystemCoreClockUpdate+0x194>)
  401e56:	fba2 2303 	umull	r2, r3, r2, r3
  401e5a:	085b      	lsrs	r3, r3, #1
  401e5c:	4a0a      	ldr	r2, [pc, #40]	; (401e88 <SystemCoreClockUpdate+0x184>)
  401e5e:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  401e60:	e00a      	b.n	401e78 <SystemCoreClockUpdate+0x174>
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401e62:	4b07      	ldr	r3, [pc, #28]	; (401e80 <SystemCoreClockUpdate+0x17c>)
  401e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401e66:	091b      	lsrs	r3, r3, #4
  401e68:	f003 0307 	and.w	r3, r3, #7
		SystemCoreClock >>=
  401e6c:	4a06      	ldr	r2, [pc, #24]	; (401e88 <SystemCoreClockUpdate+0x184>)
  401e6e:	6812      	ldr	r2, [r2, #0]
  401e70:	fa22 f303 	lsr.w	r3, r2, r3
  401e74:	4a04      	ldr	r2, [pc, #16]	; (401e88 <SystemCoreClockUpdate+0x184>)
  401e76:	6013      	str	r3, [r2, #0]
}
  401e78:	bf00      	nop
  401e7a:	46bd      	mov	sp, r7
  401e7c:	bc80      	pop	{r7}
  401e7e:	4770      	bx	lr
  401e80:	400e0400 	.word	0x400e0400
  401e84:	400e1410 	.word	0x400e1410
  401e88:	2000000c 	.word	0x2000000c
  401e8c:	00b71b00 	.word	0x00b71b00
  401e90:	003d0900 	.word	0x003d0900
  401e94:	007a1200 	.word	0x007a1200
  401e98:	aaaaaaab 	.word	0xaaaaaaab

00401e9c <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  401e9c:	b480      	push	{r7}
  401e9e:	b083      	sub	sp, #12
  401ea0:	af00      	add	r7, sp, #0
  401ea2:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  401ea4:	687b      	ldr	r3, [r7, #4]
  401ea6:	4a18      	ldr	r2, [pc, #96]	; (401f08 <system_init_flash+0x6c>)
  401ea8:	4293      	cmp	r3, r2
  401eaa:	d804      	bhi.n	401eb6 <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401eac:	4b17      	ldr	r3, [pc, #92]	; (401f0c <system_init_flash+0x70>)
  401eae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401eb2:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  401eb4:	e023      	b.n	401efe <system_init_flash+0x62>
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  401eb6:	687b      	ldr	r3, [r7, #4]
  401eb8:	4a15      	ldr	r2, [pc, #84]	; (401f10 <system_init_flash+0x74>)
  401eba:	4293      	cmp	r3, r2
  401ebc:	d803      	bhi.n	401ec6 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401ebe:	4b13      	ldr	r3, [pc, #76]	; (401f0c <system_init_flash+0x70>)
  401ec0:	4a14      	ldr	r2, [pc, #80]	; (401f14 <system_init_flash+0x78>)
  401ec2:	601a      	str	r2, [r3, #0]
}
  401ec4:	e01b      	b.n	401efe <system_init_flash+0x62>
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  401ec6:	687b      	ldr	r3, [r7, #4]
  401ec8:	4a13      	ldr	r2, [pc, #76]	; (401f18 <system_init_flash+0x7c>)
  401eca:	4293      	cmp	r3, r2
  401ecc:	d803      	bhi.n	401ed6 <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401ece:	4b0f      	ldr	r3, [pc, #60]	; (401f0c <system_init_flash+0x70>)
  401ed0:	4a12      	ldr	r2, [pc, #72]	; (401f1c <system_init_flash+0x80>)
  401ed2:	601a      	str	r2, [r3, #0]
}
  401ed4:	e013      	b.n	401efe <system_init_flash+0x62>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  401ed6:	687b      	ldr	r3, [r7, #4]
  401ed8:	4a11      	ldr	r2, [pc, #68]	; (401f20 <system_init_flash+0x84>)
  401eda:	4293      	cmp	r3, r2
  401edc:	d803      	bhi.n	401ee6 <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401ede:	4b0b      	ldr	r3, [pc, #44]	; (401f0c <system_init_flash+0x70>)
  401ee0:	4a10      	ldr	r2, [pc, #64]	; (401f24 <system_init_flash+0x88>)
  401ee2:	601a      	str	r2, [r3, #0]
}
  401ee4:	e00b      	b.n	401efe <system_init_flash+0x62>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  401ee6:	687b      	ldr	r3, [r7, #4]
  401ee8:	4a0f      	ldr	r2, [pc, #60]	; (401f28 <system_init_flash+0x8c>)
  401eea:	4293      	cmp	r3, r2
  401eec:	d804      	bhi.n	401ef8 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401eee:	4b07      	ldr	r3, [pc, #28]	; (401f0c <system_init_flash+0x70>)
  401ef0:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401ef4:	601a      	str	r2, [r3, #0]
}
  401ef6:	e002      	b.n	401efe <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401ef8:	4b04      	ldr	r3, [pc, #16]	; (401f0c <system_init_flash+0x70>)
  401efa:	4a0c      	ldr	r2, [pc, #48]	; (401f2c <system_init_flash+0x90>)
  401efc:	601a      	str	r2, [r3, #0]
}
  401efe:	bf00      	nop
  401f00:	370c      	adds	r7, #12
  401f02:	46bd      	mov	sp, r7
  401f04:	bc80      	pop	{r7}
  401f06:	4770      	bx	lr
  401f08:	01312cff 	.word	0x01312cff
  401f0c:	400e0a00 	.word	0x400e0a00
  401f10:	026259ff 	.word	0x026259ff
  401f14:	04000100 	.word	0x04000100
  401f18:	039386ff 	.word	0x039386ff
  401f1c:	04000200 	.word	0x04000200
  401f20:	04c4b3ff 	.word	0x04c4b3ff
  401f24:	04000300 	.word	0x04000300
  401f28:	05f5e0ff 	.word	0x05f5e0ff
  401f2c:	04000500 	.word	0x04000500

00401f30 <main>:
#include <timer_interface.h>
#include <wifi.h>
#include <camera.h>

int main (void)
{
  401f30:	b580      	push	{r7, lr}
  401f32:	af00      	add	r7, sp, #0
	// System init
	sysclk_init();
  401f34:	4b13      	ldr	r3, [pc, #76]	; (401f84 <main+0x54>)
  401f36:	4798      	blx	r3
	wdt_disable(WDT);
  401f38:	4813      	ldr	r0, [pc, #76]	; (401f88 <main+0x58>)
  401f3a:	4b14      	ldr	r3, [pc, #80]	; (401f8c <main+0x5c>)
  401f3c:	4798      	blx	r3
	board_init();
  401f3e:	4b14      	ldr	r3, [pc, #80]	; (401f90 <main+0x60>)
  401f40:	4798      	blx	r3
	// Timeout timer init
	configure_tc();
  401f42:	4b14      	ldr	r3, [pc, #80]	; (401f94 <main+0x64>)
  401f44:	4798      	blx	r3
	// Wifi init
	configure_wifi_comm_pin();
  401f46:	4b14      	ldr	r3, [pc, #80]	; (401f98 <main+0x68>)
  401f48:	4798      	blx	r3
	configure_usart();
  401f4a:	4b14      	ldr	r3, [pc, #80]	; (401f9c <main+0x6c>)
  401f4c:	4798      	blx	r3
	configure_usart_wifi();
  401f4e:	4b14      	ldr	r3, [pc, #80]	; (401fa0 <main+0x70>)
  401f50:	4798      	blx	r3
	configure_spi();
  401f52:	4b14      	ldr	r3, [pc, #80]	; (401fa4 <main+0x74>)
  401f54:	4798      	blx	r3
	spi_peripheral_initialize();
  401f56:	4b14      	ldr	r3, [pc, #80]	; (401fa8 <main+0x78>)
  401f58:	4798      	blx	r3
	USART_Handler();
  401f5a:	4b14      	ldr	r3, [pc, #80]	; (401fac <main+0x7c>)
  401f5c:	4798      	blx	r3
	init_camera();
	configure_camera();
	*/
	
	// Send "test" wifi command to ESP32
	write_wifi_command("test\r\n", 30);
  401f5e:	211e      	movs	r1, #30
  401f60:	4813      	ldr	r0, [pc, #76]	; (401fb0 <main+0x80>)
  401f62:	4b14      	ldr	r3, [pc, #80]	; (401fb4 <main+0x84>)
  401f64:	4798      	blx	r3
	
	// configuring the wifi module
	// configuring the LEDs
	write_wifi_command("set wlan_gpio 25\r\n", 2);
  401f66:	2102      	movs	r1, #2
  401f68:	4813      	ldr	r0, [pc, #76]	; (401fb8 <main+0x88>)
  401f6a:	4b12      	ldr	r3, [pc, #72]	; (401fb4 <main+0x84>)
  401f6c:	4798      	blx	r3
	write_wifi_command("set websocket_gpio 26\r\n", 2);
  401f6e:	2102      	movs	r1, #2
  401f70:	4812      	ldr	r0, [pc, #72]	; (401fbc <main+0x8c>)
  401f72:	4b10      	ldr	r3, [pc, #64]	; (401fb4 <main+0x84>)
  401f74:	4798      	blx	r3
	write_wifi_command("set ap_gpio 27\r\n", 2);
  401f76:	2102      	movs	r1, #2
  401f78:	4811      	ldr	r0, [pc, #68]	; (401fc0 <main+0x90>)
  401f7a:	4b0e      	ldr	r3, [pc, #56]	; (401fb4 <main+0x84>)
  401f7c:	4798      	blx	r3
  401f7e:	2300      	movs	r3, #0
	// configuring websocket clients GPIO
	write_wifi_command("set wlan_gpio 22\r\n", 10);
	// configuring command complete GPIO
	write_wifi_command("set wlan_gpio 23\r\n", 10);
	*/
}
  401f80:	4618      	mov	r0, r3
  401f82:	bd80      	pop	{r7, pc}
  401f84:	004018ed 	.word	0x004018ed
  401f88:	400e1450 	.word	0x400e1450
  401f8c:	004005a1 	.word	0x004005a1
  401f90:	00401c29 	.word	0x00401c29
  401f94:	00401579 	.word	0x00401579
  401f98:	004009cd 	.word	0x004009cd
  401f9c:	00400931 	.word	0x00400931
  401fa0:	00400a19 	.word	0x00400a19
  401fa4:	00400ac1 	.word	0x00400ac1
  401fa8:	00400b21 	.word	0x00400b21
  401fac:	0040083d 	.word	0x0040083d
  401fb0:	00402b20 	.word	0x00402b20
  401fb4:	00400bad 	.word	0x00400bad
  401fb8:	00402b28 	.word	0x00402b28
  401fbc:	00402b3c 	.word	0x00402b3c
  401fc0:	00402b54 	.word	0x00402b54

00401fc4 <__aeabi_uldivmod>:
  401fc4:	b953      	cbnz	r3, 401fdc <__aeabi_uldivmod+0x18>
  401fc6:	b94a      	cbnz	r2, 401fdc <__aeabi_uldivmod+0x18>
  401fc8:	2900      	cmp	r1, #0
  401fca:	bf08      	it	eq
  401fcc:	2800      	cmpeq	r0, #0
  401fce:	bf1c      	itt	ne
  401fd0:	f04f 31ff 	movne.w	r1, #4294967295
  401fd4:	f04f 30ff 	movne.w	r0, #4294967295
  401fd8:	f000 b97a 	b.w	4022d0 <__aeabi_idiv0>
  401fdc:	f1ad 0c08 	sub.w	ip, sp, #8
  401fe0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  401fe4:	f000 f806 	bl	401ff4 <__udivmoddi4>
  401fe8:	f8dd e004 	ldr.w	lr, [sp, #4]
  401fec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401ff0:	b004      	add	sp, #16
  401ff2:	4770      	bx	lr

00401ff4 <__udivmoddi4>:
  401ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401ff8:	468c      	mov	ip, r1
  401ffa:	460d      	mov	r5, r1
  401ffc:	4604      	mov	r4, r0
  401ffe:	9e08      	ldr	r6, [sp, #32]
  402000:	2b00      	cmp	r3, #0
  402002:	d151      	bne.n	4020a8 <__udivmoddi4+0xb4>
  402004:	428a      	cmp	r2, r1
  402006:	4617      	mov	r7, r2
  402008:	d96d      	bls.n	4020e6 <__udivmoddi4+0xf2>
  40200a:	fab2 fe82 	clz	lr, r2
  40200e:	f1be 0f00 	cmp.w	lr, #0
  402012:	d00b      	beq.n	40202c <__udivmoddi4+0x38>
  402014:	f1ce 0c20 	rsb	ip, lr, #32
  402018:	fa01 f50e 	lsl.w	r5, r1, lr
  40201c:	fa20 fc0c 	lsr.w	ip, r0, ip
  402020:	fa02 f70e 	lsl.w	r7, r2, lr
  402024:	ea4c 0c05 	orr.w	ip, ip, r5
  402028:	fa00 f40e 	lsl.w	r4, r0, lr
  40202c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  402030:	0c25      	lsrs	r5, r4, #16
  402032:	fbbc f8fa 	udiv	r8, ip, sl
  402036:	fa1f f987 	uxth.w	r9, r7
  40203a:	fb0a cc18 	mls	ip, sl, r8, ip
  40203e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  402042:	fb08 f309 	mul.w	r3, r8, r9
  402046:	42ab      	cmp	r3, r5
  402048:	d90a      	bls.n	402060 <__udivmoddi4+0x6c>
  40204a:	19ed      	adds	r5, r5, r7
  40204c:	f108 32ff 	add.w	r2, r8, #4294967295
  402050:	f080 8123 	bcs.w	40229a <__udivmoddi4+0x2a6>
  402054:	42ab      	cmp	r3, r5
  402056:	f240 8120 	bls.w	40229a <__udivmoddi4+0x2a6>
  40205a:	f1a8 0802 	sub.w	r8, r8, #2
  40205e:	443d      	add	r5, r7
  402060:	1aed      	subs	r5, r5, r3
  402062:	b2a4      	uxth	r4, r4
  402064:	fbb5 f0fa 	udiv	r0, r5, sl
  402068:	fb0a 5510 	mls	r5, sl, r0, r5
  40206c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  402070:	fb00 f909 	mul.w	r9, r0, r9
  402074:	45a1      	cmp	r9, r4
  402076:	d909      	bls.n	40208c <__udivmoddi4+0x98>
  402078:	19e4      	adds	r4, r4, r7
  40207a:	f100 33ff 	add.w	r3, r0, #4294967295
  40207e:	f080 810a 	bcs.w	402296 <__udivmoddi4+0x2a2>
  402082:	45a1      	cmp	r9, r4
  402084:	f240 8107 	bls.w	402296 <__udivmoddi4+0x2a2>
  402088:	3802      	subs	r0, #2
  40208a:	443c      	add	r4, r7
  40208c:	eba4 0409 	sub.w	r4, r4, r9
  402090:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402094:	2100      	movs	r1, #0
  402096:	2e00      	cmp	r6, #0
  402098:	d061      	beq.n	40215e <__udivmoddi4+0x16a>
  40209a:	fa24 f40e 	lsr.w	r4, r4, lr
  40209e:	2300      	movs	r3, #0
  4020a0:	6034      	str	r4, [r6, #0]
  4020a2:	6073      	str	r3, [r6, #4]
  4020a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4020a8:	428b      	cmp	r3, r1
  4020aa:	d907      	bls.n	4020bc <__udivmoddi4+0xc8>
  4020ac:	2e00      	cmp	r6, #0
  4020ae:	d054      	beq.n	40215a <__udivmoddi4+0x166>
  4020b0:	2100      	movs	r1, #0
  4020b2:	e886 0021 	stmia.w	r6, {r0, r5}
  4020b6:	4608      	mov	r0, r1
  4020b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4020bc:	fab3 f183 	clz	r1, r3
  4020c0:	2900      	cmp	r1, #0
  4020c2:	f040 808e 	bne.w	4021e2 <__udivmoddi4+0x1ee>
  4020c6:	42ab      	cmp	r3, r5
  4020c8:	d302      	bcc.n	4020d0 <__udivmoddi4+0xdc>
  4020ca:	4282      	cmp	r2, r0
  4020cc:	f200 80fa 	bhi.w	4022c4 <__udivmoddi4+0x2d0>
  4020d0:	1a84      	subs	r4, r0, r2
  4020d2:	eb65 0503 	sbc.w	r5, r5, r3
  4020d6:	2001      	movs	r0, #1
  4020d8:	46ac      	mov	ip, r5
  4020da:	2e00      	cmp	r6, #0
  4020dc:	d03f      	beq.n	40215e <__udivmoddi4+0x16a>
  4020de:	e886 1010 	stmia.w	r6, {r4, ip}
  4020e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4020e6:	b912      	cbnz	r2, 4020ee <__udivmoddi4+0xfa>
  4020e8:	2701      	movs	r7, #1
  4020ea:	fbb7 f7f2 	udiv	r7, r7, r2
  4020ee:	fab7 fe87 	clz	lr, r7
  4020f2:	f1be 0f00 	cmp.w	lr, #0
  4020f6:	d134      	bne.n	402162 <__udivmoddi4+0x16e>
  4020f8:	1beb      	subs	r3, r5, r7
  4020fa:	0c3a      	lsrs	r2, r7, #16
  4020fc:	fa1f fc87 	uxth.w	ip, r7
  402100:	2101      	movs	r1, #1
  402102:	fbb3 f8f2 	udiv	r8, r3, r2
  402106:	0c25      	lsrs	r5, r4, #16
  402108:	fb02 3318 	mls	r3, r2, r8, r3
  40210c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402110:	fb0c f308 	mul.w	r3, ip, r8
  402114:	42ab      	cmp	r3, r5
  402116:	d907      	bls.n	402128 <__udivmoddi4+0x134>
  402118:	19ed      	adds	r5, r5, r7
  40211a:	f108 30ff 	add.w	r0, r8, #4294967295
  40211e:	d202      	bcs.n	402126 <__udivmoddi4+0x132>
  402120:	42ab      	cmp	r3, r5
  402122:	f200 80d1 	bhi.w	4022c8 <__udivmoddi4+0x2d4>
  402126:	4680      	mov	r8, r0
  402128:	1aed      	subs	r5, r5, r3
  40212a:	b2a3      	uxth	r3, r4
  40212c:	fbb5 f0f2 	udiv	r0, r5, r2
  402130:	fb02 5510 	mls	r5, r2, r0, r5
  402134:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  402138:	fb0c fc00 	mul.w	ip, ip, r0
  40213c:	45a4      	cmp	ip, r4
  40213e:	d907      	bls.n	402150 <__udivmoddi4+0x15c>
  402140:	19e4      	adds	r4, r4, r7
  402142:	f100 33ff 	add.w	r3, r0, #4294967295
  402146:	d202      	bcs.n	40214e <__udivmoddi4+0x15a>
  402148:	45a4      	cmp	ip, r4
  40214a:	f200 80b8 	bhi.w	4022be <__udivmoddi4+0x2ca>
  40214e:	4618      	mov	r0, r3
  402150:	eba4 040c 	sub.w	r4, r4, ip
  402154:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402158:	e79d      	b.n	402096 <__udivmoddi4+0xa2>
  40215a:	4631      	mov	r1, r6
  40215c:	4630      	mov	r0, r6
  40215e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402162:	f1ce 0420 	rsb	r4, lr, #32
  402166:	fa05 f30e 	lsl.w	r3, r5, lr
  40216a:	fa07 f70e 	lsl.w	r7, r7, lr
  40216e:	fa20 f804 	lsr.w	r8, r0, r4
  402172:	0c3a      	lsrs	r2, r7, #16
  402174:	fa25 f404 	lsr.w	r4, r5, r4
  402178:	ea48 0803 	orr.w	r8, r8, r3
  40217c:	fbb4 f1f2 	udiv	r1, r4, r2
  402180:	ea4f 4518 	mov.w	r5, r8, lsr #16
  402184:	fb02 4411 	mls	r4, r2, r1, r4
  402188:	fa1f fc87 	uxth.w	ip, r7
  40218c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  402190:	fb01 f30c 	mul.w	r3, r1, ip
  402194:	42ab      	cmp	r3, r5
  402196:	fa00 f40e 	lsl.w	r4, r0, lr
  40219a:	d909      	bls.n	4021b0 <__udivmoddi4+0x1bc>
  40219c:	19ed      	adds	r5, r5, r7
  40219e:	f101 30ff 	add.w	r0, r1, #4294967295
  4021a2:	f080 808a 	bcs.w	4022ba <__udivmoddi4+0x2c6>
  4021a6:	42ab      	cmp	r3, r5
  4021a8:	f240 8087 	bls.w	4022ba <__udivmoddi4+0x2c6>
  4021ac:	3902      	subs	r1, #2
  4021ae:	443d      	add	r5, r7
  4021b0:	1aeb      	subs	r3, r5, r3
  4021b2:	fa1f f588 	uxth.w	r5, r8
  4021b6:	fbb3 f0f2 	udiv	r0, r3, r2
  4021ba:	fb02 3310 	mls	r3, r2, r0, r3
  4021be:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4021c2:	fb00 f30c 	mul.w	r3, r0, ip
  4021c6:	42ab      	cmp	r3, r5
  4021c8:	d907      	bls.n	4021da <__udivmoddi4+0x1e6>
  4021ca:	19ed      	adds	r5, r5, r7
  4021cc:	f100 38ff 	add.w	r8, r0, #4294967295
  4021d0:	d26f      	bcs.n	4022b2 <__udivmoddi4+0x2be>
  4021d2:	42ab      	cmp	r3, r5
  4021d4:	d96d      	bls.n	4022b2 <__udivmoddi4+0x2be>
  4021d6:	3802      	subs	r0, #2
  4021d8:	443d      	add	r5, r7
  4021da:	1aeb      	subs	r3, r5, r3
  4021dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4021e0:	e78f      	b.n	402102 <__udivmoddi4+0x10e>
  4021e2:	f1c1 0720 	rsb	r7, r1, #32
  4021e6:	fa22 f807 	lsr.w	r8, r2, r7
  4021ea:	408b      	lsls	r3, r1
  4021ec:	fa05 f401 	lsl.w	r4, r5, r1
  4021f0:	ea48 0303 	orr.w	r3, r8, r3
  4021f4:	fa20 fe07 	lsr.w	lr, r0, r7
  4021f8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4021fc:	40fd      	lsrs	r5, r7
  4021fe:	ea4e 0e04 	orr.w	lr, lr, r4
  402202:	fbb5 f9fc 	udiv	r9, r5, ip
  402206:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40220a:	fb0c 5519 	mls	r5, ip, r9, r5
  40220e:	fa1f f883 	uxth.w	r8, r3
  402212:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  402216:	fb09 f408 	mul.w	r4, r9, r8
  40221a:	42ac      	cmp	r4, r5
  40221c:	fa02 f201 	lsl.w	r2, r2, r1
  402220:	fa00 fa01 	lsl.w	sl, r0, r1
  402224:	d908      	bls.n	402238 <__udivmoddi4+0x244>
  402226:	18ed      	adds	r5, r5, r3
  402228:	f109 30ff 	add.w	r0, r9, #4294967295
  40222c:	d243      	bcs.n	4022b6 <__udivmoddi4+0x2c2>
  40222e:	42ac      	cmp	r4, r5
  402230:	d941      	bls.n	4022b6 <__udivmoddi4+0x2c2>
  402232:	f1a9 0902 	sub.w	r9, r9, #2
  402236:	441d      	add	r5, r3
  402238:	1b2d      	subs	r5, r5, r4
  40223a:	fa1f fe8e 	uxth.w	lr, lr
  40223e:	fbb5 f0fc 	udiv	r0, r5, ip
  402242:	fb0c 5510 	mls	r5, ip, r0, r5
  402246:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40224a:	fb00 f808 	mul.w	r8, r0, r8
  40224e:	45a0      	cmp	r8, r4
  402250:	d907      	bls.n	402262 <__udivmoddi4+0x26e>
  402252:	18e4      	adds	r4, r4, r3
  402254:	f100 35ff 	add.w	r5, r0, #4294967295
  402258:	d229      	bcs.n	4022ae <__udivmoddi4+0x2ba>
  40225a:	45a0      	cmp	r8, r4
  40225c:	d927      	bls.n	4022ae <__udivmoddi4+0x2ba>
  40225e:	3802      	subs	r0, #2
  402260:	441c      	add	r4, r3
  402262:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  402266:	eba4 0408 	sub.w	r4, r4, r8
  40226a:	fba0 8902 	umull	r8, r9, r0, r2
  40226e:	454c      	cmp	r4, r9
  402270:	46c6      	mov	lr, r8
  402272:	464d      	mov	r5, r9
  402274:	d315      	bcc.n	4022a2 <__udivmoddi4+0x2ae>
  402276:	d012      	beq.n	40229e <__udivmoddi4+0x2aa>
  402278:	b156      	cbz	r6, 402290 <__udivmoddi4+0x29c>
  40227a:	ebba 030e 	subs.w	r3, sl, lr
  40227e:	eb64 0405 	sbc.w	r4, r4, r5
  402282:	fa04 f707 	lsl.w	r7, r4, r7
  402286:	40cb      	lsrs	r3, r1
  402288:	431f      	orrs	r7, r3
  40228a:	40cc      	lsrs	r4, r1
  40228c:	6037      	str	r7, [r6, #0]
  40228e:	6074      	str	r4, [r6, #4]
  402290:	2100      	movs	r1, #0
  402292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402296:	4618      	mov	r0, r3
  402298:	e6f8      	b.n	40208c <__udivmoddi4+0x98>
  40229a:	4690      	mov	r8, r2
  40229c:	e6e0      	b.n	402060 <__udivmoddi4+0x6c>
  40229e:	45c2      	cmp	sl, r8
  4022a0:	d2ea      	bcs.n	402278 <__udivmoddi4+0x284>
  4022a2:	ebb8 0e02 	subs.w	lr, r8, r2
  4022a6:	eb69 0503 	sbc.w	r5, r9, r3
  4022aa:	3801      	subs	r0, #1
  4022ac:	e7e4      	b.n	402278 <__udivmoddi4+0x284>
  4022ae:	4628      	mov	r0, r5
  4022b0:	e7d7      	b.n	402262 <__udivmoddi4+0x26e>
  4022b2:	4640      	mov	r0, r8
  4022b4:	e791      	b.n	4021da <__udivmoddi4+0x1e6>
  4022b6:	4681      	mov	r9, r0
  4022b8:	e7be      	b.n	402238 <__udivmoddi4+0x244>
  4022ba:	4601      	mov	r1, r0
  4022bc:	e778      	b.n	4021b0 <__udivmoddi4+0x1bc>
  4022be:	3802      	subs	r0, #2
  4022c0:	443c      	add	r4, r7
  4022c2:	e745      	b.n	402150 <__udivmoddi4+0x15c>
  4022c4:	4608      	mov	r0, r1
  4022c6:	e708      	b.n	4020da <__udivmoddi4+0xe6>
  4022c8:	f1a8 0802 	sub.w	r8, r8, #2
  4022cc:	443d      	add	r5, r7
  4022ce:	e72b      	b.n	402128 <__udivmoddi4+0x134>

004022d0 <__aeabi_idiv0>:
  4022d0:	4770      	bx	lr
  4022d2:	bf00      	nop

004022d4 <__libc_init_array>:
  4022d4:	b570      	push	{r4, r5, r6, lr}
  4022d6:	4e0f      	ldr	r6, [pc, #60]	; (402314 <__libc_init_array+0x40>)
  4022d8:	4d0f      	ldr	r5, [pc, #60]	; (402318 <__libc_init_array+0x44>)
  4022da:	1b76      	subs	r6, r6, r5
  4022dc:	10b6      	asrs	r6, r6, #2
  4022de:	bf18      	it	ne
  4022e0:	2400      	movne	r4, #0
  4022e2:	d005      	beq.n	4022f0 <__libc_init_array+0x1c>
  4022e4:	3401      	adds	r4, #1
  4022e6:	f855 3b04 	ldr.w	r3, [r5], #4
  4022ea:	4798      	blx	r3
  4022ec:	42a6      	cmp	r6, r4
  4022ee:	d1f9      	bne.n	4022e4 <__libc_init_array+0x10>
  4022f0:	4e0a      	ldr	r6, [pc, #40]	; (40231c <__libc_init_array+0x48>)
  4022f2:	4d0b      	ldr	r5, [pc, #44]	; (402320 <__libc_init_array+0x4c>)
  4022f4:	1b76      	subs	r6, r6, r5
  4022f6:	f000 fc39 	bl	402b6c <_init>
  4022fa:	10b6      	asrs	r6, r6, #2
  4022fc:	bf18      	it	ne
  4022fe:	2400      	movne	r4, #0
  402300:	d006      	beq.n	402310 <__libc_init_array+0x3c>
  402302:	3401      	adds	r4, #1
  402304:	f855 3b04 	ldr.w	r3, [r5], #4
  402308:	4798      	blx	r3
  40230a:	42a6      	cmp	r6, r4
  40230c:	d1f9      	bne.n	402302 <__libc_init_array+0x2e>
  40230e:	bd70      	pop	{r4, r5, r6, pc}
  402310:	bd70      	pop	{r4, r5, r6, pc}
  402312:	bf00      	nop
  402314:	00402b78 	.word	0x00402b78
  402318:	00402b78 	.word	0x00402b78
  40231c:	00402b80 	.word	0x00402b80
  402320:	00402b78 	.word	0x00402b78

00402324 <critical_factorization>:
  402324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402328:	f04f 0e01 	mov.w	lr, #1
  40232c:	4674      	mov	r4, lr
  40232e:	2500      	movs	r5, #0
  402330:	f04f 36ff 	mov.w	r6, #4294967295
  402334:	192b      	adds	r3, r5, r4
  402336:	428b      	cmp	r3, r1
  402338:	eb00 0706 	add.w	r7, r0, r6
  40233c:	d20d      	bcs.n	40235a <critical_factorization+0x36>
  40233e:	5d3f      	ldrb	r7, [r7, r4]
  402340:	f810 c003 	ldrb.w	ip, [r0, r3]
  402344:	45bc      	cmp	ip, r7
  402346:	d22d      	bcs.n	4023a4 <critical_factorization+0x80>
  402348:	461d      	mov	r5, r3
  40234a:	2401      	movs	r4, #1
  40234c:	eba3 0e06 	sub.w	lr, r3, r6
  402350:	192b      	adds	r3, r5, r4
  402352:	428b      	cmp	r3, r1
  402354:	eb00 0706 	add.w	r7, r0, r6
  402358:	d3f1      	bcc.n	40233e <critical_factorization+0x1a>
  40235a:	f04f 0801 	mov.w	r8, #1
  40235e:	f8c2 e000 	str.w	lr, [r2]
  402362:	4644      	mov	r4, r8
  402364:	2500      	movs	r5, #0
  402366:	f04f 37ff 	mov.w	r7, #4294967295
  40236a:	192b      	adds	r3, r5, r4
  40236c:	4299      	cmp	r1, r3
  40236e:	eb00 0e07 	add.w	lr, r0, r7
  402372:	d90e      	bls.n	402392 <critical_factorization+0x6e>
  402374:	f81e e004 	ldrb.w	lr, [lr, r4]
  402378:	f810 c003 	ldrb.w	ip, [r0, r3]
  40237c:	45f4      	cmp	ip, lr
  40237e:	d918      	bls.n	4023b2 <critical_factorization+0x8e>
  402380:	461d      	mov	r5, r3
  402382:	2401      	movs	r4, #1
  402384:	eba3 0807 	sub.w	r8, r3, r7
  402388:	192b      	adds	r3, r5, r4
  40238a:	4299      	cmp	r1, r3
  40238c:	eb00 0e07 	add.w	lr, r0, r7
  402390:	d8f0      	bhi.n	402374 <critical_factorization+0x50>
  402392:	3701      	adds	r7, #1
  402394:	1c70      	adds	r0, r6, #1
  402396:	4287      	cmp	r7, r0
  402398:	bf24      	itt	cs
  40239a:	f8c2 8000 	strcs.w	r8, [r2]
  40239e:	4638      	movcs	r0, r7
  4023a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4023a4:	d00c      	beq.n	4023c0 <critical_factorization+0x9c>
  4023a6:	f04f 0e01 	mov.w	lr, #1
  4023aa:	462e      	mov	r6, r5
  4023ac:	4674      	mov	r4, lr
  4023ae:	4475      	add	r5, lr
  4023b0:	e7c0      	b.n	402334 <critical_factorization+0x10>
  4023b2:	d00b      	beq.n	4023cc <critical_factorization+0xa8>
  4023b4:	f04f 0801 	mov.w	r8, #1
  4023b8:	462f      	mov	r7, r5
  4023ba:	4644      	mov	r4, r8
  4023bc:	4445      	add	r5, r8
  4023be:	e7d4      	b.n	40236a <critical_factorization+0x46>
  4023c0:	4574      	cmp	r4, lr
  4023c2:	bf12      	itee	ne
  4023c4:	3401      	addne	r4, #1
  4023c6:	461d      	moveq	r5, r3
  4023c8:	2401      	moveq	r4, #1
  4023ca:	e7b3      	b.n	402334 <critical_factorization+0x10>
  4023cc:	4544      	cmp	r4, r8
  4023ce:	bf12      	itee	ne
  4023d0:	3401      	addne	r4, #1
  4023d2:	461d      	moveq	r5, r3
  4023d4:	2401      	moveq	r4, #1
  4023d6:	e7c8      	b.n	40236a <critical_factorization+0x46>

004023d8 <two_way_long_needle>:
  4023d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4023dc:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  4023e0:	4616      	mov	r6, r2
  4023e2:	4605      	mov	r5, r0
  4023e4:	468b      	mov	fp, r1
  4023e6:	4610      	mov	r0, r2
  4023e8:	4619      	mov	r1, r3
  4023ea:	aa03      	add	r2, sp, #12
  4023ec:	461c      	mov	r4, r3
  4023ee:	f7ff ff99 	bl	402324 <critical_factorization>
  4023f2:	ab03      	add	r3, sp, #12
  4023f4:	4681      	mov	r9, r0
  4023f6:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  4023fa:	f843 4f04 	str.w	r4, [r3, #4]!
  4023fe:	4293      	cmp	r3, r2
  402400:	d1fb      	bne.n	4023fa <two_way_long_needle+0x22>
  402402:	b14c      	cbz	r4, 402418 <two_way_long_needle+0x40>
  402404:	1e63      	subs	r3, r4, #1
  402406:	1e72      	subs	r2, r6, #1
  402408:	a804      	add	r0, sp, #16
  40240a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  40240e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  402412:	f113 33ff 	adds.w	r3, r3, #4294967295
  402416:	d2f8      	bcs.n	40240a <two_way_long_needle+0x32>
  402418:	9903      	ldr	r1, [sp, #12]
  40241a:	464a      	mov	r2, r9
  40241c:	4431      	add	r1, r6
  40241e:	4630      	mov	r0, r6
  402420:	f000 fa66 	bl	4028f0 <memcmp>
  402424:	2800      	cmp	r0, #0
  402426:	d16f      	bne.n	402508 <two_way_long_needle+0x130>
  402428:	f109 33ff 	add.w	r3, r9, #4294967295
  40242c:	9300      	str	r3, [sp, #0]
  40242e:	18f3      	adds	r3, r6, r3
  402430:	4682      	mov	sl, r0
  402432:	9301      	str	r3, [sp, #4]
  402434:	4623      	mov	r3, r4
  402436:	4680      	mov	r8, r0
  402438:	4654      	mov	r4, sl
  40243a:	4658      	mov	r0, fp
  40243c:	469a      	mov	sl, r3
  40243e:	eb08 070a 	add.w	r7, r8, sl
  402442:	1a3a      	subs	r2, r7, r0
  402444:	2100      	movs	r1, #0
  402446:	4428      	add	r0, r5
  402448:	f000 fa02 	bl	402850 <memchr>
  40244c:	2800      	cmp	r0, #0
  40244e:	d156      	bne.n	4024fe <two_way_long_needle+0x126>
  402450:	2f00      	cmp	r7, #0
  402452:	d054      	beq.n	4024fe <two_way_long_needle+0x126>
  402454:	19eb      	adds	r3, r5, r7
  402456:	aa04      	add	r2, sp, #16
  402458:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  40245c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  402460:	b14b      	cbz	r3, 402476 <two_way_long_needle+0x9e>
  402462:	b124      	cbz	r4, 40246e <two_way_long_needle+0x96>
  402464:	9a03      	ldr	r2, [sp, #12]
  402466:	4293      	cmp	r3, r2
  402468:	d201      	bcs.n	40246e <two_way_long_needle+0x96>
  40246a:	ebaa 0302 	sub.w	r3, sl, r2
  40246e:	4498      	add	r8, r3
  402470:	2400      	movs	r4, #0
  402472:	4638      	mov	r0, r7
  402474:	e7e3      	b.n	40243e <two_way_long_needle+0x66>
  402476:	454c      	cmp	r4, r9
  402478:	4623      	mov	r3, r4
  40247a:	f10a 3eff 	add.w	lr, sl, #4294967295
  40247e:	bf38      	it	cc
  402480:	464b      	movcc	r3, r9
  402482:	4573      	cmp	r3, lr
  402484:	d213      	bcs.n	4024ae <two_way_long_needle+0xd6>
  402486:	eb08 0203 	add.w	r2, r8, r3
  40248a:	f816 c003 	ldrb.w	ip, [r6, r3]
  40248e:	5ca8      	ldrb	r0, [r5, r2]
  402490:	4584      	cmp	ip, r0
  402492:	442a      	add	r2, r5
  402494:	eb06 0103 	add.w	r1, r6, r3
  402498:	d006      	beq.n	4024a8 <two_way_long_needle+0xd0>
  40249a:	e02c      	b.n	4024f6 <two_way_long_needle+0x11e>
  40249c:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  4024a0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  4024a4:	4584      	cmp	ip, r0
  4024a6:	d126      	bne.n	4024f6 <two_way_long_needle+0x11e>
  4024a8:	3301      	adds	r3, #1
  4024aa:	4573      	cmp	r3, lr
  4024ac:	d3f6      	bcc.n	40249c <two_way_long_needle+0xc4>
  4024ae:	454c      	cmp	r4, r9
  4024b0:	9900      	ldr	r1, [sp, #0]
  4024b2:	f080 8089 	bcs.w	4025c8 <two_way_long_needle+0x1f0>
  4024b6:	9b00      	ldr	r3, [sp, #0]
  4024b8:	eb08 0203 	add.w	r2, r8, r3
  4024bc:	9b01      	ldr	r3, [sp, #4]
  4024be:	5ca8      	ldrb	r0, [r5, r2]
  4024c0:	781b      	ldrb	r3, [r3, #0]
  4024c2:	4298      	cmp	r0, r3
  4024c4:	442a      	add	r2, r5
  4024c6:	d17f      	bne.n	4025c8 <two_way_long_needle+0x1f0>
  4024c8:	9801      	ldr	r0, [sp, #4]
  4024ca:	f104 3bff 	add.w	fp, r4, #4294967295
  4024ce:	e006      	b.n	4024de <two_way_long_needle+0x106>
  4024d0:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  4024d4:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  4024d8:	45f4      	cmp	ip, lr
  4024da:	d103      	bne.n	4024e4 <two_way_long_needle+0x10c>
  4024dc:	4619      	mov	r1, r3
  4024de:	1e4b      	subs	r3, r1, #1
  4024e0:	459b      	cmp	fp, r3
  4024e2:	d1f5      	bne.n	4024d0 <two_way_long_needle+0xf8>
  4024e4:	3401      	adds	r4, #1
  4024e6:	428c      	cmp	r4, r1
  4024e8:	d870      	bhi.n	4025cc <two_way_long_needle+0x1f4>
  4024ea:	9c03      	ldr	r4, [sp, #12]
  4024ec:	4638      	mov	r0, r7
  4024ee:	44a0      	add	r8, r4
  4024f0:	ebaa 0404 	sub.w	r4, sl, r4
  4024f4:	e7a3      	b.n	40243e <two_way_long_needle+0x66>
  4024f6:	f1c9 0201 	rsb	r2, r9, #1
  4024fa:	4490      	add	r8, r2
  4024fc:	e7b7      	b.n	40246e <two_way_long_needle+0x96>
  4024fe:	2000      	movs	r0, #0
  402500:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  402504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402508:	eba4 0309 	sub.w	r3, r4, r9
  40250c:	454b      	cmp	r3, r9
  40250e:	bf38      	it	cc
  402510:	464b      	movcc	r3, r9
  402512:	3301      	adds	r3, #1
  402514:	f109 38ff 	add.w	r8, r9, #4294967295
  402518:	9303      	str	r3, [sp, #12]
  40251a:	eb06 0308 	add.w	r3, r6, r8
  40251e:	4658      	mov	r0, fp
  402520:	f04f 0a00 	mov.w	sl, #0
  402524:	46cb      	mov	fp, r9
  402526:	4699      	mov	r9, r3
  402528:	eb0a 0704 	add.w	r7, sl, r4
  40252c:	1a3a      	subs	r2, r7, r0
  40252e:	2100      	movs	r1, #0
  402530:	4428      	add	r0, r5
  402532:	f000 f98d 	bl	402850 <memchr>
  402536:	2800      	cmp	r0, #0
  402538:	d1e1      	bne.n	4024fe <two_way_long_needle+0x126>
  40253a:	2f00      	cmp	r7, #0
  40253c:	d0df      	beq.n	4024fe <two_way_long_needle+0x126>
  40253e:	19eb      	adds	r3, r5, r7
  402540:	aa04      	add	r2, sp, #16
  402542:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  402546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40254a:	bba3      	cbnz	r3, 4025b6 <two_way_long_needle+0x1de>
  40254c:	1e61      	subs	r1, r4, #1
  40254e:	458b      	cmp	fp, r1
  402550:	d215      	bcs.n	40257e <two_way_long_needle+0x1a6>
  402552:	eb0a 020b 	add.w	r2, sl, fp
  402556:	f816 300b 	ldrb.w	r3, [r6, fp]
  40255a:	f815 e002 	ldrb.w	lr, [r5, r2]
  40255e:	459e      	cmp	lr, r3
  402560:	442a      	add	r2, r5
  402562:	eb06 000b 	add.w	r0, r6, fp
  402566:	465b      	mov	r3, fp
  402568:	d006      	beq.n	402578 <two_way_long_needle+0x1a0>
  40256a:	e027      	b.n	4025bc <two_way_long_needle+0x1e4>
  40256c:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  402570:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  402574:	45f4      	cmp	ip, lr
  402576:	d121      	bne.n	4025bc <two_way_long_needle+0x1e4>
  402578:	3301      	adds	r3, #1
  40257a:	428b      	cmp	r3, r1
  40257c:	d3f6      	bcc.n	40256c <two_way_long_needle+0x194>
  40257e:	f1b8 3fff 	cmp.w	r8, #4294967295
  402582:	d011      	beq.n	4025a8 <two_way_long_needle+0x1d0>
  402584:	eb0a 0208 	add.w	r2, sl, r8
  402588:	f899 1000 	ldrb.w	r1, [r9]
  40258c:	5cab      	ldrb	r3, [r5, r2]
  40258e:	4299      	cmp	r1, r3
  402590:	442a      	add	r2, r5
  402592:	d10f      	bne.n	4025b4 <two_way_long_needle+0x1dc>
  402594:	464b      	mov	r3, r9
  402596:	e005      	b.n	4025a4 <two_way_long_needle+0x1cc>
  402598:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  40259c:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  4025a0:	4288      	cmp	r0, r1
  4025a2:	d107      	bne.n	4025b4 <two_way_long_needle+0x1dc>
  4025a4:	42b3      	cmp	r3, r6
  4025a6:	d1f7      	bne.n	402598 <two_way_long_needle+0x1c0>
  4025a8:	eb05 000a 	add.w	r0, r5, sl
  4025ac:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  4025b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4025b4:	9b03      	ldr	r3, [sp, #12]
  4025b6:	449a      	add	sl, r3
  4025b8:	4638      	mov	r0, r7
  4025ba:	e7b5      	b.n	402528 <two_way_long_needle+0x150>
  4025bc:	f1cb 0201 	rsb	r2, fp, #1
  4025c0:	4492      	add	sl, r2
  4025c2:	449a      	add	sl, r3
  4025c4:	4638      	mov	r0, r7
  4025c6:	e7af      	b.n	402528 <two_way_long_needle+0x150>
  4025c8:	4649      	mov	r1, r9
  4025ca:	e78b      	b.n	4024e4 <two_way_long_needle+0x10c>
  4025cc:	eb05 0008 	add.w	r0, r5, r8
  4025d0:	e796      	b.n	402500 <two_way_long_needle+0x128>
  4025d2:	bf00      	nop

004025d4 <strstr>:
  4025d4:	7802      	ldrb	r2, [r0, #0]
  4025d6:	2a00      	cmp	r2, #0
  4025d8:	f000 8101 	beq.w	4027de <strstr+0x20a>
  4025dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4025e0:	f891 8000 	ldrb.w	r8, [r1]
  4025e4:	b085      	sub	sp, #20
  4025e6:	4644      	mov	r4, r8
  4025e8:	f1b8 0f00 	cmp.w	r8, #0
  4025ec:	d016      	beq.n	40261c <strstr+0x48>
  4025ee:	4686      	mov	lr, r0
  4025f0:	f101 0c01 	add.w	ip, r1, #1
  4025f4:	2701      	movs	r7, #1
  4025f6:	e003      	b.n	402600 <strstr+0x2c>
  4025f8:	f813 4b01 	ldrb.w	r4, [r3], #1
  4025fc:	b16c      	cbz	r4, 40261a <strstr+0x46>
  4025fe:	469c      	mov	ip, r3
  402600:	42a2      	cmp	r2, r4
  402602:	bf14      	ite	ne
  402604:	2700      	movne	r7, #0
  402606:	f007 0701 	andeq.w	r7, r7, #1
  40260a:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  40260e:	4663      	mov	r3, ip
  402610:	2a00      	cmp	r2, #0
  402612:	d1f1      	bne.n	4025f8 <strstr+0x24>
  402614:	f89c 3000 	ldrb.w	r3, [ip]
  402618:	b9fb      	cbnz	r3, 40265a <strstr+0x86>
  40261a:	b117      	cbz	r7, 402622 <strstr+0x4e>
  40261c:	b005      	add	sp, #20
  40261e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402622:	460e      	mov	r6, r1
  402624:	4605      	mov	r5, r0
  402626:	4641      	mov	r1, r8
  402628:	3001      	adds	r0, #1
  40262a:	ebac 0406 	sub.w	r4, ip, r6
  40262e:	f000 f98f 	bl	402950 <strchr>
  402632:	4607      	mov	r7, r0
  402634:	b188      	cbz	r0, 40265a <strstr+0x86>
  402636:	2c01      	cmp	r4, #1
  402638:	d0f0      	beq.n	40261c <strstr+0x48>
  40263a:	1928      	adds	r0, r5, r4
  40263c:	4287      	cmp	r7, r0
  40263e:	bf94      	ite	ls
  402640:	1bc1      	subls	r1, r0, r7
  402642:	2101      	movhi	r1, #1
  402644:	2c1f      	cmp	r4, #31
  402646:	468b      	mov	fp, r1
  402648:	d90b      	bls.n	402662 <strstr+0x8e>
  40264a:	4623      	mov	r3, r4
  40264c:	4632      	mov	r2, r6
  40264e:	4638      	mov	r0, r7
  402650:	f7ff fec2 	bl	4023d8 <two_way_long_needle>
  402654:	b005      	add	sp, #20
  402656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40265a:	2000      	movs	r0, #0
  40265c:	b005      	add	sp, #20
  40265e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402662:	aa03      	add	r2, sp, #12
  402664:	4621      	mov	r1, r4
  402666:	4630      	mov	r0, r6
  402668:	f7ff fe5c 	bl	402324 <critical_factorization>
  40266c:	9903      	ldr	r1, [sp, #12]
  40266e:	4680      	mov	r8, r0
  402670:	4602      	mov	r2, r0
  402672:	4431      	add	r1, r6
  402674:	4630      	mov	r0, r6
  402676:	f000 f93b 	bl	4028f0 <memcmp>
  40267a:	2800      	cmp	r0, #0
  40267c:	d157      	bne.n	40272e <strstr+0x15a>
  40267e:	f108 33ff 	add.w	r3, r8, #4294967295
  402682:	9300      	str	r3, [sp, #0]
  402684:	18f3      	adds	r3, r6, r3
  402686:	4681      	mov	r9, r0
  402688:	4605      	mov	r5, r0
  40268a:	9301      	str	r3, [sp, #4]
  40268c:	4658      	mov	r0, fp
  40268e:	46b2      	mov	sl, r6
  402690:	1966      	adds	r6, r4, r5
  402692:	1a32      	subs	r2, r6, r0
  402694:	2100      	movs	r1, #0
  402696:	4438      	add	r0, r7
  402698:	f000 f8da 	bl	402850 <memchr>
  40269c:	2800      	cmp	r0, #0
  40269e:	d1dc      	bne.n	40265a <strstr+0x86>
  4026a0:	2e00      	cmp	r6, #0
  4026a2:	d0da      	beq.n	40265a <strstr+0x86>
  4026a4:	45c8      	cmp	r8, r9
  4026a6:	4643      	mov	r3, r8
  4026a8:	bf38      	it	cc
  4026aa:	464b      	movcc	r3, r9
  4026ac:	429c      	cmp	r4, r3
  4026ae:	d912      	bls.n	4026d6 <strstr+0x102>
  4026b0:	195a      	adds	r2, r3, r5
  4026b2:	f81a 1003 	ldrb.w	r1, [sl, r3]
  4026b6:	5cb8      	ldrb	r0, [r7, r2]
  4026b8:	4281      	cmp	r1, r0
  4026ba:	443a      	add	r2, r7
  4026bc:	eb0a 0e03 	add.w	lr, sl, r3
  4026c0:	d006      	beq.n	4026d0 <strstr+0xfc>
  4026c2:	e02c      	b.n	40271e <strstr+0x14a>
  4026c4:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  4026c8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  4026cc:	4288      	cmp	r0, r1
  4026ce:	d126      	bne.n	40271e <strstr+0x14a>
  4026d0:	3301      	adds	r3, #1
  4026d2:	429c      	cmp	r4, r3
  4026d4:	d1f6      	bne.n	4026c4 <strstr+0xf0>
  4026d6:	45c8      	cmp	r8, r9
  4026d8:	9900      	ldr	r1, [sp, #0]
  4026da:	f240 8083 	bls.w	4027e4 <strstr+0x210>
  4026de:	9b00      	ldr	r3, [sp, #0]
  4026e0:	18ea      	adds	r2, r5, r3
  4026e2:	9b01      	ldr	r3, [sp, #4]
  4026e4:	5cb8      	ldrb	r0, [r7, r2]
  4026e6:	781b      	ldrb	r3, [r3, #0]
  4026e8:	4298      	cmp	r0, r3
  4026ea:	443a      	add	r2, r7
  4026ec:	d17a      	bne.n	4027e4 <strstr+0x210>
  4026ee:	9801      	ldr	r0, [sp, #4]
  4026f0:	f109 3bff 	add.w	fp, r9, #4294967295
  4026f4:	e006      	b.n	402704 <strstr+0x130>
  4026f6:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  4026fa:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  4026fe:	45f4      	cmp	ip, lr
  402700:	d103      	bne.n	40270a <strstr+0x136>
  402702:	4619      	mov	r1, r3
  402704:	1e4b      	subs	r3, r1, #1
  402706:	455b      	cmp	r3, fp
  402708:	d1f5      	bne.n	4026f6 <strstr+0x122>
  40270a:	f109 0901 	add.w	r9, r9, #1
  40270e:	4589      	cmp	r9, r1
  402710:	d857      	bhi.n	4027c2 <strstr+0x1ee>
  402712:	9b03      	ldr	r3, [sp, #12]
  402714:	4630      	mov	r0, r6
  402716:	441d      	add	r5, r3
  402718:	eba4 0903 	sub.w	r9, r4, r3
  40271c:	e7b8      	b.n	402690 <strstr+0xbc>
  40271e:	f1c8 0201 	rsb	r2, r8, #1
  402722:	4415      	add	r5, r2
  402724:	441d      	add	r5, r3
  402726:	f04f 0900 	mov.w	r9, #0
  40272a:	4630      	mov	r0, r6
  40272c:	e7b0      	b.n	402690 <strstr+0xbc>
  40272e:	eba4 0308 	sub.w	r3, r4, r8
  402732:	4543      	cmp	r3, r8
  402734:	bf38      	it	cc
  402736:	4643      	movcc	r3, r8
  402738:	3301      	adds	r3, #1
  40273a:	f108 39ff 	add.w	r9, r8, #4294967295
  40273e:	9303      	str	r3, [sp, #12]
  402740:	eb06 0309 	add.w	r3, r6, r9
  402744:	4658      	mov	r0, fp
  402746:	2500      	movs	r5, #0
  402748:	46bb      	mov	fp, r7
  40274a:	469a      	mov	sl, r3
  40274c:	1967      	adds	r7, r4, r5
  40274e:	1a3a      	subs	r2, r7, r0
  402750:	2100      	movs	r1, #0
  402752:	4458      	add	r0, fp
  402754:	f000 f87c 	bl	402850 <memchr>
  402758:	2800      	cmp	r0, #0
  40275a:	f47f af7e 	bne.w	40265a <strstr+0x86>
  40275e:	2f00      	cmp	r7, #0
  402760:	f43f af7b 	beq.w	40265a <strstr+0x86>
  402764:	4544      	cmp	r4, r8
  402766:	d915      	bls.n	402794 <strstr+0x1c0>
  402768:	eb08 0205 	add.w	r2, r8, r5
  40276c:	f816 3008 	ldrb.w	r3, [r6, r8]
  402770:	f81b 0002 	ldrb.w	r0, [fp, r2]
  402774:	4298      	cmp	r0, r3
  402776:	445a      	add	r2, fp
  402778:	eb06 0108 	add.w	r1, r6, r8
  40277c:	4643      	mov	r3, r8
  40277e:	d006      	beq.n	40278e <strstr+0x1ba>
  402780:	e023      	b.n	4027ca <strstr+0x1f6>
  402782:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  402786:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  40278a:	4586      	cmp	lr, r0
  40278c:	d11d      	bne.n	4027ca <strstr+0x1f6>
  40278e:	3301      	adds	r3, #1
  402790:	429c      	cmp	r4, r3
  402792:	d1f6      	bne.n	402782 <strstr+0x1ae>
  402794:	f1b9 3fff 	cmp.w	r9, #4294967295
  402798:	d012      	beq.n	4027c0 <strstr+0x1ec>
  40279a:	eb05 0209 	add.w	r2, r5, r9
  40279e:	f89a 3000 	ldrb.w	r3, [sl]
  4027a2:	f81b 1002 	ldrb.w	r1, [fp, r2]
  4027a6:	4299      	cmp	r1, r3
  4027a8:	445a      	add	r2, fp
  4027aa:	d114      	bne.n	4027d6 <strstr+0x202>
  4027ac:	4653      	mov	r3, sl
  4027ae:	e005      	b.n	4027bc <strstr+0x1e8>
  4027b0:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  4027b4:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  4027b8:	4288      	cmp	r0, r1
  4027ba:	d10c      	bne.n	4027d6 <strstr+0x202>
  4027bc:	42b3      	cmp	r3, r6
  4027be:	d1f7      	bne.n	4027b0 <strstr+0x1dc>
  4027c0:	465f      	mov	r7, fp
  4027c2:	1978      	adds	r0, r7, r5
  4027c4:	b005      	add	sp, #20
  4027c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4027ca:	f1c8 0201 	rsb	r2, r8, #1
  4027ce:	4415      	add	r5, r2
  4027d0:	441d      	add	r5, r3
  4027d2:	4638      	mov	r0, r7
  4027d4:	e7ba      	b.n	40274c <strstr+0x178>
  4027d6:	9b03      	ldr	r3, [sp, #12]
  4027d8:	4638      	mov	r0, r7
  4027da:	441d      	add	r5, r3
  4027dc:	e7b6      	b.n	40274c <strstr+0x178>
  4027de:	780b      	ldrb	r3, [r1, #0]
  4027e0:	b913      	cbnz	r3, 4027e8 <strstr+0x214>
  4027e2:	4770      	bx	lr
  4027e4:	4641      	mov	r1, r8
  4027e6:	e790      	b.n	40270a <strstr+0x136>
  4027e8:	2000      	movs	r0, #0
  4027ea:	4770      	bx	lr

004027ec <register_fini>:
  4027ec:	4b02      	ldr	r3, [pc, #8]	; (4027f8 <register_fini+0xc>)
  4027ee:	b113      	cbz	r3, 4027f6 <register_fini+0xa>
  4027f0:	4802      	ldr	r0, [pc, #8]	; (4027fc <register_fini+0x10>)
  4027f2:	f000 b805 	b.w	402800 <atexit>
  4027f6:	4770      	bx	lr
  4027f8:	00000000 	.word	0x00000000
  4027fc:	0040280d 	.word	0x0040280d

00402800 <atexit>:
  402800:	2300      	movs	r3, #0
  402802:	4601      	mov	r1, r0
  402804:	461a      	mov	r2, r3
  402806:	4618      	mov	r0, r3
  402808:	f000 b916 	b.w	402a38 <__register_exitproc>

0040280c <__libc_fini_array>:
  40280c:	b538      	push	{r3, r4, r5, lr}
  40280e:	4c0a      	ldr	r4, [pc, #40]	; (402838 <__libc_fini_array+0x2c>)
  402810:	4d0a      	ldr	r5, [pc, #40]	; (40283c <__libc_fini_array+0x30>)
  402812:	1b64      	subs	r4, r4, r5
  402814:	10a4      	asrs	r4, r4, #2
  402816:	d00a      	beq.n	40282e <__libc_fini_array+0x22>
  402818:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40281c:	3b01      	subs	r3, #1
  40281e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402822:	3c01      	subs	r4, #1
  402824:	f855 3904 	ldr.w	r3, [r5], #-4
  402828:	4798      	blx	r3
  40282a:	2c00      	cmp	r4, #0
  40282c:	d1f9      	bne.n	402822 <__libc_fini_array+0x16>
  40282e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402832:	f000 b9a5 	b.w	402b80 <_fini>
  402836:	bf00      	nop
  402838:	00402b90 	.word	0x00402b90
  40283c:	00402b8c 	.word	0x00402b8c

00402840 <__retarget_lock_acquire_recursive>:
  402840:	4770      	bx	lr
  402842:	bf00      	nop

00402844 <__retarget_lock_release_recursive>:
  402844:	4770      	bx	lr
  402846:	bf00      	nop
	...

00402850 <memchr>:
  402850:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  402854:	2a10      	cmp	r2, #16
  402856:	db2b      	blt.n	4028b0 <memchr+0x60>
  402858:	f010 0f07 	tst.w	r0, #7
  40285c:	d008      	beq.n	402870 <memchr+0x20>
  40285e:	f810 3b01 	ldrb.w	r3, [r0], #1
  402862:	3a01      	subs	r2, #1
  402864:	428b      	cmp	r3, r1
  402866:	d02d      	beq.n	4028c4 <memchr+0x74>
  402868:	f010 0f07 	tst.w	r0, #7
  40286c:	b342      	cbz	r2, 4028c0 <memchr+0x70>
  40286e:	d1f6      	bne.n	40285e <memchr+0xe>
  402870:	b4f0      	push	{r4, r5, r6, r7}
  402872:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  402876:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40287a:	f022 0407 	bic.w	r4, r2, #7
  40287e:	f07f 0700 	mvns.w	r7, #0
  402882:	2300      	movs	r3, #0
  402884:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  402888:	3c08      	subs	r4, #8
  40288a:	ea85 0501 	eor.w	r5, r5, r1
  40288e:	ea86 0601 	eor.w	r6, r6, r1
  402892:	fa85 f547 	uadd8	r5, r5, r7
  402896:	faa3 f587 	sel	r5, r3, r7
  40289a:	fa86 f647 	uadd8	r6, r6, r7
  40289e:	faa5 f687 	sel	r6, r5, r7
  4028a2:	b98e      	cbnz	r6, 4028c8 <memchr+0x78>
  4028a4:	d1ee      	bne.n	402884 <memchr+0x34>
  4028a6:	bcf0      	pop	{r4, r5, r6, r7}
  4028a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4028ac:	f002 0207 	and.w	r2, r2, #7
  4028b0:	b132      	cbz	r2, 4028c0 <memchr+0x70>
  4028b2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4028b6:	3a01      	subs	r2, #1
  4028b8:	ea83 0301 	eor.w	r3, r3, r1
  4028bc:	b113      	cbz	r3, 4028c4 <memchr+0x74>
  4028be:	d1f8      	bne.n	4028b2 <memchr+0x62>
  4028c0:	2000      	movs	r0, #0
  4028c2:	4770      	bx	lr
  4028c4:	3801      	subs	r0, #1
  4028c6:	4770      	bx	lr
  4028c8:	2d00      	cmp	r5, #0
  4028ca:	bf06      	itte	eq
  4028cc:	4635      	moveq	r5, r6
  4028ce:	3803      	subeq	r0, #3
  4028d0:	3807      	subne	r0, #7
  4028d2:	f015 0f01 	tst.w	r5, #1
  4028d6:	d107      	bne.n	4028e8 <memchr+0x98>
  4028d8:	3001      	adds	r0, #1
  4028da:	f415 7f80 	tst.w	r5, #256	; 0x100
  4028de:	bf02      	ittt	eq
  4028e0:	3001      	addeq	r0, #1
  4028e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4028e6:	3001      	addeq	r0, #1
  4028e8:	bcf0      	pop	{r4, r5, r6, r7}
  4028ea:	3801      	subs	r0, #1
  4028ec:	4770      	bx	lr
  4028ee:	bf00      	nop

004028f0 <memcmp>:
  4028f0:	2a03      	cmp	r2, #3
  4028f2:	b470      	push	{r4, r5, r6}
  4028f4:	d922      	bls.n	40293c <memcmp+0x4c>
  4028f6:	ea40 0301 	orr.w	r3, r0, r1
  4028fa:	079b      	lsls	r3, r3, #30
  4028fc:	d011      	beq.n	402922 <memcmp+0x32>
  4028fe:	7803      	ldrb	r3, [r0, #0]
  402900:	780c      	ldrb	r4, [r1, #0]
  402902:	42a3      	cmp	r3, r4
  402904:	d11d      	bne.n	402942 <memcmp+0x52>
  402906:	440a      	add	r2, r1
  402908:	3101      	adds	r1, #1
  40290a:	e005      	b.n	402918 <memcmp+0x28>
  40290c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  402910:	f811 4b01 	ldrb.w	r4, [r1], #1
  402914:	42a3      	cmp	r3, r4
  402916:	d114      	bne.n	402942 <memcmp+0x52>
  402918:	4291      	cmp	r1, r2
  40291a:	d1f7      	bne.n	40290c <memcmp+0x1c>
  40291c:	2000      	movs	r0, #0
  40291e:	bc70      	pop	{r4, r5, r6}
  402920:	4770      	bx	lr
  402922:	680d      	ldr	r5, [r1, #0]
  402924:	6806      	ldr	r6, [r0, #0]
  402926:	42ae      	cmp	r6, r5
  402928:	460c      	mov	r4, r1
  40292a:	4603      	mov	r3, r0
  40292c:	f101 0104 	add.w	r1, r1, #4
  402930:	f100 0004 	add.w	r0, r0, #4
  402934:	d108      	bne.n	402948 <memcmp+0x58>
  402936:	3a04      	subs	r2, #4
  402938:	2a03      	cmp	r2, #3
  40293a:	d8f2      	bhi.n	402922 <memcmp+0x32>
  40293c:	2a00      	cmp	r2, #0
  40293e:	d1de      	bne.n	4028fe <memcmp+0xe>
  402940:	e7ec      	b.n	40291c <memcmp+0x2c>
  402942:	1b18      	subs	r0, r3, r4
  402944:	bc70      	pop	{r4, r5, r6}
  402946:	4770      	bx	lr
  402948:	4621      	mov	r1, r4
  40294a:	4618      	mov	r0, r3
  40294c:	e7d7      	b.n	4028fe <memcmp+0xe>
  40294e:	bf00      	nop

00402950 <strchr>:
  402950:	b2c9      	uxtb	r1, r1
  402952:	2900      	cmp	r1, #0
  402954:	d041      	beq.n	4029da <strchr+0x8a>
  402956:	0782      	lsls	r2, r0, #30
  402958:	b4f0      	push	{r4, r5, r6, r7}
  40295a:	d067      	beq.n	402a2c <strchr+0xdc>
  40295c:	7803      	ldrb	r3, [r0, #0]
  40295e:	2b00      	cmp	r3, #0
  402960:	d068      	beq.n	402a34 <strchr+0xe4>
  402962:	4299      	cmp	r1, r3
  402964:	d037      	beq.n	4029d6 <strchr+0x86>
  402966:	1c43      	adds	r3, r0, #1
  402968:	e004      	b.n	402974 <strchr+0x24>
  40296a:	f813 0b01 	ldrb.w	r0, [r3], #1
  40296e:	b390      	cbz	r0, 4029d6 <strchr+0x86>
  402970:	4281      	cmp	r1, r0
  402972:	d02f      	beq.n	4029d4 <strchr+0x84>
  402974:	079a      	lsls	r2, r3, #30
  402976:	461c      	mov	r4, r3
  402978:	d1f7      	bne.n	40296a <strchr+0x1a>
  40297a:	6825      	ldr	r5, [r4, #0]
  40297c:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  402980:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  402984:	ea83 0605 	eor.w	r6, r3, r5
  402988:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  40298c:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  402990:	ea20 0006 	bic.w	r0, r0, r6
  402994:	ea22 0205 	bic.w	r2, r2, r5
  402998:	4302      	orrs	r2, r0
  40299a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40299e:	d111      	bne.n	4029c4 <strchr+0x74>
  4029a0:	4620      	mov	r0, r4
  4029a2:	f850 6f04 	ldr.w	r6, [r0, #4]!
  4029a6:	ea83 0706 	eor.w	r7, r3, r6
  4029aa:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  4029ae:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  4029b2:	ea25 0507 	bic.w	r5, r5, r7
  4029b6:	ea22 0206 	bic.w	r2, r2, r6
  4029ba:	432a      	orrs	r2, r5
  4029bc:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4029c0:	d0ef      	beq.n	4029a2 <strchr+0x52>
  4029c2:	4604      	mov	r4, r0
  4029c4:	7820      	ldrb	r0, [r4, #0]
  4029c6:	b918      	cbnz	r0, 4029d0 <strchr+0x80>
  4029c8:	e005      	b.n	4029d6 <strchr+0x86>
  4029ca:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  4029ce:	b110      	cbz	r0, 4029d6 <strchr+0x86>
  4029d0:	4281      	cmp	r1, r0
  4029d2:	d1fa      	bne.n	4029ca <strchr+0x7a>
  4029d4:	4620      	mov	r0, r4
  4029d6:	bcf0      	pop	{r4, r5, r6, r7}
  4029d8:	4770      	bx	lr
  4029da:	0783      	lsls	r3, r0, #30
  4029dc:	d024      	beq.n	402a28 <strchr+0xd8>
  4029de:	7803      	ldrb	r3, [r0, #0]
  4029e0:	2b00      	cmp	r3, #0
  4029e2:	d0f9      	beq.n	4029d8 <strchr+0x88>
  4029e4:	1c43      	adds	r3, r0, #1
  4029e6:	e003      	b.n	4029f0 <strchr+0xa0>
  4029e8:	7802      	ldrb	r2, [r0, #0]
  4029ea:	3301      	adds	r3, #1
  4029ec:	2a00      	cmp	r2, #0
  4029ee:	d0f3      	beq.n	4029d8 <strchr+0x88>
  4029f0:	0799      	lsls	r1, r3, #30
  4029f2:	4618      	mov	r0, r3
  4029f4:	d1f8      	bne.n	4029e8 <strchr+0x98>
  4029f6:	6819      	ldr	r1, [r3, #0]
  4029f8:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  4029fc:	ea22 0201 	bic.w	r2, r2, r1
  402a00:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402a04:	d108      	bne.n	402a18 <strchr+0xc8>
  402a06:	f853 1f04 	ldr.w	r1, [r3, #4]!
  402a0a:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  402a0e:	ea22 0201 	bic.w	r2, r2, r1
  402a12:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402a16:	d0f6      	beq.n	402a06 <strchr+0xb6>
  402a18:	781a      	ldrb	r2, [r3, #0]
  402a1a:	4618      	mov	r0, r3
  402a1c:	b142      	cbz	r2, 402a30 <strchr+0xe0>
  402a1e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  402a22:	2b00      	cmp	r3, #0
  402a24:	d1fb      	bne.n	402a1e <strchr+0xce>
  402a26:	4770      	bx	lr
  402a28:	4603      	mov	r3, r0
  402a2a:	e7e4      	b.n	4029f6 <strchr+0xa6>
  402a2c:	4604      	mov	r4, r0
  402a2e:	e7a4      	b.n	40297a <strchr+0x2a>
  402a30:	4618      	mov	r0, r3
  402a32:	4770      	bx	lr
  402a34:	4618      	mov	r0, r3
  402a36:	e7ce      	b.n	4029d6 <strchr+0x86>

00402a38 <__register_exitproc>:
  402a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402a3c:	4d2c      	ldr	r5, [pc, #176]	; (402af0 <__register_exitproc+0xb8>)
  402a3e:	4606      	mov	r6, r0
  402a40:	6828      	ldr	r0, [r5, #0]
  402a42:	4698      	mov	r8, r3
  402a44:	460f      	mov	r7, r1
  402a46:	4691      	mov	r9, r2
  402a48:	f7ff fefa 	bl	402840 <__retarget_lock_acquire_recursive>
  402a4c:	4b29      	ldr	r3, [pc, #164]	; (402af4 <__register_exitproc+0xbc>)
  402a4e:	681c      	ldr	r4, [r3, #0]
  402a50:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  402a54:	2b00      	cmp	r3, #0
  402a56:	d03e      	beq.n	402ad6 <__register_exitproc+0x9e>
  402a58:	685a      	ldr	r2, [r3, #4]
  402a5a:	2a1f      	cmp	r2, #31
  402a5c:	dc1c      	bgt.n	402a98 <__register_exitproc+0x60>
  402a5e:	f102 0e01 	add.w	lr, r2, #1
  402a62:	b176      	cbz	r6, 402a82 <__register_exitproc+0x4a>
  402a64:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  402a68:	2401      	movs	r4, #1
  402a6a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  402a6e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  402a72:	4094      	lsls	r4, r2
  402a74:	4320      	orrs	r0, r4
  402a76:	2e02      	cmp	r6, #2
  402a78:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  402a7c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  402a80:	d023      	beq.n	402aca <__register_exitproc+0x92>
  402a82:	3202      	adds	r2, #2
  402a84:	f8c3 e004 	str.w	lr, [r3, #4]
  402a88:	6828      	ldr	r0, [r5, #0]
  402a8a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  402a8e:	f7ff fed9 	bl	402844 <__retarget_lock_release_recursive>
  402a92:	2000      	movs	r0, #0
  402a94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402a98:	4b17      	ldr	r3, [pc, #92]	; (402af8 <__register_exitproc+0xc0>)
  402a9a:	b30b      	cbz	r3, 402ae0 <__register_exitproc+0xa8>
  402a9c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402aa0:	f3af 8000 	nop.w
  402aa4:	4603      	mov	r3, r0
  402aa6:	b1d8      	cbz	r0, 402ae0 <__register_exitproc+0xa8>
  402aa8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  402aac:	6002      	str	r2, [r0, #0]
  402aae:	2100      	movs	r1, #0
  402ab0:	6041      	str	r1, [r0, #4]
  402ab2:	460a      	mov	r2, r1
  402ab4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  402ab8:	f04f 0e01 	mov.w	lr, #1
  402abc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  402ac0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  402ac4:	2e00      	cmp	r6, #0
  402ac6:	d0dc      	beq.n	402a82 <__register_exitproc+0x4a>
  402ac8:	e7cc      	b.n	402a64 <__register_exitproc+0x2c>
  402aca:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  402ace:	430c      	orrs	r4, r1
  402ad0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  402ad4:	e7d5      	b.n	402a82 <__register_exitproc+0x4a>
  402ad6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  402ada:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  402ade:	e7bb      	b.n	402a58 <__register_exitproc+0x20>
  402ae0:	6828      	ldr	r0, [r5, #0]
  402ae2:	f7ff feaf 	bl	402844 <__retarget_lock_release_recursive>
  402ae6:	f04f 30ff 	mov.w	r0, #4294967295
  402aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402aee:	bf00      	nop
  402af0:	20000438 	.word	0x20000438
  402af4:	00402b68 	.word	0x00402b68
  402af8:	00000000 	.word	0x00000000
  402afc:	43435553 	.word	0x43435553
  402b00:	0d535345 	.word	0x0d535345
  402b04:	0000000a 	.word	0x0000000a
  402b08:	0001c200 	.word	0x0001c200
  402b0c:	000000c0 	.word	0x000000c0
  402b10:	00000800 	.word	0x00000800
	...
  402b20:	74736574 	.word	0x74736574
  402b24:	00000a0d 	.word	0x00000a0d
  402b28:	20746573 	.word	0x20746573
  402b2c:	6e616c77 	.word	0x6e616c77
  402b30:	6970675f 	.word	0x6970675f
  402b34:	3532206f 	.word	0x3532206f
  402b38:	00000a0d 	.word	0x00000a0d
  402b3c:	20746573 	.word	0x20746573
  402b40:	73626577 	.word	0x73626577
  402b44:	656b636f 	.word	0x656b636f
  402b48:	70675f74 	.word	0x70675f74
  402b4c:	32206f69 	.word	0x32206f69
  402b50:	000a0d36 	.word	0x000a0d36
  402b54:	20746573 	.word	0x20746573
  402b58:	675f7061 	.word	0x675f7061
  402b5c:	206f6970 	.word	0x206f6970
  402b60:	0a0d3732 	.word	0x0a0d3732
  402b64:	00000000 	.word	0x00000000

00402b68 <_global_impure_ptr>:
  402b68:	20000010                                ... 

00402b6c <_init>:
  402b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402b6e:	bf00      	nop
  402b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402b72:	bc08      	pop	{r3}
  402b74:	469e      	mov	lr, r3
  402b76:	4770      	bx	lr

00402b78 <__init_array_start>:
  402b78:	004027ed 	.word	0x004027ed

00402b7c <__frame_dummy_init_array_entry>:
  402b7c:	004000f1                                ..@.

00402b80 <_fini>:
  402b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402b82:	bf00      	nop
  402b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402b86:	bc08      	pop	{r3}
  402b88:	469e      	mov	lr, r3
  402b8a:	4770      	bx	lr

00402b8c <__fini_array_start>:
  402b8c:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 02fc 2000 0364 2000 03cc 2000     ....... d.. ... 
	...
200000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000438 <__atexit_recursive_mutex>:
20000438:	08ec 2000                                   ... 
